{
  "resolvedId": "C:/Users/.Freelancer/baotangnghethuat/node_modules/react-leaflet/lib/MapContainer.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { LeafletContext, createLeafletContext } from '@react-leaflet/core';\nimport { Map as LeafletMap } from 'leaflet';\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\nfunction MapContainerComponent({ bounds, boundsOptions, center, children, className, id, placeholder, style, whenReady, zoom, ...options }, forwardedRef) {\n    const [props] = useState({\n        className,\n        id,\n        style\n    });\n    const [context, setContext] = useState(null);\n    const mapInstanceRef = useRef(undefined);\n    useImperativeHandle(forwardedRef, ()=>context?.map ?? null, [\n        context\n    ]);\n    // biome-ignore lint/correctness/useExhaustiveDependencies: ref callback\n    const mapRef = useCallback((node)=>{\n        if (node !== null && !mapInstanceRef.current) {\n            const map = new LeafletMap(node, options);\n            mapInstanceRef.current = map;\n            if (center != null && zoom != null) {\n                map.setView(center, zoom);\n            } else if (bounds != null) {\n                map.fitBounds(bounds, boundsOptions);\n            }\n            if (whenReady != null) {\n                map.whenReady(whenReady);\n            }\n            setContext(createLeafletContext(map));\n        }\n    }, []);\n    useEffect(()=>{\n        return ()=>{\n            context?.map.remove();\n        };\n    }, [\n        context\n    ]);\n    const contents = context ? /*#__PURE__*/ React.createElement(LeafletContext, {\n        value: context\n    }, children) : placeholder ?? null;\n    return /*#__PURE__*/ React.createElement(\"div\", {\n        ...props,\n        ref: mapRef\n    }, contents);\n}\nexport const MapContainer = /*#__PURE__*/ forwardRef(MapContainerComponent);\n",
      "start": 1749089010702,
      "end": 1749089010856,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1749089010856,
      "end": 1749089010856,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1749089010856,
      "end": 1749089010856,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1749089010856,
      "end": 1749089010856,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1749089010856,
      "end": 1749089010856,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1749089010856,
      "end": 1749089010856,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1749089010856,
      "end": 1749089010856,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1749089010856,
      "end": 1749089010856,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1749089010865,
      "end": 1749089010865,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1749089010865,
      "end": 1749089010865,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1749089010865,
      "end": 1749089010865,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1749089010865,
      "end": 1749089010865,
      "order": "normal"
    }
  ]
}
