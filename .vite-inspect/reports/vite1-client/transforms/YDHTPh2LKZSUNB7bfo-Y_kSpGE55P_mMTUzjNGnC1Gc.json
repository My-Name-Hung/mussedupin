{
  "resolvedId": "C:/Users/.Freelancer/ONLINE/node_modules/enquire.js/src/MediaQueryDispatch.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var MediaQuery = require('./MediaQuery');\nvar Util = require('./Util');\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\n\n/**\n * Allows for registration of query handlers.\n * Manages the query handler's state and is responsible for wiring up browser events\n *\n * @constructor\n */\nfunction MediaQueryDispatch () {\n    if(!window.matchMedia) {\n        throw new Error('matchMedia not present, legacy browsers require a polyfill');\n    }\n\n    this.queries = {};\n    this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\n\nMediaQueryDispatch.prototype = {\n\n    constructor : MediaQueryDispatch,\n\n    /**\n     * Registers a handler for the given media query\n     *\n     * @param {string} q the media query\n     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\n     * @param {function} options.match fired when query matched\n     * @param {function} [options.unmatch] fired when a query is no longer matched\n     * @param {function} [options.setup] fired when handler first triggered\n     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\n     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\n     */\n    register : function(q, options, shouldDegrade) {\n        var queries         = this.queries,\n            isUnconditional = shouldDegrade && this.browserIsIncapable;\n\n        if(!queries[q]) {\n            queries[q] = new MediaQuery(q, isUnconditional);\n        }\n\n        //normalise to object in an array\n        if(isFunction(options)) {\n            options = { match : options };\n        }\n        if(!isArray(options)) {\n            options = [options];\n        }\n        each(options, function(handler) {\n            if (isFunction(handler)) {\n                handler = { match : handler };\n            }\n            queries[q].addHandler(handler);\n        });\n\n        return this;\n    },\n\n    /**\n     * unregisters a query and all it's handlers, or a specific handler for a query\n     *\n     * @param {string} q the media query to target\n     * @param {object || function} [handler] specific handler to unregister\n     */\n    unregister : function(q, handler) {\n        var query = this.queries[q];\n\n        if(query) {\n            if(handler) {\n                query.removeHandler(handler);\n            }\n            else {\n                query.clear();\n                delete this.queries[q];\n            }\n        }\n\n        return this;\n    }\n};\n\nmodule.exports = MediaQueryDispatch;\n",
      "start": 1749894716013,
      "end": 1749894716383,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1749894716383,
      "end": 1749894716383,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1749894716383,
      "end": 1749894716383,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1749894716384,
      "end": 1749894716384,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1749894716384,
      "end": 1749894716384,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1749894716384,
      "end": 1749894716384,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1749894716384,
      "end": 1749894716384,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1749894716384,
      "end": 1749894716384,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1749894716831,
      "end": 1749894716831,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1749894716831,
      "end": 1749894716831,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1749894716831,
      "end": 1749894716831,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1749894716831,
      "end": 1749894716832,
      "order": "normal"
    }
  ]
}
