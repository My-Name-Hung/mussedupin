{
  "resolvedId": "C:/Users/.Freelancer/ONLINE/src/pages/CartPage/CartPage.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React, { useEffect, useState } from \"react\";\nimport { FaChevronDown, FaChevronUp, FaTimes } from \"react-icons/fa\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport LoadingSpinner from \"../../components/LoadingSpinner/LoadingSpinner\";\nimport Notification from \"../../components/Notification/Notification\";\nimport {\n  getAnPhamImageUrl,\n  getThoCamImageUrl,\n  getHoiThaoNgheThuatImageUrl,\n  getInTheoYeuCauImageUrl,\n  getKhuyenTaiImageUrl,\n  getThoiTrangImageUrl,\n  getSanPhamTuThongImageUrl,\n} from \"../../utils/cloudinary\";\nimport \"./CartPage.css\";\n\n// Helper function to get image URL based on category\nconst getImageUrl = (category, filename) => {\n  switch (category) {\n    case \"khuyentai\":\n      return getKhuyenTaiImageUrl(filename);\n    case \"anpham\":\n      return getAnPhamImageUrl(filename);\n    case \"in-theo-yeu-cau\":\n      return getInTheoYeuCauImageUrl(filename);\n    case \"hoi-thao-nghe-thuat\":\n      return getHoiThaoNgheThuatImageUrl(filename);\n    case \"thoi-trang-va-phu-kien\":\n      return getThoiTrangImageUrl(filename);\n    case \"thocam\":\n      return getThoCamImageUrl(filename);\n    case \"sanphamtuthong\":\n      return getSanPhamTuThongImageUrl(filename);\n    default:\n      return \"\";\n  }\n};\n\nconst CartPage = () => {\n  const navigate = useNavigate();\n  const [cartItems, setCartItems] = useState([]);\n  const [savedItems, setSavedItems] = useState([]);\n  const [promoCode, setPromoCode] = useState(\"\");\n  const [discountApplied, setDiscountApplied] = useState(false);\n  const [discountRate, setDiscountRate] = useState(0);\n  const [quantities, setQuantities] = useState({});\n  const [showQuantityDropdown, setShowQuantityDropdown] = useState(null);\n  const [showNotification, setShowNotification] = useState(false);\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\n  const [notificationType, setNotificationType] = useState(\"success\");\n  const [orders, setOrders] = useState([]);\n  const [isLoadingConfirm, setIsLoadingConfirm] = useState(false);\n  const [isLoadingDelete, setIsLoadingDelete] = useState(null);\n  const [isLoadingCheckout, setIsLoadingCheckout] = useState(false);\n\n  useEffect(() => {\n    loadCartItems();\n    loadOrders();\n  }, []);\n\n  const loadCartItems = () => {\n    const cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n    const saved = JSON.parse(localStorage.getItem(\"savedItems\")) || [];\n    setCartItems(cart);\n    setSavedItems(saved);\n\n    // Initialize quantities state\n    const quantityState = {};\n    cart.forEach((item) => {\n      quantityState[item.id] = item.quantity;\n    });\n    setQuantities(quantityState);\n  };\n\n  const loadOrders = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return;\n\n      const response = await fetch(\n        \"https://mussedupin.onrender.com/api/orders\",\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      const data = await response.json();\n      if (data.success) {\n        setOrders(data.orders);\n      }\n    } catch (error) {\n      console.error(\"Error loading orders:\", error);\n    }\n  };\n\n  const handleConfirmReceived = async (orderCode) => {\n    try {\n      setIsLoadingConfirm(true);\n      const response = await fetch(\n        `https://mussedupin.onrender.com/api/orders/${orderCode}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n          body: JSON.stringify({ status: \"Completed\" }),\n        }\n      );\n\n      const data = await response.json();\n      if (data.success) {\n        setNotificationMessage(\"Đã xác nhận nhận hàng thành công\");\n        setNotificationType(\"success\");\n        setShowNotification(true);\n        loadOrders();\n      }\n    } catch (error) {\n      console.error(\"Error confirming order:\", error);\n    } finally {\n      setIsLoadingConfirm(false);\n    }\n  };\n\n  const handleDeleteOrder = async (orderCode) => {\n    try {\n      setIsLoadingDelete(orderCode);\n      const response = await fetch(\n        `https://mussedupin.onrender.com/api/orders/${orderCode}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      );\n\n      const data = await response.json();\n      if (data.success) {\n        setNotificationMessage(\"Đã xóa đơn hàng khỏi lịch sử\");\n        setNotificationType(\"success\");\n        setShowNotification(true);\n        setOrders(orders.filter((order) => order.orderCode !== orderCode));\n      }\n    } catch (error) {\n      console.error(\"Error deleting order:\", error);\n      setNotificationMessage(\"Không thể xóa đơn hàng\");\n      setNotificationType(\"error\");\n      setShowNotification(true);\n    } finally {\n      setIsLoadingDelete(null);\n    }\n  };\n\n  const updateQuantity = (itemId, newQuantity) => {\n    const updatedCart = cartItems.map((item) => {\n      if (item.id === itemId) {\n        return { ...item, quantity: newQuantity };\n      }\n      return item;\n    });\n\n    setCartItems(updatedCart);\n    setQuantities({ ...quantities, [itemId]: newQuantity });\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    window.dispatchEvent(new Event(\"cartUpdated\"));\n  };\n\n  const removeFromCart = (itemId) => {\n    const updatedCart = cartItems.filter((item) => item.id !== itemId);\n    setCartItems(updatedCart);\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    window.dispatchEvent(new Event(\"cartUpdated\"));\n  };\n\n  const saveForLater = (item) => {\n    // Remove from cart\n    removeFromCart(item.id);\n\n    // Add to saved items\n    const updatedSavedItems = [...savedItems, item];\n    setSavedItems(updatedSavedItems);\n    localStorage.setItem(\"savedItems\", JSON.stringify(updatedSavedItems));\n  };\n\n  const moveToCart = (item) => {\n    // Remove from saved items\n    const updatedSavedItems = savedItems.filter(\n      (savedItem) => savedItem.id !== item.id\n    );\n    setSavedItems(updatedSavedItems);\n    localStorage.setItem(\"savedItems\", JSON.stringify(updatedSavedItems));\n\n    // Add to cart\n    const updatedCart = [...cartItems, { ...item, quantity: 1 }];\n    setCartItems(updatedCart);\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    window.dispatchEvent(new Event(\"cartUpdated\"));\n  };\n\n  const removeSavedItem = (itemId) => {\n    const updatedSavedItems = savedItems.filter((item) => item.id !== itemId);\n    setSavedItems(updatedSavedItems);\n    localStorage.setItem(\"savedItems\", JSON.stringify(updatedSavedItems));\n  };\n\n  const PROMO_CODES = {\n    langnghethonghat: {\n      rate: 0.5,\n      message: \"Mã giảm giá 50% đã được áp dụng thành công\",\n    },\n    baotangthong: {\n      rate: 0.25,\n      message: \"Mã giảm giá 25% đã được áp dụng thành công\",\n    },\n  };\n\n  const applyPromoCode = () => {\n    const promoInfo = PROMO_CODES[promoCode.toLowerCase()];\n\n    if (promoInfo) {\n      setDiscountApplied(true);\n      setDiscountRate(promoInfo.rate);\n      setNotificationMessage(promoInfo.message);\n      setNotificationType(\"success\");\n      setShowNotification(true);\n\n      // Lưu thông tin giảm giá vào localStorage ngay khi áp dụng\n      const discountData = {\n        applied: true,\n        rate: promoInfo.rate,\n        total: calculateTotal() * (1 - promoInfo.rate),\n        code: promoCode,\n      };\n      localStorage.setItem(\"cartDiscount\", JSON.stringify(discountData));\n    } else {\n      setDiscountApplied(false);\n      setDiscountRate(0);\n      setNotificationMessage(\"Mã giảm giá không hợp lệ\");\n      setNotificationType(\"error\");\n      setShowNotification(true);\n      localStorage.removeItem(\"cartDiscount\"); // Xóa thông tin giảm giá nếu mã không hợp lệ\n    }\n  };\n\n  const calculateTotal = () => {\n    const subtotal = cartItems.reduce((total, item) => {\n      return total + item.price * item.quantity;\n    }, 0);\n\n    return discountApplied ? subtotal * (1 - discountRate) : subtotal;\n  };\n\n  const handleCheckout = () => {\n    if (cartItems.length === 0) {\n      setNotificationMessage(\"Giỏ hàng của bạn đang trống\");\n      setNotificationType(\"error\");\n      setShowNotification(true);\n      return;\n    }\n    setIsLoadingCheckout(true);\n\n    // Lưu thông tin giảm giá vào localStorage\n    const discountData = {\n      applied: discountApplied,\n      rate: discountRate,\n      total: calculateTotal(),\n      code: promoCode, // Thêm mã giảm giá đã sử dụng\n    };\n\n    localStorage.setItem(\"cartDiscount\", JSON.stringify(discountData));\n    setTimeout(() => {\n      navigate(\"/checkout\");\n      setIsLoadingCheckout(false);\n    }, 500);\n  };\n\n  return (\n    <div className=\"cart-page\">\n      <Notification\n        message={notificationMessage}\n        isVisible={showNotification}\n        onClose={() => setShowNotification(false)}\n        type={notificationType}\n      />\n\n      <h1 className=\"cart-title\">Giỏ hàng của tôi</h1>\n\n      <div className=\"cart-actions-top\">\n        <button\n          className=\"checkout-button\"\n          onClick={handleCheckout}\n          disabled={isLoadingCheckout}\n        >\n          {isLoadingCheckout ? <LoadingSpinner /> : \"Đi đến thanh toán\"}\n        </button>\n        <Link to=\"/\" className=\"continue-shopping\">\n          Tiếp tục mua sắm\n        </Link>\n      </div>\n\n      <div className=\"cart-content\">\n        {cartItems.map((item) => (\n          <div key={item.id} className=\"cart-item\">\n            <div className=\"item-image\">\n              <img\n                src={getImageUrl(item.category, item.image)}\n                alt={item.name}\n              />\n            </div>\n\n            <div className=\"item-details\">\n              <h3>{item.name}</h3>\n\n              <div className=\"quantity-selector\">\n                <div\n                  className=\"quantity-display\"\n                  onClick={() =>\n                    setShowQuantityDropdown(\n                      item.id === showQuantityDropdown ? null : item.id\n                    )\n                  }\n                >\n                  <span>{quantities[item.id]}</span>\n                  {showQuantityDropdown === item.id ? (\n                    <FaChevronUp />\n                  ) : (\n                    <FaChevronDown />\n                  )}\n                </div>\n\n                {showQuantityDropdown === item.id && (\n                  <div className=\"quantity-dropdown\">\n                    {[...Array(20)].map((_, i) => (\n                      <div\n                        key={i + 1}\n                        className=\"quantity-option\"\n                        onClick={() => {\n                          updateQuantity(item.id, i + 1);\n                          setShowQuantityDropdown(null);\n                        }}\n                      >\n                        {i + 1}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              <p className=\"item-price\">\n                {(item.price * quantities[item.id]).toLocaleString()}đ\n              </p>\n\n              <div className=\"item-actions\">\n                <button\n                  className=\"remove-item\"\n                  onClick={() => removeFromCart(item.id)}\n                >\n                  Xóa khỏi giỏ hàng\n                </button>\n                <button\n                  className=\"save-for-later\"\n                  onClick={() => saveForLater(item)}\n                >\n                  Lưu để xem sau\n                </button>\n              </div>\n\n              <div className=\"promo-code\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Nhập mã giảm giá\"\n                  value={promoCode}\n                  className=\"promo-code-input\"\n                  onChange={(e) => setPromoCode(e.target.value)}\n                />\n                <button className=\"apply-promo\" onClick={applyPromoCode}>\n                  Áp dụng\n                </button>\n              </div>\n            </div>\n          </div>\n        ))}\n\n        <div className=\"cart-total-product\">\n          <div className=\"total-amount-product\">\n            Tổng cộng: {calculateTotal().toLocaleString()}đ\n          </div>\n          <p className=\"shipping-note-product\">\n            Không bao gồm chi phí vận chuyển, hãy chọn tùy chọn vận chuyển\n            trước.\n          </p>\n        </div>\n\n        <div className=\"cart-actions-bottom\">\n          <button\n            className=\"checkout-button\"\n            onClick={handleCheckout}\n            disabled={isLoadingCheckout}\n          >\n            {isLoadingCheckout ? <LoadingSpinner /> : \"Đi đến thanh toán\"}\n          </button>\n          <Link to=\"/\" className=\"continue-shopping\">\n            Tiếp tục mua sắm\n          </Link>\n        </div>\n\n        {orders.length > 0 && (\n          <section className=\"orders-section\">\n            <h2>Đơn hàng của tôi</h2>\n            {orders.map((order) => (\n              <div key={order.orderCode} className=\"order-item\">\n                <div className=\"order-header\">\n                  <div className=\"order-header-left\">\n                    <h3>Mã đơn hàng: {order.orderCode}</h3>\n                    <span\n                      className={`order-status ${order.status.toLowerCase()}`}\n                    >\n                      {order.status}\n                    </span>\n                  </div>\n                  <button\n                    className=\"delete-order-btn\"\n                    onClick={() => handleDeleteOrder(order.orderCode)}\n                    disabled={isLoadingDelete === order.orderCode}\n                    title=\"Xóa khỏi lịch sử\"\n                  >\n                    {isLoadingDelete === order.orderCode ? (\n                      <LoadingSpinner size=\"small\" color=\"#dc3545\" />\n                    ) : (\n                      <FaTimes />\n                    )}\n                  </button>\n                </div>\n\n                <div className=\"order-products\">\n                  {order.items.map((item) => (\n                    <div key={item.id} className=\"order-product\">\n                      <img\n                        src={getImageUrl(item.category, item.image)}\n                        alt={item.name}\n                      />\n                      <div className=\"product-details\">\n                        <h4>{item.name}</h4>\n                        <p>Số lượng: {item.quantity}</p>\n                        <p className=\"price\">\n                          {(item.price * item.quantity).toLocaleString()}đ\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"order-footer\">\n                  <div className=\"order-info\">\n                    <p className=\"total-amount\">\n                      Tổng tiền: {order.totalAmount.toLocaleString()}đ\n                    </p>\n                    <p className=\"order-date\">\n                      Ngày đặt:{\" \"}\n                      {new Date(order.createdAt).toLocaleDateString(\"vi-VN\")}\n                    </p>\n                  </div>\n                  {order.status === \"Pending\" && (\n                    <button\n                      className=\"confirm-received-btn\"\n                      onClick={() => handleConfirmReceived(order.orderCode)}\n                      disabled={isLoadingConfirm}\n                    >\n                      {isLoadingConfirm ? (\n                        <LoadingSpinner />\n                      ) : (\n                        \"Xác nhận đã nhận hàng\"\n                      )}\n                    </button>\n                  )}\n                </div>\n              </div>\n            ))}\n          </section>\n        )}\n\n        {savedItems.length > 0 && (\n          <section className=\"related-products-payment\">\n            <h2>Các mục được lưu lại để xem sau</h2>\n            <p className=\"subtitle\">\n              Các mặt hàng này chỉ được lưu trữ trong giỏ hàng của bạn để sử\n              dụng sau.\n            </p>\n\n            <div className=\"saved-items\">\n              {savedItems.map((item) => (\n                <div key={item.id} className=\"saved-item\">\n                  <img\n                    src={getImageUrl(item.category, item.image)}\n                    alt={item.name}\n                  />\n                  <h3>{item.name}</h3>\n                  <p className=\"price\">{item.price.toLocaleString()}đ</p>\n                  <div className=\"saved-item-actions\">\n                    <button onClick={() => removeSavedItem(item.id)}>\n                      Xóa khỏi giỏ hàng\n                    </button>\n                    <button onClick={() => moveToCart(item)}>\n                      Thêm vào giỏ hàng\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </section>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CartPage;\n",
      "start": 1751253944682,
      "end": 1751253945006,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1751253945006,
      "end": 1751253945006,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport { FaChevronDown, FaChevronUp, FaTimes } from \"react-icons/fa\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport LoadingSpinner from \"../../components/LoadingSpinner/LoadingSpinner\";\nimport Notification from \"../../components/Notification/Notification\";\nimport {\n  getAnPhamImageUrl,\n  getThoCamImageUrl,\n  getHoiThaoNgheThuatImageUrl,\n  getInTheoYeuCauImageUrl,\n  getKhuyenTaiImageUrl,\n  getThoiTrangImageUrl,\n  getSanPhamTuThongImageUrl\n} from \"../../utils/cloudinary\";\nimport \"./CartPage.css\";\nconst getImageUrl = (category, filename) => {\n  switch (category) {\n    case \"khuyentai\":\n      return getKhuyenTaiImageUrl(filename);\n    case \"anpham\":\n      return getAnPhamImageUrl(filename);\n    case \"in-theo-yeu-cau\":\n      return getInTheoYeuCauImageUrl(filename);\n    case \"hoi-thao-nghe-thuat\":\n      return getHoiThaoNgheThuatImageUrl(filename);\n    case \"thoi-trang-va-phu-kien\":\n      return getThoiTrangImageUrl(filename);\n    case \"thocam\":\n      return getThoCamImageUrl(filename);\n    case \"sanphamtuthong\":\n      return getSanPhamTuThongImageUrl(filename);\n    default:\n      return \"\";\n  }\n};\nconst CartPage = () => {\n  const navigate = useNavigate();\n  const [cartItems, setCartItems] = useState([]);\n  const [savedItems, setSavedItems] = useState([]);\n  const [promoCode, setPromoCode] = useState(\"\");\n  const [discountApplied, setDiscountApplied] = useState(false);\n  const [discountRate, setDiscountRate] = useState(0);\n  const [quantities, setQuantities] = useState({});\n  const [showQuantityDropdown, setShowQuantityDropdown] = useState(null);\n  const [showNotification, setShowNotification] = useState(false);\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\n  const [notificationType, setNotificationType] = useState(\"success\");\n  const [orders, setOrders] = useState([]);\n  const [isLoadingConfirm, setIsLoadingConfirm] = useState(false);\n  const [isLoadingDelete, setIsLoadingDelete] = useState(null);\n  const [isLoadingCheckout, setIsLoadingCheckout] = useState(false);\n  useEffect(() => {\n    loadCartItems();\n    loadOrders();\n  }, []);\n  const loadCartItems = () => {\n    const cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n    const saved = JSON.parse(localStorage.getItem(\"savedItems\")) || [];\n    setCartItems(cart);\n    setSavedItems(saved);\n    const quantityState = {};\n    cart.forEach((item) => {\n      quantityState[item.id] = item.quantity;\n    });\n    setQuantities(quantityState);\n  };\n  const loadOrders = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return;\n      const response = await fetch(\n        \"https://mussedupin.onrender.com/api/orders\",\n        {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }\n      );\n      const data = await response.json();\n      if (data.success) {\n        setOrders(data.orders);\n      }\n    } catch (error) {\n      console.error(\"Error loading orders:\", error);\n    }\n  };\n  const handleConfirmReceived = async (orderCode) => {\n    try {\n      setIsLoadingConfirm(true);\n      const response = await fetch(\n        `https://mussedupin.onrender.com/api/orders/${orderCode}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          },\n          body: JSON.stringify({ status: \"Completed\" })\n        }\n      );\n      const data = await response.json();\n      if (data.success) {\n        setNotificationMessage(\"Đã xác nhận nhận hàng thành công\");\n        setNotificationType(\"success\");\n        setShowNotification(true);\n        loadOrders();\n      }\n    } catch (error) {\n      console.error(\"Error confirming order:\", error);\n    } finally {\n      setIsLoadingConfirm(false);\n    }\n  };\n  const handleDeleteOrder = async (orderCode) => {\n    try {\n      setIsLoadingDelete(orderCode);\n      const response = await fetch(\n        `https://mussedupin.onrender.com/api/orders/${orderCode}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        }\n      );\n      const data = await response.json();\n      if (data.success) {\n        setNotificationMessage(\"Đã xóa đơn hàng khỏi lịch sử\");\n        setNotificationType(\"success\");\n        setShowNotification(true);\n        setOrders(orders.filter((order) => order.orderCode !== orderCode));\n      }\n    } catch (error) {\n      console.error(\"Error deleting order:\", error);\n      setNotificationMessage(\"Không thể xóa đơn hàng\");\n      setNotificationType(\"error\");\n      setShowNotification(true);\n    } finally {\n      setIsLoadingDelete(null);\n    }\n  };\n  const updateQuantity = (itemId, newQuantity) => {\n    const updatedCart = cartItems.map((item) => {\n      if (item.id === itemId) {\n        return { ...item, quantity: newQuantity };\n      }\n      return item;\n    });\n    setCartItems(updatedCart);\n    setQuantities({ ...quantities, [itemId]: newQuantity });\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    window.dispatchEvent(new Event(\"cartUpdated\"));\n  };\n  const removeFromCart = (itemId) => {\n    const updatedCart = cartItems.filter((item) => item.id !== itemId);\n    setCartItems(updatedCart);\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    window.dispatchEvent(new Event(\"cartUpdated\"));\n  };\n  const saveForLater = (item) => {\n    removeFromCart(item.id);\n    const updatedSavedItems = [...savedItems, item];\n    setSavedItems(updatedSavedItems);\n    localStorage.setItem(\"savedItems\", JSON.stringify(updatedSavedItems));\n  };\n  const moveToCart = (item) => {\n    const updatedSavedItems = savedItems.filter(\n      (savedItem) => savedItem.id !== item.id\n    );\n    setSavedItems(updatedSavedItems);\n    localStorage.setItem(\"savedItems\", JSON.stringify(updatedSavedItems));\n    const updatedCart = [...cartItems, { ...item, quantity: 1 }];\n    setCartItems(updatedCart);\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    window.dispatchEvent(new Event(\"cartUpdated\"));\n  };\n  const removeSavedItem = (itemId) => {\n    const updatedSavedItems = savedItems.filter((item) => item.id !== itemId);\n    setSavedItems(updatedSavedItems);\n    localStorage.setItem(\"savedItems\", JSON.stringify(updatedSavedItems));\n  };\n  const PROMO_CODES = {\n    langnghethonghat: {\n      rate: 0.5,\n      message: \"Mã giảm giá 50% đã được áp dụng thành công\"\n    },\n    baotangthong: {\n      rate: 0.25,\n      message: \"Mã giảm giá 25% đã được áp dụng thành công\"\n    }\n  };\n  const applyPromoCode = () => {\n    const promoInfo = PROMO_CODES[promoCode.toLowerCase()];\n    if (promoInfo) {\n      setDiscountApplied(true);\n      setDiscountRate(promoInfo.rate);\n      setNotificationMessage(promoInfo.message);\n      setNotificationType(\"success\");\n      setShowNotification(true);\n      const discountData = {\n        applied: true,\n        rate: promoInfo.rate,\n        total: calculateTotal() * (1 - promoInfo.rate),\n        code: promoCode\n      };\n      localStorage.setItem(\"cartDiscount\", JSON.stringify(discountData));\n    } else {\n      setDiscountApplied(false);\n      setDiscountRate(0);\n      setNotificationMessage(\"Mã giảm giá không hợp lệ\");\n      setNotificationType(\"error\");\n      setShowNotification(true);\n      localStorage.removeItem(\"cartDiscount\");\n    }\n  };\n  const calculateTotal = () => {\n    const subtotal = cartItems.reduce((total, item) => {\n      return total + item.price * item.quantity;\n    }, 0);\n    return discountApplied ? subtotal * (1 - discountRate) : subtotal;\n  };\n  const handleCheckout = () => {\n    if (cartItems.length === 0) {\n      setNotificationMessage(\"Giỏ hàng của bạn đang trống\");\n      setNotificationType(\"error\");\n      setShowNotification(true);\n      return;\n    }\n    setIsLoadingCheckout(true);\n    const discountData = {\n      applied: discountApplied,\n      rate: discountRate,\n      total: calculateTotal(),\n      code: promoCode\n      // Thêm mã giảm giá đã sử dụng\n    };\n    localStorage.setItem(\"cartDiscount\", JSON.stringify(discountData));\n    setTimeout(() => {\n      navigate(\"/checkout\");\n      setIsLoadingCheckout(false);\n    }, 500);\n  };\n  return /* @__PURE__ */ jsxs(\"div\", { className: \"cart-page\", children: [\n    /* @__PURE__ */ jsx(\n      Notification,\n      {\n        message: notificationMessage,\n        isVisible: showNotification,\n        onClose: () => setShowNotification(false),\n        type: notificationType\n      }\n    ),\n    /* @__PURE__ */ jsx(\"h1\", { className: \"cart-title\", children: \"Giỏ hàng của tôi\" }),\n    /* @__PURE__ */ jsxs(\"div\", { className: \"cart-actions-top\", children: [\n      /* @__PURE__ */ jsx(\n        \"button\",\n        {\n          className: \"checkout-button\",\n          onClick: handleCheckout,\n          disabled: isLoadingCheckout,\n          children: isLoadingCheckout ? /* @__PURE__ */ jsx(LoadingSpinner, {}) : \"Đi đến thanh toán\"\n        }\n      ),\n      /* @__PURE__ */ jsx(Link, { to: \"/\", className: \"continue-shopping\", children: \"Tiếp tục mua sắm\" })\n    ] }),\n    /* @__PURE__ */ jsxs(\"div\", { className: \"cart-content\", children: [\n      cartItems.map((item) => /* @__PURE__ */ jsxs(\"div\", { className: \"cart-item\", children: [\n        /* @__PURE__ */ jsx(\"div\", { className: \"item-image\", children: /* @__PURE__ */ jsx(\n          \"img\",\n          {\n            src: getImageUrl(item.category, item.image),\n            alt: item.name\n          }\n        ) }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"item-details\", children: [\n          /* @__PURE__ */ jsx(\"h3\", { children: item.name }),\n          /* @__PURE__ */ jsxs(\"div\", { className: \"quantity-selector\", children: [\n            /* @__PURE__ */ jsxs(\n              \"div\",\n              {\n                className: \"quantity-display\",\n                onClick: () => setShowQuantityDropdown(\n                  item.id === showQuantityDropdown ? null : item.id\n                ),\n                children: [\n                  /* @__PURE__ */ jsx(\"span\", { children: quantities[item.id] }),\n                  showQuantityDropdown === item.id ? /* @__PURE__ */ jsx(FaChevronUp, {}) : /* @__PURE__ */ jsx(FaChevronDown, {})\n                ]\n              }\n            ),\n            showQuantityDropdown === item.id && /* @__PURE__ */ jsx(\"div\", { className: \"quantity-dropdown\", children: [...Array(20)].map((_, i) => /* @__PURE__ */ jsx(\n              \"div\",\n              {\n                className: \"quantity-option\",\n                onClick: () => {\n                  updateQuantity(item.id, i + 1);\n                  setShowQuantityDropdown(null);\n                },\n                children: i + 1\n              },\n              i + 1\n            )) })\n          ] }),\n          /* @__PURE__ */ jsxs(\"p\", { className: \"item-price\", children: [\n            (item.price * quantities[item.id]).toLocaleString(),\n            \"đ\"\n          ] }),\n          /* @__PURE__ */ jsxs(\"div\", { className: \"item-actions\", children: [\n            /* @__PURE__ */ jsx(\n              \"button\",\n              {\n                className: \"remove-item\",\n                onClick: () => removeFromCart(item.id),\n                children: \"Xóa khỏi giỏ hàng\"\n              }\n            ),\n            /* @__PURE__ */ jsx(\n              \"button\",\n              {\n                className: \"save-for-later\",\n                onClick: () => saveForLater(item),\n                children: \"Lưu để xem sau\"\n              }\n            )\n          ] }),\n          /* @__PURE__ */ jsxs(\"div\", { className: \"promo-code\", children: [\n            /* @__PURE__ */ jsx(\n              \"input\",\n              {\n                type: \"text\",\n                placeholder: \"Nhập mã giảm giá\",\n                value: promoCode,\n                className: \"promo-code-input\",\n                onChange: (e) => setPromoCode(e.target.value)\n              }\n            ),\n            /* @__PURE__ */ jsx(\"button\", { className: \"apply-promo\", onClick: applyPromoCode, children: \"Áp dụng\" })\n          ] })\n        ] })\n      ] }, item.id)),\n      /* @__PURE__ */ jsxs(\"div\", { className: \"cart-total-product\", children: [\n        /* @__PURE__ */ jsxs(\"div\", { className: \"total-amount-product\", children: [\n          \"Tổng cộng: \",\n          calculateTotal().toLocaleString(),\n          \"đ\"\n        ] }),\n        /* @__PURE__ */ jsx(\"p\", { className: \"shipping-note-product\", children: \"Không bao gồm chi phí vận chuyển, hãy chọn tùy chọn vận chuyển trước.\" })\n      ] }),\n      /* @__PURE__ */ jsxs(\"div\", { className: \"cart-actions-bottom\", children: [\n        /* @__PURE__ */ jsx(\n          \"button\",\n          {\n            className: \"checkout-button\",\n            onClick: handleCheckout,\n            disabled: isLoadingCheckout,\n            children: isLoadingCheckout ? /* @__PURE__ */ jsx(LoadingSpinner, {}) : \"Đi đến thanh toán\"\n          }\n        ),\n        /* @__PURE__ */ jsx(Link, { to: \"/\", className: \"continue-shopping\", children: \"Tiếp tục mua sắm\" })\n      ] }),\n      orders.length > 0 && /* @__PURE__ */ jsxs(\"section\", { className: \"orders-section\", children: [\n        /* @__PURE__ */ jsx(\"h2\", { children: \"Đơn hàng của tôi\" }),\n        orders.map((order) => /* @__PURE__ */ jsxs(\"div\", { className: \"order-item\", children: [\n          /* @__PURE__ */ jsxs(\"div\", { className: \"order-header\", children: [\n            /* @__PURE__ */ jsxs(\"div\", { className: \"order-header-left\", children: [\n              /* @__PURE__ */ jsxs(\"h3\", { children: [\n                \"Mã đơn hàng: \",\n                order.orderCode\n              ] }),\n              /* @__PURE__ */ jsx(\n                \"span\",\n                {\n                  className: `order-status ${order.status.toLowerCase()}`,\n                  children: order.status\n                }\n              )\n            ] }),\n            /* @__PURE__ */ jsx(\n              \"button\",\n              {\n                className: \"delete-order-btn\",\n                onClick: () => handleDeleteOrder(order.orderCode),\n                disabled: isLoadingDelete === order.orderCode,\n                title: \"Xóa khỏi lịch sử\",\n                children: isLoadingDelete === order.orderCode ? /* @__PURE__ */ jsx(LoadingSpinner, { size: \"small\", color: \"#dc3545\" }) : /* @__PURE__ */ jsx(FaTimes, {})\n              }\n            )\n          ] }),\n          /* @__PURE__ */ jsx(\"div\", { className: \"order-products\", children: order.items.map((item) => /* @__PURE__ */ jsxs(\"div\", { className: \"order-product\", children: [\n            /* @__PURE__ */ jsx(\n              \"img\",\n              {\n                src: getImageUrl(item.category, item.image),\n                alt: item.name\n              }\n            ),\n            /* @__PURE__ */ jsxs(\"div\", { className: \"product-details\", children: [\n              /* @__PURE__ */ jsx(\"h4\", { children: item.name }),\n              /* @__PURE__ */ jsxs(\"p\", { children: [\n                \"Số lượng: \",\n                item.quantity\n              ] }),\n              /* @__PURE__ */ jsxs(\"p\", { className: \"price\", children: [\n                (item.price * item.quantity).toLocaleString(),\n                \"đ\"\n              ] })\n            ] })\n          ] }, item.id)) }),\n          /* @__PURE__ */ jsxs(\"div\", { className: \"order-footer\", children: [\n            /* @__PURE__ */ jsxs(\"div\", { className: \"order-info\", children: [\n              /* @__PURE__ */ jsxs(\"p\", { className: \"total-amount\", children: [\n                \"Tổng tiền: \",\n                order.totalAmount.toLocaleString(),\n                \"đ\"\n              ] }),\n              /* @__PURE__ */ jsxs(\"p\", { className: \"order-date\", children: [\n                \"Ngày đặt:\",\n                \" \",\n                new Date(order.createdAt).toLocaleDateString(\"vi-VN\")\n              ] })\n            ] }),\n            order.status === \"Pending\" && /* @__PURE__ */ jsx(\n              \"button\",\n              {\n                className: \"confirm-received-btn\",\n                onClick: () => handleConfirmReceived(order.orderCode),\n                disabled: isLoadingConfirm,\n                children: isLoadingConfirm ? /* @__PURE__ */ jsx(LoadingSpinner, {}) : \"Xác nhận đã nhận hàng\"\n              }\n            )\n          ] })\n        ] }, order.orderCode))\n      ] }),\n      savedItems.length > 0 && /* @__PURE__ */ jsxs(\"section\", { className: \"related-products-payment\", children: [\n        /* @__PURE__ */ jsx(\"h2\", { children: \"Các mục được lưu lại để xem sau\" }),\n        /* @__PURE__ */ jsx(\"p\", { className: \"subtitle\", children: \"Các mặt hàng này chỉ được lưu trữ trong giỏ hàng của bạn để sử dụng sau.\" }),\n        /* @__PURE__ */ jsx(\"div\", { className: \"saved-items\", children: savedItems.map((item) => /* @__PURE__ */ jsxs(\"div\", { className: \"saved-item\", children: [\n          /* @__PURE__ */ jsx(\n            \"img\",\n            {\n              src: getImageUrl(item.category, item.image),\n              alt: item.name\n            }\n          ),\n          /* @__PURE__ */ jsx(\"h3\", { children: item.name }),\n          /* @__PURE__ */ jsxs(\"p\", { className: \"price\", children: [\n            item.price.toLocaleString(),\n            \"đ\"\n          ] }),\n          /* @__PURE__ */ jsxs(\"div\", { className: \"saved-item-actions\", children: [\n            /* @__PURE__ */ jsx(\"button\", { onClick: () => removeSavedItem(item.id), children: \"Xóa khỏi giỏ hàng\" }),\n            /* @__PURE__ */ jsx(\"button\", { onClick: () => moveToCart(item), children: \"Thêm vào giỏ hàng\" })\n          ] })\n        ] }, item.id)) })\n      ] })\n    ] })\n  ] });\n};\nexport default CartPage;\n",
      "start": 1751253945006,
      "end": 1751253945150,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "C:/Users/.Freelancer/ONLINE/src/pages/CartPage/CartPage.jsx"
        ],
        "sourcesContent": [
          "import React, { useEffect, useState } from \"react\";\nimport { FaChevronDown, FaChevronUp, FaTimes } from \"react-icons/fa\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport LoadingSpinner from \"../../components/LoadingSpinner/LoadingSpinner\";\nimport Notification from \"../../components/Notification/Notification\";\nimport {\n  getAnPhamImageUrl,\n  getThoCamImageUrl,\n  getHoiThaoNgheThuatImageUrl,\n  getInTheoYeuCauImageUrl,\n  getKhuyenTaiImageUrl,\n  getThoiTrangImageUrl,\n  getSanPhamTuThongImageUrl,\n} from \"../../utils/cloudinary\";\nimport \"./CartPage.css\";\n\n// Helper function to get image URL based on category\nconst getImageUrl = (category, filename) => {\n  switch (category) {\n    case \"khuyentai\":\n      return getKhuyenTaiImageUrl(filename);\n    case \"anpham\":\n      return getAnPhamImageUrl(filename);\n    case \"in-theo-yeu-cau\":\n      return getInTheoYeuCauImageUrl(filename);\n    case \"hoi-thao-nghe-thuat\":\n      return getHoiThaoNgheThuatImageUrl(filename);\n    case \"thoi-trang-va-phu-kien\":\n      return getThoiTrangImageUrl(filename);\n    case \"thocam\":\n      return getThoCamImageUrl(filename);\n    case \"sanphamtuthong\":\n      return getSanPhamTuThongImageUrl(filename);\n    default:\n      return \"\";\n  }\n};\n\nconst CartPage = () => {\n  const navigate = useNavigate();\n  const [cartItems, setCartItems] = useState([]);\n  const [savedItems, setSavedItems] = useState([]);\n  const [promoCode, setPromoCode] = useState(\"\");\n  const [discountApplied, setDiscountApplied] = useState(false);\n  const [discountRate, setDiscountRate] = useState(0);\n  const [quantities, setQuantities] = useState({});\n  const [showQuantityDropdown, setShowQuantityDropdown] = useState(null);\n  const [showNotification, setShowNotification] = useState(false);\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\n  const [notificationType, setNotificationType] = useState(\"success\");\n  const [orders, setOrders] = useState([]);\n  const [isLoadingConfirm, setIsLoadingConfirm] = useState(false);\n  const [isLoadingDelete, setIsLoadingDelete] = useState(null);\n  const [isLoadingCheckout, setIsLoadingCheckout] = useState(false);\n\n  useEffect(() => {\n    loadCartItems();\n    loadOrders();\n  }, []);\n\n  const loadCartItems = () => {\n    const cart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n    const saved = JSON.parse(localStorage.getItem(\"savedItems\")) || [];\n    setCartItems(cart);\n    setSavedItems(saved);\n\n    // Initialize quantities state\n    const quantityState = {};\n    cart.forEach((item) => {\n      quantityState[item.id] = item.quantity;\n    });\n    setQuantities(quantityState);\n  };\n\n  const loadOrders = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) return;\n\n      const response = await fetch(\n        \"https://mussedupin.onrender.com/api/orders\",\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      const data = await response.json();\n      if (data.success) {\n        setOrders(data.orders);\n      }\n    } catch (error) {\n      console.error(\"Error loading orders:\", error);\n    }\n  };\n\n  const handleConfirmReceived = async (orderCode) => {\n    try {\n      setIsLoadingConfirm(true);\n      const response = await fetch(\n        `https://mussedupin.onrender.com/api/orders/${orderCode}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n          body: JSON.stringify({ status: \"Completed\" }),\n        }\n      );\n\n      const data = await response.json();\n      if (data.success) {\n        setNotificationMessage(\"Đã xác nhận nhận hàng thành công\");\n        setNotificationType(\"success\");\n        setShowNotification(true);\n        loadOrders();\n      }\n    } catch (error) {\n      console.error(\"Error confirming order:\", error);\n    } finally {\n      setIsLoadingConfirm(false);\n    }\n  };\n\n  const handleDeleteOrder = async (orderCode) => {\n    try {\n      setIsLoadingDelete(orderCode);\n      const response = await fetch(\n        `https://mussedupin.onrender.com/api/orders/${orderCode}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      );\n\n      const data = await response.json();\n      if (data.success) {\n        setNotificationMessage(\"Đã xóa đơn hàng khỏi lịch sử\");\n        setNotificationType(\"success\");\n        setShowNotification(true);\n        setOrders(orders.filter((order) => order.orderCode !== orderCode));\n      }\n    } catch (error) {\n      console.error(\"Error deleting order:\", error);\n      setNotificationMessage(\"Không thể xóa đơn hàng\");\n      setNotificationType(\"error\");\n      setShowNotification(true);\n    } finally {\n      setIsLoadingDelete(null);\n    }\n  };\n\n  const updateQuantity = (itemId, newQuantity) => {\n    const updatedCart = cartItems.map((item) => {\n      if (item.id === itemId) {\n        return { ...item, quantity: newQuantity };\n      }\n      return item;\n    });\n\n    setCartItems(updatedCart);\n    setQuantities({ ...quantities, [itemId]: newQuantity });\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    window.dispatchEvent(new Event(\"cartUpdated\"));\n  };\n\n  const removeFromCart = (itemId) => {\n    const updatedCart = cartItems.filter((item) => item.id !== itemId);\n    setCartItems(updatedCart);\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    window.dispatchEvent(new Event(\"cartUpdated\"));\n  };\n\n  const saveForLater = (item) => {\n    // Remove from cart\n    removeFromCart(item.id);\n\n    // Add to saved items\n    const updatedSavedItems = [...savedItems, item];\n    setSavedItems(updatedSavedItems);\n    localStorage.setItem(\"savedItems\", JSON.stringify(updatedSavedItems));\n  };\n\n  const moveToCart = (item) => {\n    // Remove from saved items\n    const updatedSavedItems = savedItems.filter(\n      (savedItem) => savedItem.id !== item.id\n    );\n    setSavedItems(updatedSavedItems);\n    localStorage.setItem(\"savedItems\", JSON.stringify(updatedSavedItems));\n\n    // Add to cart\n    const updatedCart = [...cartItems, { ...item, quantity: 1 }];\n    setCartItems(updatedCart);\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    window.dispatchEvent(new Event(\"cartUpdated\"));\n  };\n\n  const removeSavedItem = (itemId) => {\n    const updatedSavedItems = savedItems.filter((item) => item.id !== itemId);\n    setSavedItems(updatedSavedItems);\n    localStorage.setItem(\"savedItems\", JSON.stringify(updatedSavedItems));\n  };\n\n  const PROMO_CODES = {\n    langnghethonghat: {\n      rate: 0.5,\n      message: \"Mã giảm giá 50% đã được áp dụng thành công\",\n    },\n    baotangthong: {\n      rate: 0.25,\n      message: \"Mã giảm giá 25% đã được áp dụng thành công\",\n    },\n  };\n\n  const applyPromoCode = () => {\n    const promoInfo = PROMO_CODES[promoCode.toLowerCase()];\n\n    if (promoInfo) {\n      setDiscountApplied(true);\n      setDiscountRate(promoInfo.rate);\n      setNotificationMessage(promoInfo.message);\n      setNotificationType(\"success\");\n      setShowNotification(true);\n\n      // Lưu thông tin giảm giá vào localStorage ngay khi áp dụng\n      const discountData = {\n        applied: true,\n        rate: promoInfo.rate,\n        total: calculateTotal() * (1 - promoInfo.rate),\n        code: promoCode,\n      };\n      localStorage.setItem(\"cartDiscount\", JSON.stringify(discountData));\n    } else {\n      setDiscountApplied(false);\n      setDiscountRate(0);\n      setNotificationMessage(\"Mã giảm giá không hợp lệ\");\n      setNotificationType(\"error\");\n      setShowNotification(true);\n      localStorage.removeItem(\"cartDiscount\"); // Xóa thông tin giảm giá nếu mã không hợp lệ\n    }\n  };\n\n  const calculateTotal = () => {\n    const subtotal = cartItems.reduce((total, item) => {\n      return total + item.price * item.quantity;\n    }, 0);\n\n    return discountApplied ? subtotal * (1 - discountRate) : subtotal;\n  };\n\n  const handleCheckout = () => {\n    if (cartItems.length === 0) {\n      setNotificationMessage(\"Giỏ hàng của bạn đang trống\");\n      setNotificationType(\"error\");\n      setShowNotification(true);\n      return;\n    }\n    setIsLoadingCheckout(true);\n\n    // Lưu thông tin giảm giá vào localStorage\n    const discountData = {\n      applied: discountApplied,\n      rate: discountRate,\n      total: calculateTotal(),\n      code: promoCode, // Thêm mã giảm giá đã sử dụng\n    };\n\n    localStorage.setItem(\"cartDiscount\", JSON.stringify(discountData));\n    setTimeout(() => {\n      navigate(\"/checkout\");\n      setIsLoadingCheckout(false);\n    }, 500);\n  };\n\n  return (\n    <div className=\"cart-page\">\n      <Notification\n        message={notificationMessage}\n        isVisible={showNotification}\n        onClose={() => setShowNotification(false)}\n        type={notificationType}\n      />\n\n      <h1 className=\"cart-title\">Giỏ hàng của tôi</h1>\n\n      <div className=\"cart-actions-top\">\n        <button\n          className=\"checkout-button\"\n          onClick={handleCheckout}\n          disabled={isLoadingCheckout}\n        >\n          {isLoadingCheckout ? <LoadingSpinner /> : \"Đi đến thanh toán\"}\n        </button>\n        <Link to=\"/\" className=\"continue-shopping\">\n          Tiếp tục mua sắm\n        </Link>\n      </div>\n\n      <div className=\"cart-content\">\n        {cartItems.map((item) => (\n          <div key={item.id} className=\"cart-item\">\n            <div className=\"item-image\">\n              <img\n                src={getImageUrl(item.category, item.image)}\n                alt={item.name}\n              />\n            </div>\n\n            <div className=\"item-details\">\n              <h3>{item.name}</h3>\n\n              <div className=\"quantity-selector\">\n                <div\n                  className=\"quantity-display\"\n                  onClick={() =>\n                    setShowQuantityDropdown(\n                      item.id === showQuantityDropdown ? null : item.id\n                    )\n                  }\n                >\n                  <span>{quantities[item.id]}</span>\n                  {showQuantityDropdown === item.id ? (\n                    <FaChevronUp />\n                  ) : (\n                    <FaChevronDown />\n                  )}\n                </div>\n\n                {showQuantityDropdown === item.id && (\n                  <div className=\"quantity-dropdown\">\n                    {[...Array(20)].map((_, i) => (\n                      <div\n                        key={i + 1}\n                        className=\"quantity-option\"\n                        onClick={() => {\n                          updateQuantity(item.id, i + 1);\n                          setShowQuantityDropdown(null);\n                        }}\n                      >\n                        {i + 1}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              <p className=\"item-price\">\n                {(item.price * quantities[item.id]).toLocaleString()}đ\n              </p>\n\n              <div className=\"item-actions\">\n                <button\n                  className=\"remove-item\"\n                  onClick={() => removeFromCart(item.id)}\n                >\n                  Xóa khỏi giỏ hàng\n                </button>\n                <button\n                  className=\"save-for-later\"\n                  onClick={() => saveForLater(item)}\n                >\n                  Lưu để xem sau\n                </button>\n              </div>\n\n              <div className=\"promo-code\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Nhập mã giảm giá\"\n                  value={promoCode}\n                  className=\"promo-code-input\"\n                  onChange={(e) => setPromoCode(e.target.value)}\n                />\n                <button className=\"apply-promo\" onClick={applyPromoCode}>\n                  Áp dụng\n                </button>\n              </div>\n            </div>\n          </div>\n        ))}\n\n        <div className=\"cart-total-product\">\n          <div className=\"total-amount-product\">\n            Tổng cộng: {calculateTotal().toLocaleString()}đ\n          </div>\n          <p className=\"shipping-note-product\">\n            Không bao gồm chi phí vận chuyển, hãy chọn tùy chọn vận chuyển\n            trước.\n          </p>\n        </div>\n\n        <div className=\"cart-actions-bottom\">\n          <button\n            className=\"checkout-button\"\n            onClick={handleCheckout}\n            disabled={isLoadingCheckout}\n          >\n            {isLoadingCheckout ? <LoadingSpinner /> : \"Đi đến thanh toán\"}\n          </button>\n          <Link to=\"/\" className=\"continue-shopping\">\n            Tiếp tục mua sắm\n          </Link>\n        </div>\n\n        {orders.length > 0 && (\n          <section className=\"orders-section\">\n            <h2>Đơn hàng của tôi</h2>\n            {orders.map((order) => (\n              <div key={order.orderCode} className=\"order-item\">\n                <div className=\"order-header\">\n                  <div className=\"order-header-left\">\n                    <h3>Mã đơn hàng: {order.orderCode}</h3>\n                    <span\n                      className={`order-status ${order.status.toLowerCase()}`}\n                    >\n                      {order.status}\n                    </span>\n                  </div>\n                  <button\n                    className=\"delete-order-btn\"\n                    onClick={() => handleDeleteOrder(order.orderCode)}\n                    disabled={isLoadingDelete === order.orderCode}\n                    title=\"Xóa khỏi lịch sử\"\n                  >\n                    {isLoadingDelete === order.orderCode ? (\n                      <LoadingSpinner size=\"small\" color=\"#dc3545\" />\n                    ) : (\n                      <FaTimes />\n                    )}\n                  </button>\n                </div>\n\n                <div className=\"order-products\">\n                  {order.items.map((item) => (\n                    <div key={item.id} className=\"order-product\">\n                      <img\n                        src={getImageUrl(item.category, item.image)}\n                        alt={item.name}\n                      />\n                      <div className=\"product-details\">\n                        <h4>{item.name}</h4>\n                        <p>Số lượng: {item.quantity}</p>\n                        <p className=\"price\">\n                          {(item.price * item.quantity).toLocaleString()}đ\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"order-footer\">\n                  <div className=\"order-info\">\n                    <p className=\"total-amount\">\n                      Tổng tiền: {order.totalAmount.toLocaleString()}đ\n                    </p>\n                    <p className=\"order-date\">\n                      Ngày đặt:{\" \"}\n                      {new Date(order.createdAt).toLocaleDateString(\"vi-VN\")}\n                    </p>\n                  </div>\n                  {order.status === \"Pending\" && (\n                    <button\n                      className=\"confirm-received-btn\"\n                      onClick={() => handleConfirmReceived(order.orderCode)}\n                      disabled={isLoadingConfirm}\n                    >\n                      {isLoadingConfirm ? (\n                        <LoadingSpinner />\n                      ) : (\n                        \"Xác nhận đã nhận hàng\"\n                      )}\n                    </button>\n                  )}\n                </div>\n              </div>\n            ))}\n          </section>\n        )}\n\n        {savedItems.length > 0 && (\n          <section className=\"related-products-payment\">\n            <h2>Các mục được lưu lại để xem sau</h2>\n            <p className=\"subtitle\">\n              Các mặt hàng này chỉ được lưu trữ trong giỏ hàng của bạn để sử\n              dụng sau.\n            </p>\n\n            <div className=\"saved-items\">\n              {savedItems.map((item) => (\n                <div key={item.id} className=\"saved-item\">\n                  <img\n                    src={getImageUrl(item.category, item.image)}\n                    alt={item.name}\n                  />\n                  <h3>{item.name}</h3>\n                  <p className=\"price\">{item.price.toLocaleString()}đ</p>\n                  <div className=\"saved-item-actions\">\n                    <button onClick={() => removeSavedItem(item.id)}>\n                      Xóa khỏi giỏ hàng\n                    </button>\n                    <button onClick={() => moveToCart(item)}>\n                      Thêm vào giỏ hàng\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </section>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CartPage;\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1751253945150,
      "end": 1751253945150,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1751253945150,
      "end": 1751253945150,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1751253945150,
      "end": 1751253945150,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1751253945150,
      "end": 1751253945150,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1751253945150,
      "end": 1751253945150,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1751253945150,
      "end": 1751253945150,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1751253945150,
      "end": 1751253945150,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1751253945150,
      "end": 1751253945151,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1751253945151,
      "end": 1751253945151,
      "order": "normal"
    }
  ]
}
