{
  "resolvedId": "C:/Users/.Freelancer/MUSSEEDUPIN/src/contexts/TranslationContext.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React, { createContext, useContext, useEffect, useState } from \"react\";\n\nconst TranslationContext = createContext();\n\nexport const TranslationProvider = ({ children }) => {\n  const [currentLang, setCurrentLang] = useState(\"vi\");\n  const [customTranslations, setCustomTranslations] = useState({});\n\n  // Listen for language changes from GTranslate\n  useEffect(() => {\n    const checkLanguage = () => {\n      const htmlLang = document.documentElement.lang;\n      setCurrentLang(htmlLang === \"en\" ? \"en\" : \"vi\");\n    };\n\n    // Initial check\n    checkLanguage();\n\n    // Create observer to watch for changes in html lang attribute\n    const observer = new MutationObserver(checkLanguage);\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n    });\n\n    return () => observer.disconnect();\n  }, []);\n\n  // Register custom translations\n  const registerTranslations = (key, translations) => {\n    setCustomTranslations((prev) => ({\n      ...prev,\n      [key]: translations,\n    }));\n  };\n\n  // Get translation\n  const getTranslation = (key, path) => {\n    if (customTranslations[key] && customTranslations[key][currentLang]) {\n      return customTranslations[key][currentLang][path] || \"\";\n    }\n    return \"\";\n  };\n\n  return (\n    <TranslationContext.Provider\n      value={{\n        currentLang,\n        registerTranslations,\n        getTranslation,\n      }}\n    >\n      {children}\n    </TranslationContext.Provider>\n  );\n};\n\nexport const useTranslation = () => {\n  const context = useContext(TranslationContext);\n  if (!context) {\n    throw new Error(\"useTranslation must be used within a TranslationProvider\");\n  }\n  return context;\n};\n",
      "start": 1751470574098,
      "end": 1751470574165,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1751470574165,
      "end": 1751470574165,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx } from \"react/jsx-runtime\";\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nconst TranslationContext = createContext();\nexport const TranslationProvider = ({ children }) => {\n  const [currentLang, setCurrentLang] = useState(\"vi\");\n  const [customTranslations, setCustomTranslations] = useState({});\n  useEffect(() => {\n    const checkLanguage = () => {\n      const htmlLang = document.documentElement.lang;\n      setCurrentLang(htmlLang === \"en\" ? \"en\" : \"vi\");\n    };\n    checkLanguage();\n    const observer = new MutationObserver(checkLanguage);\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"]\n    });\n    return () => observer.disconnect();\n  }, []);\n  const registerTranslations = (key, translations) => {\n    setCustomTranslations((prev) => ({\n      ...prev,\n      [key]: translations\n    }));\n  };\n  const getTranslation = (key, path) => {\n    if (customTranslations[key] && customTranslations[key][currentLang]) {\n      return customTranslations[key][currentLang][path] || \"\";\n    }\n    return \"\";\n  };\n  return /* @__PURE__ */ jsx(\n    TranslationContext.Provider,\n    {\n      value: {\n        currentLang,\n        registerTranslations,\n        getTranslation\n      },\n      children\n    }\n  );\n};\nexport const useTranslation = () => {\n  const context = useContext(TranslationContext);\n  if (!context) {\n    throw new Error(\"useTranslation must be used within a TranslationProvider\");\n  }\n  return context;\n};\n",
      "start": 1751470574165,
      "end": 1751470574239,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "C:/Users/.Freelancer/MUSSEEDUPIN/src/contexts/TranslationContext.jsx"
        ],
        "sourcesContent": [
          "import React, { createContext, useContext, useEffect, useState } from \"react\";\n\nconst TranslationContext = createContext();\n\nexport const TranslationProvider = ({ children }) => {\n  const [currentLang, setCurrentLang] = useState(\"vi\");\n  const [customTranslations, setCustomTranslations] = useState({});\n\n  // Listen for language changes from GTranslate\n  useEffect(() => {\n    const checkLanguage = () => {\n      const htmlLang = document.documentElement.lang;\n      setCurrentLang(htmlLang === \"en\" ? \"en\" : \"vi\");\n    };\n\n    // Initial check\n    checkLanguage();\n\n    // Create observer to watch for changes in html lang attribute\n    const observer = new MutationObserver(checkLanguage);\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n    });\n\n    return () => observer.disconnect();\n  }, []);\n\n  // Register custom translations\n  const registerTranslations = (key, translations) => {\n    setCustomTranslations((prev) => ({\n      ...prev,\n      [key]: translations,\n    }));\n  };\n\n  // Get translation\n  const getTranslation = (key, path) => {\n    if (customTranslations[key] && customTranslations[key][currentLang]) {\n      return customTranslations[key][currentLang][path] || \"\";\n    }\n    return \"\";\n  };\n\n  return (\n    <TranslationContext.Provider\n      value={{\n        currentLang,\n        registerTranslations,\n        getTranslation,\n      }}\n    >\n      {children}\n    </TranslationContext.Provider>\n  );\n};\n\nexport const useTranslation = () => {\n  const context = useContext(TranslationContext);\n  if (!context) {\n    throw new Error(\"useTranslation must be used within a TranslationProvider\");\n  }\n  return context;\n};\n"
        ],
        "mappings": "AA6CI;AA7CJ,OAAO,SAAS,eAAe,YAAY,WAAW,gBAAgB;AAEtE,MAAM,qBAAqB,cAAc;AAElC,aAAM,sBAAsB,CAAC,EAAE,SAAS,MAAM;AACnD,QAAM,CAAC,aAAa,cAAc,IAAI,SAAS,IAAI;AACnD,QAAM,CAAC,oBAAoB,qBAAqB,IAAI,SAAS,CAAC,CAAC;AAG/D,YAAU,MAAM;AACd,UAAM,gBAAgB,MAAM;AAC1B,YAAM,WAAW,SAAS,gBAAgB;AAC1C,qBAAe,aAAa,OAAO,OAAO,IAAI;AAAA,IAChD;AAGA,kBAAc;AAGd,UAAM,WAAW,IAAI,iBAAiB,aAAa;AACnD,aAAS,QAAQ,SAAS,iBAAiB;AAAA,MACzC,YAAY;AAAA,MACZ,iBAAiB,CAAC,MAAM;AAAA,IAC1B,CAAC;AAED,WAAO,MAAM,SAAS,WAAW;AAAA,EACnC,GAAG,CAAC,CAAC;AAGL,QAAM,uBAAuB,CAAC,KAAK,iBAAiB;AAClD,0BAAsB,CAAC,UAAU;AAAA,MAC/B,GAAG;AAAA,MACH,CAAC,GAAG,GAAG;AAAA,IACT,EAAE;AAAA,EACJ;AAGA,QAAM,iBAAiB,CAAC,KAAK,SAAS;AACpC,QAAI,mBAAmB,GAAG,KAAK,mBAAmB,GAAG,EAAE,WAAW,GAAG;AACnE,aAAO,mBAAmB,GAAG,EAAE,WAAW,EAAE,IAAI,KAAK;AAAA,IACvD;AACA,WAAO;AAAA,EACT;AAEA,SACE;AAAA,IAAC,mBAAmB;AAAA,IAAnB;AAAA,MACC,OAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MAEC;AAAA;AAAA,EACH;AAEJ;AAEO,aAAM,iBAAiB,MAAM;AAClC,QAAM,UAAU,WAAW,kBAAkB;AAC7C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,0DAA0D;AAAA,EAC5E;AACA,SAAO;AACT;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1751470574240,
      "end": 1751470574240,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1751470574240,
      "end": 1751470574240,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1751470574240,
      "end": 1751470574240,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1751470574240,
      "end": 1751470574240,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1751470574240,
      "end": 1751470574240,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1751470574240,
      "end": 1751470574240,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1751470574240,
      "end": 1751470574240,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1751470574240,
      "end": 1751470574241,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1751470574241,
      "end": 1751470574241,
      "order": "normal"
    }
  ]
}
