{
  "resolvedId": "C:/Users/.Freelancer/ONLINE/node_modules/enquire.js/src/QueryHandler.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * Delegate to handle a media query being matched and unmatched.\n *\n * @param {object} options\n * @param {function} options.match callback for when the media query is matched\n * @param {function} [options.unmatch] callback for when the media query is unmatched\n * @param {function} [options.setup] one-time callback triggered the first time a query is matched\n * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?\n * @constructor\n */\nfunction QueryHandler(options) {\n    this.options = options;\n    !options.deferSetup && this.setup();\n}\n\nQueryHandler.prototype = {\n\n    constructor : QueryHandler,\n\n    /**\n     * coordinates setup of the handler\n     *\n     * @function\n     */\n    setup : function() {\n        if(this.options.setup) {\n            this.options.setup();\n        }\n        this.initialised = true;\n    },\n\n    /**\n     * coordinates setup and triggering of the handler\n     *\n     * @function\n     */\n    on : function() {\n        !this.initialised && this.setup();\n        this.options.match && this.options.match();\n    },\n\n    /**\n     * coordinates the unmatch event for the handler\n     *\n     * @function\n     */\n    off : function() {\n        this.options.unmatch && this.options.unmatch();\n    },\n\n    /**\n     * called when a handler is to be destroyed.\n     * delegates to the destroy or unmatch callbacks, depending on availability.\n     *\n     * @function\n     */\n    destroy : function() {\n        this.options.destroy ? this.options.destroy() : this.off();\n    },\n\n    /**\n     * determines equality by reference.\n     * if object is supplied compare options, if function, compare match callback\n     *\n     * @function\n     * @param {object || function} [target] the target for comparison\n     */\n    equals : function(target) {\n        return this.options === target || this.options.match === target;\n    }\n\n};\n\nmodule.exports = QueryHandler;\n",
      "start": 1749894716736,
      "end": 1749894716820,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1749894716820,
      "end": 1749894716820,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1749894716820,
      "end": 1749894716820,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1749894716820,
      "end": 1749894716820,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1749894716820,
      "end": 1749894716820,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1749894716820,
      "end": 1749894716820,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1749894716820,
      "end": 1749894716820,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1749894716820,
      "end": 1749894716820,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1749894716826,
      "end": 1749894716826,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1749894716826,
      "end": 1749894716826,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1749894716826,
      "end": 1749894716826,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1749894716826,
      "end": 1749894716826,
      "order": "normal"
    }
  ]
}
