{
  "resolvedId": "C:/Users/.Freelancer/ONLINE/node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var isBrowser = true;\n\nfunction getRegisteredStyles(registered, registeredStyles, classNames) {\n  var rawClassName = '';\n  classNames.split(' ').forEach(function (className) {\n    if (registered[className] !== undefined) {\n      registeredStyles.push(registered[className] + \";\");\n    } else if (className) {\n      rawClassName += className + \" \";\n    }\n  });\n  return rawClassName;\n}\nvar registerStyles = function registerStyles(cache, serialized, isStringTag) {\n  var className = cache.key + \"-\" + serialized.name;\n\n  if ( // we only need to add the styles to the registered cache if the\n  // class name could be used further down\n  // the tree but if it's a string tag, we know it won't\n  // so we don't have to add it to registered cache.\n  // this improves memory usage since we can avoid storing the whole style string\n  (isStringTag === false || // we need to always store it if we're in compat mode and\n  // in node since emotion-server relies on whether a style is in\n  // the registered cache to know whether a style is global or not\n  // also, note that this check will be dead code eliminated in the browser\n  isBrowser === false ) && cache.registered[className] === undefined) {\n    cache.registered[className] = serialized.styles;\n  }\n};\nvar insertStyles = function insertStyles(cache, serialized, isStringTag) {\n  registerStyles(cache, serialized, isStringTag);\n  var className = cache.key + \"-\" + serialized.name;\n\n  if (cache.inserted[serialized.name] === undefined) {\n    var current = serialized;\n\n    do {\n      cache.insert(serialized === current ? \".\" + className : '', current, cache.sheet, true);\n\n      current = current.next;\n    } while (current !== undefined);\n  }\n};\n\nexport { getRegisteredStyles, insertStyles, registerStyles };\n",
      "start": 1750088805039,
      "end": 1750088805454,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1750088805454,
      "end": 1750088805454,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1750088805454,
      "end": 1750088805454,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1750088805454,
      "end": 1750088805454,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1750088805454,
      "end": 1750088805454,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750088805454,
      "end": 1750088805454,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1750088805454,
      "end": 1750088805454,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1750088805454,
      "end": 1750088805454,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750088805454,
      "end": 1750088805454,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750088805454,
      "end": 1750088805454,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750088805454,
      "end": 1750088805454,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750088805454,
      "end": 1750088805456,
      "order": "normal"
    }
  ]
}
