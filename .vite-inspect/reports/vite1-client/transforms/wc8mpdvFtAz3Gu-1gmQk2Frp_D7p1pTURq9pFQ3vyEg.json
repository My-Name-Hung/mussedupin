{
  "resolvedId": "C:/Users/.Freelancer/ONLINE/node_modules/framer-motion/dist/es/components/LazyMotion/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { useState, useRef, useEffect } from 'react';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { loadFeatures } from '../../motion/features/load-features.mjs';\n\n/**\n * Used in conjunction with the `m` component to reduce bundle size.\n *\n * `m` is a version of the `motion` component that only loads functionality\n * critical for the initial render.\n *\n * `LazyMotion` can then be used to either synchronously or asynchronously\n * load animation and gesture support.\n *\n * ```jsx\n * // Synchronous loading\n * import { LazyMotion, m, domAnimation } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={domAnimation}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n *\n * // Asynchronous loading\n * import { LazyMotion, m } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={() => import('./path/to/domAnimation')}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction LazyMotion({ children, features, strict = false }) {\n    const [, setIsLoaded] = useState(!isLazyBundle(features));\n    const loadedRenderer = useRef(undefined);\n    /**\n     * If this is a synchronous load, load features immediately\n     */\n    if (!isLazyBundle(features)) {\n        const { renderer, ...loadedFeatures } = features;\n        loadedRenderer.current = renderer;\n        loadFeatures(loadedFeatures);\n    }\n    useEffect(() => {\n        if (isLazyBundle(features)) {\n            features().then(({ renderer, ...loadedFeatures }) => {\n                loadFeatures(loadedFeatures);\n                loadedRenderer.current = renderer;\n                setIsLoaded(true);\n            });\n        }\n    }, []);\n    return (jsx(LazyContext.Provider, { value: { renderer: loadedRenderer.current, strict }, children: children }));\n}\nfunction isLazyBundle(features) {\n    return typeof features === \"function\";\n}\n\nexport { LazyMotion };\n",
      "start": 1751253956971,
      "end": 1751253957110,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1751253957110,
      "end": 1751253957110,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1751253957110,
      "end": 1751253957110,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1751253957110,
      "end": 1751253957110,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1751253957110,
      "end": 1751253957110,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1751253957110,
      "end": 1751253957110,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1751253957110,
      "end": 1751253957110,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1751253957110,
      "end": 1751253957110,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1751253957110,
      "end": 1751253957110,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1751253957110,
      "end": 1751253957110,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1751253957110,
      "end": 1751253957112,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1751253957112,
      "end": 1751253957112,
      "order": "normal"
    }
  ]
}
