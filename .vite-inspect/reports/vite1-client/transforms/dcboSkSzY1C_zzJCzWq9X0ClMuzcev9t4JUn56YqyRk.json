{
  "resolvedId": "C:/Users/.Freelancer/TICKET/src/components/Auth/LoginModal.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React, { useState } from \"react\";\nimport { FaEye, FaEyeSlash, FaTimes } from \"react-icons/fa\";\nimport ForgotPasswordModal from \"./ForgotPasswordModal\";\nimport \"./LoginModal.css\";\nimport RegisterModal from \"./RegisterModal\";\nimport SuccessModal from \"./SuccessModal\";\n\nconst LoginModal = ({ isOpen, onClose }) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [showRegister, setShowRegister] = useState(false);\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n\n  const showMessage = (message, isError = false) => {\n    if (isError) {\n      setError(message);\n      setSuccess(\"\");\n    } else {\n      setSuccess(message);\n      setError(\"\");\n    }\n\n    setTimeout(() => {\n      setError(\"\");\n      setSuccess(\"\");\n    }, 2500);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\n        \"https://mussedupin.onrender.com/api/auth/login\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ email, password }),\n        }\n      );\n\n      const data = await response.json();\n\n      if (data.success) {\n        showMessage(data.message);\n        // Store token and user data\n        localStorage.setItem(\"token\", data.token);\n        localStorage.setItem(\"user\", JSON.stringify(data.user));\n        if (rememberMe) {\n          localStorage.setItem(\"rememberMe\", \"true\");\n        }\n\n        // Show success modal\n        setShowSuccessModal(true);\n\n        // Close modal after 2.5s\n        setTimeout(() => {\n          onClose();\n          window.location.reload();\n        }, 2500);\n      } else {\n        showMessage(data.message, true);\n      }\n    } catch (err) {\n      showMessage(\"Đăng nhập thất bại. Vui lòng thử lại sau.\", true);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  if (showRegister) {\n    return (\n      <RegisterModal isOpen={true} onClose={() => setShowRegister(false)} />\n    );\n  }\n\n  if (showForgotPassword) {\n    return (\n      <ForgotPasswordModal\n        isOpen={true}\n        onClose={() => setShowForgotPassword(false)}\n      />\n    );\n  }\n\n  return (\n    <>\n      <div className=\"modal-overlay\">\n        <div className=\"login-modal-container\">\n          <button className=\"close-button-login\" onClick={onClose}>\n            <FaTimes />\n          </button>\n\n          <h2 className=\"login-modal-title\">Đăng nhập</h2>\n          <p className=\"login-modal-subtitle\">Bạn đã có tài khoản?</p>\n\n          {error && <div className=\"error-message\">{error}</div>}\n          {success && <div className=\"success-message\">{success}</div>}\n\n          <form onSubmit={handleSubmit} className=\"login-form\">\n            <div className=\"form-group\">\n              <label>* Email</label>\n              <input\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Nhập email\"\n                required\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Mật khẩu</label>\n              <div className=\"password-input\">\n                <input\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"Nhập mật khẩu\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  className=\"password-toggle\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? <FaEyeSlash /> : <FaEye />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"form-checkbox\">\n              <input\n                type=\"checkbox\"\n                id=\"remember-me\"\n                checked={rememberMe}\n                onChange={(e) => setRememberMe(e.target.checked)}\n              />\n              <label className=\"remember-me\" htmlFor=\"remember-me\">\n                Nhớ tôi nhé\n              </label>\n            </div>\n\n            <button type=\"submit\" className=\"login-button\">\n              Đăng nhập\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"forgot-password\"\n              onClick={() => setShowForgotPassword(true)}\n            >\n              Quên mật khẩu?\n            </button>\n          </form>\n\n          <div className=\"register-section\">\n            <h3>Bạn chưa có tài khoản?</h3>\n            <button\n              className=\"register-button\"\n              onClick={() => setShowRegister(true)}\n            >\n              Tạo một tài khoản\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <SuccessModal\n        isOpen={showSuccessModal}\n        message=\"Chào mừng bạn đã quay trở lại!\"\n        onClose={() => setShowSuccessModal(false)}\n        title=\"Đăng nhập thành công!\"\n      />\n    </>\n  );\n};\n\nexport default LoginModal;\n",
      "start": 1751093175640,
      "end": 1751093175859,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1751093175859,
      "end": 1751093175859,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport React, { useState } from \"react\";\nimport { FaEye, FaEyeSlash, FaTimes } from \"react-icons/fa\";\nimport ForgotPasswordModal from \"./ForgotPasswordModal\";\nimport \"./LoginModal.css\";\nimport RegisterModal from \"./RegisterModal\";\nimport SuccessModal from \"./SuccessModal\";\nconst LoginModal = ({ isOpen, onClose }) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [showRegister, setShowRegister] = useState(false);\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const showMessage = (message, isError = false) => {\n    if (isError) {\n      setError(message);\n      setSuccess(\"\");\n    } else {\n      setSuccess(message);\n      setError(\"\");\n    }\n    setTimeout(() => {\n      setError(\"\");\n      setSuccess(\"\");\n    }, 2500);\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\n        \"https://mussedupin.onrender.com/api/auth/login\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({ email, password })\n        }\n      );\n      const data = await response.json();\n      if (data.success) {\n        showMessage(data.message);\n        localStorage.setItem(\"token\", data.token);\n        localStorage.setItem(\"user\", JSON.stringify(data.user));\n        if (rememberMe) {\n          localStorage.setItem(\"rememberMe\", \"true\");\n        }\n        setShowSuccessModal(true);\n        setTimeout(() => {\n          onClose();\n          window.location.reload();\n        }, 2500);\n      } else {\n        showMessage(data.message, true);\n      }\n    } catch (err) {\n      showMessage(\"Đăng nhập thất bại. Vui lòng thử lại sau.\", true);\n    }\n  };\n  if (!isOpen) return null;\n  if (showRegister) {\n    return /* @__PURE__ */ jsx(RegisterModal, { isOpen: true, onClose: () => setShowRegister(false) });\n  }\n  if (showForgotPassword) {\n    return /* @__PURE__ */ jsx(\n      ForgotPasswordModal,\n      {\n        isOpen: true,\n        onClose: () => setShowForgotPassword(false)\n      }\n    );\n  }\n  return /* @__PURE__ */ jsxs(Fragment, { children: [\n    /* @__PURE__ */ jsx(\"div\", { className: \"modal-overlay\", children: /* @__PURE__ */ jsxs(\"div\", { className: \"login-modal-container\", children: [\n      /* @__PURE__ */ jsx(\"button\", { className: \"close-button-login\", onClick: onClose, children: /* @__PURE__ */ jsx(FaTimes, {}) }),\n      /* @__PURE__ */ jsx(\"h2\", { className: \"login-modal-title\", children: \"Đăng nhập\" }),\n      /* @__PURE__ */ jsx(\"p\", { className: \"login-modal-subtitle\", children: \"Bạn đã có tài khoản?\" }),\n      error && /* @__PURE__ */ jsx(\"div\", { className: \"error-message\", children: error }),\n      success && /* @__PURE__ */ jsx(\"div\", { className: \"success-message\", children: success }),\n      /* @__PURE__ */ jsxs(\"form\", { onSubmit: handleSubmit, className: \"login-form\", children: [\n        /* @__PURE__ */ jsxs(\"div\", { className: \"form-group\", children: [\n          /* @__PURE__ */ jsx(\"label\", { children: \"* Email\" }),\n          /* @__PURE__ */ jsx(\n            \"input\",\n            {\n              type: \"email\",\n              value: email,\n              onChange: (e) => setEmail(e.target.value),\n              placeholder: \"Nhập email\",\n              required: true\n            }\n          )\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"form-group\", children: [\n          /* @__PURE__ */ jsx(\"label\", { children: \"* Mật khẩu\" }),\n          /* @__PURE__ */ jsxs(\"div\", { className: \"password-input\", children: [\n            /* @__PURE__ */ jsx(\n              \"input\",\n              {\n                type: showPassword ? \"text\" : \"password\",\n                value: password,\n                onChange: (e) => setPassword(e.target.value),\n                placeholder: \"Nhập mật khẩu\",\n                required: true\n              }\n            ),\n            /* @__PURE__ */ jsx(\n              \"button\",\n              {\n                type: \"button\",\n                className: \"password-toggle\",\n                onClick: () => setShowPassword(!showPassword),\n                children: showPassword ? /* @__PURE__ */ jsx(FaEyeSlash, {}) : /* @__PURE__ */ jsx(FaEye, {})\n              }\n            )\n          ] })\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"form-checkbox\", children: [\n          /* @__PURE__ */ jsx(\n            \"input\",\n            {\n              type: \"checkbox\",\n              id: \"remember-me\",\n              checked: rememberMe,\n              onChange: (e) => setRememberMe(e.target.checked)\n            }\n          ),\n          /* @__PURE__ */ jsx(\"label\", { className: \"remember-me\", htmlFor: \"remember-me\", children: \"Nhớ tôi nhé\" })\n        ] }),\n        /* @__PURE__ */ jsx(\"button\", { type: \"submit\", className: \"login-button\", children: \"Đăng nhập\" }),\n        /* @__PURE__ */ jsx(\n          \"button\",\n          {\n            type: \"button\",\n            className: \"forgot-password\",\n            onClick: () => setShowForgotPassword(true),\n            children: \"Quên mật khẩu?\"\n          }\n        )\n      ] }),\n      /* @__PURE__ */ jsxs(\"div\", { className: \"register-section\", children: [\n        /* @__PURE__ */ jsx(\"h3\", { children: \"Bạn chưa có tài khoản?\" }),\n        /* @__PURE__ */ jsx(\n          \"button\",\n          {\n            className: \"register-button\",\n            onClick: () => setShowRegister(true),\n            children: \"Tạo một tài khoản\"\n          }\n        )\n      ] })\n    ] }) }),\n    /* @__PURE__ */ jsx(\n      SuccessModal,\n      {\n        isOpen: showSuccessModal,\n        message: \"Chào mừng bạn đã quay trở lại!\",\n        onClose: () => setShowSuccessModal(false),\n        title: \"Đăng nhập thành công!\"\n      }\n    )\n  ] });\n};\nexport default LoginModal;\n",
      "start": 1751093175859,
      "end": 1751093176183,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "C:/Users/.Freelancer/TICKET/src/components/Auth/LoginModal.jsx"
        ],
        "sourcesContent": [
          "import React, { useState } from \"react\";\nimport { FaEye, FaEyeSlash, FaTimes } from \"react-icons/fa\";\nimport ForgotPasswordModal from \"./ForgotPasswordModal\";\nimport \"./LoginModal.css\";\nimport RegisterModal from \"./RegisterModal\";\nimport SuccessModal from \"./SuccessModal\";\n\nconst LoginModal = ({ isOpen, onClose }) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [showRegister, setShowRegister] = useState(false);\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n\n  const showMessage = (message, isError = false) => {\n    if (isError) {\n      setError(message);\n      setSuccess(\"\");\n    } else {\n      setSuccess(message);\n      setError(\"\");\n    }\n\n    setTimeout(() => {\n      setError(\"\");\n      setSuccess(\"\");\n    }, 2500);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\n        \"https://mussedupin.onrender.com/api/auth/login\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ email, password }),\n        }\n      );\n\n      const data = await response.json();\n\n      if (data.success) {\n        showMessage(data.message);\n        // Store token and user data\n        localStorage.setItem(\"token\", data.token);\n        localStorage.setItem(\"user\", JSON.stringify(data.user));\n        if (rememberMe) {\n          localStorage.setItem(\"rememberMe\", \"true\");\n        }\n\n        // Show success modal\n        setShowSuccessModal(true);\n\n        // Close modal after 2.5s\n        setTimeout(() => {\n          onClose();\n          window.location.reload();\n        }, 2500);\n      } else {\n        showMessage(data.message, true);\n      }\n    } catch (err) {\n      showMessage(\"Đăng nhập thất bại. Vui lòng thử lại sau.\", true);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  if (showRegister) {\n    return (\n      <RegisterModal isOpen={true} onClose={() => setShowRegister(false)} />\n    );\n  }\n\n  if (showForgotPassword) {\n    return (\n      <ForgotPasswordModal\n        isOpen={true}\n        onClose={() => setShowForgotPassword(false)}\n      />\n    );\n  }\n\n  return (\n    <>\n      <div className=\"modal-overlay\">\n        <div className=\"login-modal-container\">\n          <button className=\"close-button-login\" onClick={onClose}>\n            <FaTimes />\n          </button>\n\n          <h2 className=\"login-modal-title\">Đăng nhập</h2>\n          <p className=\"login-modal-subtitle\">Bạn đã có tài khoản?</p>\n\n          {error && <div className=\"error-message\">{error}</div>}\n          {success && <div className=\"success-message\">{success}</div>}\n\n          <form onSubmit={handleSubmit} className=\"login-form\">\n            <div className=\"form-group\">\n              <label>* Email</label>\n              <input\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Nhập email\"\n                required\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Mật khẩu</label>\n              <div className=\"password-input\">\n                <input\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"Nhập mật khẩu\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  className=\"password-toggle\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? <FaEyeSlash /> : <FaEye />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"form-checkbox\">\n              <input\n                type=\"checkbox\"\n                id=\"remember-me\"\n                checked={rememberMe}\n                onChange={(e) => setRememberMe(e.target.checked)}\n              />\n              <label className=\"remember-me\" htmlFor=\"remember-me\">\n                Nhớ tôi nhé\n              </label>\n            </div>\n\n            <button type=\"submit\" className=\"login-button\">\n              Đăng nhập\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"forgot-password\"\n              onClick={() => setShowForgotPassword(true)}\n            >\n              Quên mật khẩu?\n            </button>\n          </form>\n\n          <div className=\"register-section\">\n            <h3>Bạn chưa có tài khoản?</h3>\n            <button\n              className=\"register-button\"\n              onClick={() => setShowRegister(true)}\n            >\n              Tạo một tài khoản\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <SuccessModal\n        isOpen={showSuccessModal}\n        message=\"Chào mừng bạn đã quay trở lại!\"\n        onClose={() => setShowSuccessModal(false)}\n        title=\"Đăng nhập thành công!\"\n      />\n    </>\n  );\n};\n\nexport default LoginModal;\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1751093176183,
      "end": 1751093176183,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1751093176183,
      "end": 1751093176184,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1751093176184,
      "end": 1751093176184,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1751093176184,
      "end": 1751093176184,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1751093176184,
      "end": 1751093176184,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1751093176184,
      "end": 1751093176184,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1751093176184,
      "end": 1751093176184,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1751093176184,
      "end": 1751093176184,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1751093176184,
      "end": 1751093176184,
      "order": "normal"
    }
  ]
}
