{
  "resolvedId": "C:/Users/.Freelancer/TICKET/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { transformPropOrder, getValueAsType, numberValueTypes } from 'motion-dom';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n",
      "start": 1751092522087,
      "end": 1751092523144,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1751092523144,
      "end": 1751092523144,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1751092523144,
      "end": 1751092523144,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1751092523144,
      "end": 1751092523144,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1751092523144,
      "end": 1751092523144,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1751092523144,
      "end": 1751092523144,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1751092523144,
      "end": 1751092523144,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1751092523144,
      "end": 1751092523144,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1751092523144,
      "end": 1751092523144,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1751092523145,
      "end": 1751092523145,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1751092523145,
      "end": 1751092523145,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1751092523145,
      "end": 1751092523195,
      "order": "normal"
    }
  ]
}
