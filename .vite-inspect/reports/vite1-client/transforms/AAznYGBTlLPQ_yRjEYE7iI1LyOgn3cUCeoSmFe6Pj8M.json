{
  "resolvedId": "C:/Users/.Freelancer/ONLINE/src/pages/Artists/ArtistDetail.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React, { useEffect, useMemo, useState } from \"react\";\nimport { IoIosArrowBack, IoMdClose } from \"react-icons/io\";\nimport {\n  MdKeyboardArrowRight,\n  MdKeyboardDoubleArrowRight,\n} from \"react-icons/md\";\nimport { RiArrowDropDownLine } from \"react-icons/ri\";\nimport { Link, useParams } from \"react-router-dom\";\nimport \"swiper/css\";\nimport \"swiper/css/navigation\";\nimport \"swiper/css/pagination\";\nimport { Navigation, Pagination } from \"swiper/modules\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport {\n  getAnPhamImageUrl,\n  getHoiThaoNgheThuatImageUrl,\n  getInTheoYeuCauImageUrl,\n  getKhuyenTaiImageUrl,\n  getSanPhamTuThongImageUrl,\n  getThoCamImageUrl,\n  getThoiTrangImageUrl,\n} from \"../../utils/cloudinary\";\nimport { sampleProducts } from \"../CategoryDetail/CategoryDetail\";\nimport \"./ArtistDetail.css\";\n\n// Artist details data\nconst artistsData = {\n  \"Musée Du Pin\": {\n    image:\n      \"https://res.cloudinary.com/dn0br7hj0/image/upload/v1748784840/logo/logo-icon.webp\",\n    bio: \"Nghệ thuật là sự tôn vinh thiên nhiên.\",\n    achievements:\n      \"Musée Du Pin – một dự án nghệ thuật độc lập và tiên phong – được kiến tạo để tôn vinh, gìn giữ và kể lại những giá trị nguyên bản của Đà Lạt\",\n    influence:\n      \"Musée Du Pin gìn giữ vẻ đẹp từ khí hậu, rừng Thông và cảnh quan đến kiến trúc, lịch sử và văn hóa dân tộc bản địa vùng cao nguyên.\",\n    stats: {\n      works: 374,\n      exhibitions: 89,\n      awards: 12,\n    },\n  },\n};\n\nconst ArtistDetail = () => {\n  const { artistName } = useParams();\n  const [artistProducts, setArtistProducts] = useState([]);\n  const [allArtistProducts, setAllArtistProducts] = useState([]);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [filteredCount, setFilteredCount] = useState(0);\n  const [showFilters, setShowFilters] = useState(false);\n  const [sortOrder, setSortOrder] = useState(\"default\");\n  const [showSortDropdown, setShowSortDropdown] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [previewCount, setPreviewCount] = useState(0);\n  const [displayedPages, setDisplayedPages] = useState([]);\n  const decodedArtistName = decodeURIComponent(artistName);\n  const artistInfo = artistsData[decodedArtistName];\n\n  // Get Cloudinary image URL based on category\n  const getImageUrl = (category, filename) => {\n    if (!filename) return \"\";\n\n    switch (category) {\n      case \"khuyentai\":\n        return getKhuyenTaiImageUrl(filename);\n      case \"anpham\":\n        return getAnPhamImageUrl(filename);\n      case \"in-theo-yeu-cau\":\n        return getInTheoYeuCauImageUrl(filename);\n      case \"hoi-thao-nghe-thuat\":\n        return getHoiThaoNgheThuatImageUrl(filename);\n      case \"thoi-trang\":\n        return getThoiTrangImageUrl(filename);\n      case \"thocam\":\n        return getThoCamImageUrl(filename);\n      case \"san-pham-tu-thong\":\n      case \"sanphamtuthong\":\n        return getSanPhamTuThongImageUrl(filename);\n      default:\n        return filename;\n    }\n  };\n\n  // Calculate min and max prices from products\n  const priceRange = useMemo(() => {\n    const prices = allArtistProducts.map((product) =>\n      parseInt(product.price.replace(/[^\\d]/g, \"\"))\n    );\n    return {\n      min: 0,\n      max: Math.max(...prices, 0),\n    };\n  }, [allArtistProducts]);\n\n  const [selectedFilters, setSelectedFilters] = useState({\n    types: [],\n    publishYears: [],\n    priceRange: [priceRange.min, priceRange.max],\n  });\n\n  const [openSections, setOpenSections] = useState({\n    types: false,\n    publishYears: false,\n    priceRange: false,\n  });\n\n  useEffect(() => {\n    // Get all products from all categories and filter for this artist\n    const allProducts = [];\n    Object.entries(sampleProducts).forEach(([category, products]) => {\n      products.forEach((product) => {\n        if (product.artist === decodedArtistName) {\n          // Add category to each product if not exists\n          allProducts.push({\n            ...product,\n            category: product.category || category,\n            images: product.images || [product.image],\n          });\n        }\n      });\n    });\n\n    // Get 5 random products for featured section\n    const shuffled = [...allProducts].sort(() => 0.5 - Math.random());\n    const featuredProducts = shuffled.slice(0, 5);\n\n    setArtistProducts(featuredProducts);\n    setAllArtistProducts(allProducts);\n    setFilteredProducts(allProducts);\n    setFilteredCount(allProducts.length);\n    setPreviewCount(allProducts.length);\n  }, [decodedArtistName]);\n\n  // Format price for display\n  const formatPrice = (price) => {\n    return new Intl.NumberFormat(\"vi-VN\", {\n      style: \"currency\",\n      currency: \"VND\",\n    }).format(price);\n  };\n\n  // Filter products based on current filters\n  const filterProducts = (products, filters) => {\n    return products.filter((product) => {\n      const typeMatch =\n        filters.types.length === 0 || filters.types.includes(product.type);\n      const yearMatch =\n        filters.publishYears.length === 0 ||\n        filters.publishYears.includes(product.publishYear);\n      const price = parseInt(product.price.replace(/[^\\d]/g, \"\"));\n      const priceMatch =\n        price >= filters.priceRange[0] && price <= filters.priceRange[1];\n\n      return typeMatch && yearMatch && priceMatch;\n    });\n  };\n\n  // Update preview count whenever filters change\n  useEffect(() => {\n    const filtered = filterProducts(allArtistProducts, selectedFilters);\n    setPreviewCount(filtered.length);\n  }, [selectedFilters, allArtistProducts]);\n\n  // Apply filters\n  const applyFilters = () => {\n    const filtered = filterProducts(allArtistProducts, selectedFilters);\n    setFilteredProducts(filtered);\n    setFilteredCount(filtered.length);\n    setShowFilters(false);\n    setCurrentPage(1);\n  };\n\n  // Reset filters\n  const resetFilters = () => {\n    const initialFilters = {\n      types: [],\n      publishYears: [],\n      priceRange: [priceRange.min, priceRange.max],\n    };\n    setSelectedFilters(initialFilters);\n    setFilteredProducts(allArtistProducts);\n    setFilteredCount(allArtistProducts.length);\n    setPreviewCount(allArtistProducts.length);\n    setCurrentPage(1);\n  };\n\n  // Handle sort change\n  const handleSortChange = (order) => {\n    setSortOrder(order);\n    setShowSortDropdown(false);\n\n    const sorted = [...filteredProducts].sort((a, b) => {\n      if (order === \"default\") {\n        return a.id - b.id;\n      }\n      const priceA = parseInt(a.price.replace(/\\D/g, \"\"));\n      const priceB = parseInt(b.price.replace(/\\D/g, \"\"));\n      return order === \"asc\" ? priceA - priceB : priceB - priceA;\n    });\n    setFilteredProducts(sorted);\n  };\n\n  // Toggle section open/close\n  const toggleSection = (section) => {\n    setOpenSections((prev) => ({\n      ...prev,\n      [section]: !prev[section],\n    }));\n  };\n\n  // Pagination\n  const productsPerPage = 5;\n  const totalPages = Math.ceil(filteredProducts.length / productsPerPage);\n  const currentProducts = filteredProducts.slice(\n    (currentPage - 1) * productsPerPage,\n    currentPage * productsPerPage\n  );\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n    window.scrollTo(0, 0);\n  };\n\n  // Update pagination logic\n  useEffect(() => {\n    const totalPages = Math.ceil(filteredProducts.length / productsPerPage);\n    const currentSet = Math.floor((currentPage - 1) / 5);\n    const pages = [];\n\n    for (\n      let i = currentSet * 5 + 1;\n      i <= Math.min((currentSet + 1) * 5, totalPages);\n      i++\n    ) {\n      pages.push(i);\n    }\n\n    setDisplayedPages(pages);\n  }, [currentPage, filteredProducts.length]);\n\n  return (\n    <div className=\"artist-detail\">\n      <Link to=\"/contents/artists\" className=\"back-button-artists\">\n        <IoIosArrowBack />\n        <span>Quay lại</span>\n      </Link>\n\n      <div className=\"artists-detail-hero\">\n        <img\n          src={artistInfo.image}\n          alt={decodedArtistName}\n          className=\"hero-image\"\n        />\n        <h1 className=\"hero-title notranslate\">{decodedArtistName}</h1>\n      </div>\n\n      <section className=\"artists-detail-product\">\n        <h2 className=\"section-title\">Sản phẩm nổi bật</h2>\n        <Swiper\n          modules={[Navigation, Pagination]}\n          spaceBetween={30}\n          slidesPerView={4}\n          navigation\n          pagination={{\n            clickable: true,\n            renderBullet: function (index, className) {\n              return '<span class=\"' + className + '\"></span>';\n            },\n          }}\n          autoplay={false}\n          breakpoints={{\n            320: {\n              slidesPerView: 1,\n              spaceBetween: 20,\n            },\n            480: {\n              slidesPerView: 2,\n              spaceBetween: 20,\n            },\n            768: {\n              slidesPerView: 3,\n              spaceBetween: 30,\n            },\n            1024: {\n              slidesPerView: 4,\n              spaceBetween: 30,\n            },\n          }}\n        >\n          {artistProducts.map((product) => (\n            <SwiperSlide key={product.id}>\n              <Link\n                to={`/product/${product.id}`}\n                className=\"artists-detail-item\"\n              >\n                <div className=\"product-image\">\n                  <img\n                    src={getImageUrl(\n                      product.category,\n                      product.images?.[0] || product.image\n                    )}\n                    alt={product.title}\n                  />\n                </div>\n                <h3 className=\"product-title\">{product.title}</h3>\n                <p className=\"product-price\">{product.price}</p>\n              </Link>\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </section>\n\n      {artistInfo && (\n        <section className=\"artists-detail-info\">\n          <div className=\"artists-detail-info-container\">\n            <div className=\"artist-image\">\n              <img src={artistInfo.image} alt={decodedArtistName} />\n            </div>\n            <div className=\"artist-info\">\n              <h2 className=\"notranslate\">{decodedArtistName}</h2>\n              <p>{artistInfo.bio}</p>\n              <p>\n                <strong>Thành tựu:</strong> {artistInfo.achievements}\n              </p>\n              <p>\n                <strong>Ảnh hưởng:</strong> {artistInfo.influence}\n              </p>\n              <div className=\"artist-stats\">\n                <div className=\"stat-item\">\n                  <h3>{artistInfo.stats.works}</h3>\n                  <p>Tác phẩm</p>\n                </div>\n                <div className=\"stat-item\">\n                  <h3>{artistInfo.stats.exhibitions}</h3>\n                  <p>Triển lãm</p>\n                </div>\n                <div className=\"stat-item\">\n                  <h3>{artistInfo.stats.awards}</h3>\n                  <p>Giải thưởng</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n\n      <section className=\"artists-all-products\">\n        <h2 className=\"artists-all-products-title\">Tất cả sản phẩm</h2>\n\n        <div className=\"sort-product-artists\">\n          <div className=\"total-products-artists\">\n            <span className=\"total-count-artists\">{filteredCount}</span>\n            <span>sản phẩm</span>\n          </div>\n          <div className=\"sort-dropdown-container-artists\">\n            <div\n              className={`sort-dropdown-header-artists ${\n                showSortDropdown ? \"active\" : \"\"\n              }`}\n              onClick={() => setShowSortDropdown(!showSortDropdown)}\n            >\n              <span>\n                Sắp xếp theo:{\" \"}\n                {sortOrder === \"asc\"\n                  ? \"giá tăng dần\"\n                  : sortOrder === \"desc\"\n                  ? \"giá giảm dần\"\n                  : \"lựa chọn của chúng tôi\"}\n              </span>\n              <RiArrowDropDownLine\n                className={showSortDropdown ? \"rotated\" : \"\"}\n              />\n            </div>\n            {showSortDropdown && (\n              <div className=\"sort-dropdown-menu-artists\">\n                <div\n                  className={`sort-option-artists ${\n                    sortOrder === \"default\" ? \"active\" : \"\"\n                  }`}\n                  onClick={() => handleSortChange(\"default\")}\n                >\n                  <strong>lựa chọn của chúng tôi</strong>\n                </div>\n                <div\n                  className={`sort-option-artists ${\n                    sortOrder === \"asc\" ? \"active\" : \"\"\n                  }`}\n                  onClick={() => handleSortChange(\"asc\")}\n                >\n                  giá tăng dần\n                </div>\n                <div\n                  className={`sort-option-artists ${\n                    sortOrder === \"desc\" ? \"active\" : \"\"\n                  }`}\n                  onClick={() => handleSortChange(\"desc\")}\n                >\n                  giá giảm dần\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"artists-products-grid\">\n          {currentProducts.map((product) => (\n            <Link\n              to={`/product/${product.id}`}\n              className=\"artist-product-card\"\n              key={product.id}\n            >\n              <div className=\"artist-product-image\">\n                <img\n                  src={getImageUrl(\n                    product.category,\n                    product.images?.[0] || product.image\n                  )}\n                  alt={product.title}\n                />\n              </div>\n              <div className=\"artist-product-content\">\n                <h3 className=\"artist-product-title\">{product.title}</h3>\n                <p className=\"artist-product-price\">{product.price}</p>\n              </div>\n            </Link>\n          ))}\n        </div>\n\n        <div className=\"result-pager-artists\">\n          {displayedPages.map((page) => (\n            <button\n              key={page}\n              className={currentPage === page ? \"active\" : \"\"}\n              onClick={() => handlePageChange(page)}\n            >\n              {page}\n            </button>\n          ))}\n          {Math.ceil(filteredProducts.length / productsPerPage) >\n            displayedPages[displayedPages.length - 1] && (\n            <>\n              <button\n                onClick={() =>\n                  handlePageChange(Math.min(currentPage + 1, totalPages))\n                }\n                disabled={currentPage === totalPages}\n              >\n                <MdKeyboardArrowRight />\n              </button>\n              <button\n                onClick={() =>\n                  handlePageChange(\n                    Math.min(\n                      displayedPages[displayedPages.length - 1] + 1,\n                      totalPages\n                    )\n                  )\n                }\n                disabled={\n                  displayedPages[displayedPages.length - 1] >= totalPages\n                }\n              >\n                <MdKeyboardDoubleArrowRight />\n              </button>\n            </>\n          )}\n        </div>\n      </section>\n\n      <button\n        className=\"filter-button-artists\"\n        onClick={() => {\n          setShowFilters(true);\n          if (!showFilters) {\n            resetFilters();\n          }\n        }}\n      >\n        {showFilters ? `Kết quả (${previewCount})` : \"Bộ lọc\"}\n      </button>\n\n      {showFilters && (\n        <div className=\"search-filters-modal-artists\">\n          <div className=\"search-filters-content-artists\">\n            <div className=\"search-filters-header-artists\">\n              <h2 className=\"search-filters-title-artists\">Bộ lọc</h2>\n              <button\n                className=\"close-filters-button-artists\"\n                onClick={() => setShowFilters(false)}\n                aria-label=\"Đóng bộ lọc\"\n              >\n                <IoMdClose />\n              </button>\n            </div>\n\n            {/* Types Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"types\")}\n              >\n                <h3>Thể loại</h3>\n                <RiArrowDropDownLine\n                  className={openSections.types ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.types && (\n                <div className=\"filter-options\">\n                  {Array.from(\n                    new Set(allArtistProducts.map((p) => p.type))\n                  ).map((type) => (\n                    <label key={type} className=\"filter-option\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedFilters.types.includes(type)}\n                        onChange={(e) => {\n                          const newTypes = e.target.checked\n                            ? [...selectedFilters.types, type]\n                            : selectedFilters.types.filter((t) => t !== type);\n                          setSelectedFilters((prev) => ({\n                            ...prev,\n                            types: newTypes,\n                          }));\n                        }}\n                      />\n                      <span>{type}</span>\n                    </label>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Publish Years Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"publishYears\")}\n              >\n                <h3>Thời gian xuất bản</h3>\n                <RiArrowDropDownLine\n                  className={openSections.publishYears ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.publishYears && (\n                <div className=\"filter-options\">\n                  {Array.from(\n                    new Set(allArtistProducts.map((p) => p.publishYear))\n                  ).map((year) => (\n                    <label key={year} className=\"filter-option\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedFilters.publishYears.includes(year)}\n                        onChange={(e) => {\n                          const newYears = e.target.checked\n                            ? [...selectedFilters.publishYears, year]\n                            : selectedFilters.publishYears.filter(\n                                (y) => y !== year\n                              );\n                          setSelectedFilters((prev) => ({\n                            ...prev,\n                            publishYears: newYears,\n                          }));\n                        }}\n                      />\n                      <span>{year}</span>\n                    </label>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Price Range Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"priceRange\")}\n              >\n                <h3>Giá cả</h3>\n                <RiArrowDropDownLine\n                  className={openSections.priceRange ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.priceRange && (\n                <div className=\"price-range-slider\">\n                  <div className=\"price-range-inputs\">\n                    <input\n                      type=\"range\"\n                      min={priceRange.min}\n                      max={priceRange.max}\n                      value={selectedFilters.priceRange[0]}\n                      onChange={(e) => {\n                        const minValue = parseInt(e.target.value);\n                        setSelectedFilters((prev) => ({\n                          ...prev,\n                          priceRange: [\n                            Math.min(minValue, prev.priceRange[1]),\n                            prev.priceRange[1],\n                          ],\n                        }));\n                      }}\n                    />\n                    <input\n                      type=\"range\"\n                      min={priceRange.min}\n                      max={priceRange.max}\n                      value={selectedFilters.priceRange[1]}\n                      onChange={(e) => {\n                        const maxValue = parseInt(e.target.value);\n                        setSelectedFilters((prev) => ({\n                          ...prev,\n                          priceRange: [\n                            prev.priceRange[0],\n                            Math.max(maxValue, prev.priceRange[0]),\n                          ],\n                        }));\n                      }}\n                    />\n                  </div>\n                  <div className=\"price-range-values\">\n                    <span>{formatPrice(selectedFilters.priceRange[0])}</span>\n                    <span>{formatPrice(selectedFilters.priceRange[1])}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <button\n            className=\"apply-filters-button-artists\"\n            onClick={applyFilters}\n            disabled={previewCount === 0}\n          >\n            Kết quả ({previewCount})\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ArtistDetail;\n",
      "start": 1750746804410,
      "end": 1750746804444,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1750746804444,
      "end": 1750746804444,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { IoIosArrowBack, IoMdClose } from \"react-icons/io\";\nimport {\n  MdKeyboardArrowRight,\n  MdKeyboardDoubleArrowRight\n} from \"react-icons/md\";\nimport { RiArrowDropDownLine } from \"react-icons/ri\";\nimport { Link, useParams } from \"react-router-dom\";\nimport \"swiper/css\";\nimport \"swiper/css/navigation\";\nimport \"swiper/css/pagination\";\nimport { Navigation, Pagination } from \"swiper/modules\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport {\n  getAnPhamImageUrl,\n  getHoiThaoNgheThuatImageUrl,\n  getInTheoYeuCauImageUrl,\n  getKhuyenTaiImageUrl,\n  getSanPhamTuThongImageUrl,\n  getThoCamImageUrl,\n  getThoiTrangImageUrl\n} from \"../../utils/cloudinary\";\nimport { sampleProducts } from \"../CategoryDetail/CategoryDetail\";\nimport \"./ArtistDetail.css\";\nconst artistsData = {\n  \"Musée Du Pin\": {\n    image: \"https://res.cloudinary.com/dn0br7hj0/image/upload/v1748784840/logo/logo-icon.webp\",\n    bio: \"Nghệ thuật là sự tôn vinh thiên nhiên.\",\n    achievements: \"Musée Du Pin – một dự án nghệ thuật độc lập và tiên phong – được kiến tạo để tôn vinh, gìn giữ và kể lại những giá trị nguyên bản của Đà Lạt\",\n    influence: \"Musée Du Pin gìn giữ vẻ đẹp từ khí hậu, rừng Thông và cảnh quan đến kiến trúc, lịch sử và văn hóa dân tộc bản địa vùng cao nguyên.\",\n    stats: {\n      works: 374,\n      exhibitions: 89,\n      awards: 12\n    }\n  }\n};\nconst ArtistDetail = () => {\n  const { artistName } = useParams();\n  const [artistProducts, setArtistProducts] = useState([]);\n  const [allArtistProducts, setAllArtistProducts] = useState([]);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [filteredCount, setFilteredCount] = useState(0);\n  const [showFilters, setShowFilters] = useState(false);\n  const [sortOrder, setSortOrder] = useState(\"default\");\n  const [showSortDropdown, setShowSortDropdown] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [previewCount, setPreviewCount] = useState(0);\n  const [displayedPages, setDisplayedPages] = useState([]);\n  const decodedArtistName = decodeURIComponent(artistName);\n  const artistInfo = artistsData[decodedArtistName];\n  const getImageUrl = (category, filename) => {\n    if (!filename) return \"\";\n    switch (category) {\n      case \"khuyentai\":\n        return getKhuyenTaiImageUrl(filename);\n      case \"anpham\":\n        return getAnPhamImageUrl(filename);\n      case \"in-theo-yeu-cau\":\n        return getInTheoYeuCauImageUrl(filename);\n      case \"hoi-thao-nghe-thuat\":\n        return getHoiThaoNgheThuatImageUrl(filename);\n      case \"thoi-trang\":\n        return getThoiTrangImageUrl(filename);\n      case \"thocam\":\n        return getThoCamImageUrl(filename);\n      case \"san-pham-tu-thong\":\n      case \"sanphamtuthong\":\n        return getSanPhamTuThongImageUrl(filename);\n      default:\n        return filename;\n    }\n  };\n  const priceRange = useMemo(() => {\n    const prices = allArtistProducts.map(\n      (product) => parseInt(product.price.replace(/[^\\d]/g, \"\"))\n    );\n    return {\n      min: 0,\n      max: Math.max(...prices, 0)\n    };\n  }, [allArtistProducts]);\n  const [selectedFilters, setSelectedFilters] = useState({\n    types: [],\n    publishYears: [],\n    priceRange: [priceRange.min, priceRange.max]\n  });\n  const [openSections, setOpenSections] = useState({\n    types: false,\n    publishYears: false,\n    priceRange: false\n  });\n  useEffect(() => {\n    const allProducts = [];\n    Object.entries(sampleProducts).forEach(([category, products]) => {\n      products.forEach((product) => {\n        if (product.artist === decodedArtistName) {\n          allProducts.push({\n            ...product,\n            category: product.category || category,\n            images: product.images || [product.image]\n          });\n        }\n      });\n    });\n    const shuffled = [...allProducts].sort(() => 0.5 - Math.random());\n    const featuredProducts = shuffled.slice(0, 5);\n    setArtistProducts(featuredProducts);\n    setAllArtistProducts(allProducts);\n    setFilteredProducts(allProducts);\n    setFilteredCount(allProducts.length);\n    setPreviewCount(allProducts.length);\n  }, [decodedArtistName]);\n  const formatPrice = (price) => {\n    return new Intl.NumberFormat(\"vi-VN\", {\n      style: \"currency\",\n      currency: \"VND\"\n    }).format(price);\n  };\n  const filterProducts = (products, filters) => {\n    return products.filter((product) => {\n      const typeMatch = filters.types.length === 0 || filters.types.includes(product.type);\n      const yearMatch = filters.publishYears.length === 0 || filters.publishYears.includes(product.publishYear);\n      const price = parseInt(product.price.replace(/[^\\d]/g, \"\"));\n      const priceMatch = price >= filters.priceRange[0] && price <= filters.priceRange[1];\n      return typeMatch && yearMatch && priceMatch;\n    });\n  };\n  useEffect(() => {\n    const filtered = filterProducts(allArtistProducts, selectedFilters);\n    setPreviewCount(filtered.length);\n  }, [selectedFilters, allArtistProducts]);\n  const applyFilters = () => {\n    const filtered = filterProducts(allArtistProducts, selectedFilters);\n    setFilteredProducts(filtered);\n    setFilteredCount(filtered.length);\n    setShowFilters(false);\n    setCurrentPage(1);\n  };\n  const resetFilters = () => {\n    const initialFilters = {\n      types: [],\n      publishYears: [],\n      priceRange: [priceRange.min, priceRange.max]\n    };\n    setSelectedFilters(initialFilters);\n    setFilteredProducts(allArtistProducts);\n    setFilteredCount(allArtistProducts.length);\n    setPreviewCount(allArtistProducts.length);\n    setCurrentPage(1);\n  };\n  const handleSortChange = (order) => {\n    setSortOrder(order);\n    setShowSortDropdown(false);\n    const sorted = [...filteredProducts].sort((a, b) => {\n      if (order === \"default\") {\n        return a.id - b.id;\n      }\n      const priceA = parseInt(a.price.replace(/\\D/g, \"\"));\n      const priceB = parseInt(b.price.replace(/\\D/g, \"\"));\n      return order === \"asc\" ? priceA - priceB : priceB - priceA;\n    });\n    setFilteredProducts(sorted);\n  };\n  const toggleSection = (section) => {\n    setOpenSections((prev) => ({\n      ...prev,\n      [section]: !prev[section]\n    }));\n  };\n  const productsPerPage = 5;\n  const totalPages = Math.ceil(filteredProducts.length / productsPerPage);\n  const currentProducts = filteredProducts.slice(\n    (currentPage - 1) * productsPerPage,\n    currentPage * productsPerPage\n  );\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n    window.scrollTo(0, 0);\n  };\n  useEffect(() => {\n    const totalPages2 = Math.ceil(filteredProducts.length / productsPerPage);\n    const currentSet = Math.floor((currentPage - 1) / 5);\n    const pages = [];\n    for (let i = currentSet * 5 + 1; i <= Math.min((currentSet + 1) * 5, totalPages2); i++) {\n      pages.push(i);\n    }\n    setDisplayedPages(pages);\n  }, [currentPage, filteredProducts.length]);\n  return /* @__PURE__ */ jsxs(\"div\", { className: \"artist-detail\", children: [\n    /* @__PURE__ */ jsxs(Link, { to: \"/contents/artists\", className: \"back-button-artists\", children: [\n      /* @__PURE__ */ jsx(IoIosArrowBack, {}),\n      /* @__PURE__ */ jsx(\"span\", { children: \"Quay lại\" })\n    ] }),\n    /* @__PURE__ */ jsxs(\"div\", { className: \"artists-detail-hero\", children: [\n      /* @__PURE__ */ jsx(\n        \"img\",\n        {\n          src: artistInfo.image,\n          alt: decodedArtistName,\n          className: \"hero-image\"\n        }\n      ),\n      /* @__PURE__ */ jsx(\"h1\", { className: \"hero-title notranslate\", children: decodedArtistName })\n    ] }),\n    /* @__PURE__ */ jsxs(\"section\", { className: \"artists-detail-product\", children: [\n      /* @__PURE__ */ jsx(\"h2\", { className: \"section-title\", children: \"Sản phẩm nổi bật\" }),\n      /* @__PURE__ */ jsx(\n        Swiper,\n        {\n          modules: [Navigation, Pagination],\n          spaceBetween: 30,\n          slidesPerView: 4,\n          navigation: true,\n          pagination: {\n            clickable: true,\n            renderBullet: function(index, className) {\n              return '<span class=\"' + className + '\"></span>';\n            }\n          },\n          autoplay: false,\n          breakpoints: {\n            320: {\n              slidesPerView: 1,\n              spaceBetween: 20\n            },\n            480: {\n              slidesPerView: 2,\n              spaceBetween: 20\n            },\n            768: {\n              slidesPerView: 3,\n              spaceBetween: 30\n            },\n            1024: {\n              slidesPerView: 4,\n              spaceBetween: 30\n            }\n          },\n          children: artistProducts.map((product) => /* @__PURE__ */ jsx(SwiperSlide, { children: /* @__PURE__ */ jsxs(\n            Link,\n            {\n              to: `/product/${product.id}`,\n              className: \"artists-detail-item\",\n              children: [\n                /* @__PURE__ */ jsx(\"div\", { className: \"product-image\", children: /* @__PURE__ */ jsx(\n                  \"img\",\n                  {\n                    src: getImageUrl(\n                      product.category,\n                      product.images?.[0] || product.image\n                    ),\n                    alt: product.title\n                  }\n                ) }),\n                /* @__PURE__ */ jsx(\"h3\", { className: \"product-title\", children: product.title }),\n                /* @__PURE__ */ jsx(\"p\", { className: \"product-price\", children: product.price })\n              ]\n            }\n          ) }, product.id))\n        }\n      )\n    ] }),\n    artistInfo && /* @__PURE__ */ jsx(\"section\", { className: \"artists-detail-info\", children: /* @__PURE__ */ jsxs(\"div\", { className: \"artists-detail-info-container\", children: [\n      /* @__PURE__ */ jsx(\"div\", { className: \"artist-image\", children: /* @__PURE__ */ jsx(\"img\", { src: artistInfo.image, alt: decodedArtistName }) }),\n      /* @__PURE__ */ jsxs(\"div\", { className: \"artist-info\", children: [\n        /* @__PURE__ */ jsx(\"h2\", { className: \"notranslate\", children: decodedArtistName }),\n        /* @__PURE__ */ jsx(\"p\", { children: artistInfo.bio }),\n        /* @__PURE__ */ jsxs(\"p\", { children: [\n          /* @__PURE__ */ jsx(\"strong\", { children: \"Thành tựu:\" }),\n          \" \",\n          artistInfo.achievements\n        ] }),\n        /* @__PURE__ */ jsxs(\"p\", { children: [\n          /* @__PURE__ */ jsx(\"strong\", { children: \"Ảnh hưởng:\" }),\n          \" \",\n          artistInfo.influence\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"artist-stats\", children: [\n          /* @__PURE__ */ jsxs(\"div\", { className: \"stat-item\", children: [\n            /* @__PURE__ */ jsx(\"h3\", { children: artistInfo.stats.works }),\n            /* @__PURE__ */ jsx(\"p\", { children: \"Tác phẩm\" })\n          ] }),\n          /* @__PURE__ */ jsxs(\"div\", { className: \"stat-item\", children: [\n            /* @__PURE__ */ jsx(\"h3\", { children: artistInfo.stats.exhibitions }),\n            /* @__PURE__ */ jsx(\"p\", { children: \"Triển lãm\" })\n          ] }),\n          /* @__PURE__ */ jsxs(\"div\", { className: \"stat-item\", children: [\n            /* @__PURE__ */ jsx(\"h3\", { children: artistInfo.stats.awards }),\n            /* @__PURE__ */ jsx(\"p\", { children: \"Giải thưởng\" })\n          ] })\n        ] })\n      ] })\n    ] }) }),\n    /* @__PURE__ */ jsxs(\"section\", { className: \"artists-all-products\", children: [\n      /* @__PURE__ */ jsx(\"h2\", { className: \"artists-all-products-title\", children: \"Tất cả sản phẩm\" }),\n      /* @__PURE__ */ jsxs(\"div\", { className: \"sort-product-artists\", children: [\n        /* @__PURE__ */ jsxs(\"div\", { className: \"total-products-artists\", children: [\n          /* @__PURE__ */ jsx(\"span\", { className: \"total-count-artists\", children: filteredCount }),\n          /* @__PURE__ */ jsx(\"span\", { children: \"sản phẩm\" })\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"sort-dropdown-container-artists\", children: [\n          /* @__PURE__ */ jsxs(\n            \"div\",\n            {\n              className: `sort-dropdown-header-artists ${showSortDropdown ? \"active\" : \"\"}`,\n              onClick: () => setShowSortDropdown(!showSortDropdown),\n              children: [\n                /* @__PURE__ */ jsxs(\"span\", { children: [\n                  \"Sắp xếp theo:\",\n                  \" \",\n                  sortOrder === \"asc\" ? \"giá tăng dần\" : sortOrder === \"desc\" ? \"giá giảm dần\" : \"lựa chọn của chúng tôi\"\n                ] }),\n                /* @__PURE__ */ jsx(\n                  RiArrowDropDownLine,\n                  {\n                    className: showSortDropdown ? \"rotated\" : \"\"\n                  }\n                )\n              ]\n            }\n          ),\n          showSortDropdown && /* @__PURE__ */ jsxs(\"div\", { className: \"sort-dropdown-menu-artists\", children: [\n            /* @__PURE__ */ jsx(\n              \"div\",\n              {\n                className: `sort-option-artists ${sortOrder === \"default\" ? \"active\" : \"\"}`,\n                onClick: () => handleSortChange(\"default\"),\n                children: /* @__PURE__ */ jsx(\"strong\", { children: \"lựa chọn của chúng tôi\" })\n              }\n            ),\n            /* @__PURE__ */ jsx(\n              \"div\",\n              {\n                className: `sort-option-artists ${sortOrder === \"asc\" ? \"active\" : \"\"}`,\n                onClick: () => handleSortChange(\"asc\"),\n                children: \"giá tăng dần\"\n              }\n            ),\n            /* @__PURE__ */ jsx(\n              \"div\",\n              {\n                className: `sort-option-artists ${sortOrder === \"desc\" ? \"active\" : \"\"}`,\n                onClick: () => handleSortChange(\"desc\"),\n                children: \"giá giảm dần\"\n              }\n            )\n          ] })\n        ] })\n      ] }),\n      /* @__PURE__ */ jsx(\"div\", { className: \"artists-products-grid\", children: currentProducts.map((product) => /* @__PURE__ */ jsxs(\n        Link,\n        {\n          to: `/product/${product.id}`,\n          className: \"artist-product-card\",\n          children: [\n            /* @__PURE__ */ jsx(\"div\", { className: \"artist-product-image\", children: /* @__PURE__ */ jsx(\n              \"img\",\n              {\n                src: getImageUrl(\n                  product.category,\n                  product.images?.[0] || product.image\n                ),\n                alt: product.title\n              }\n            ) }),\n            /* @__PURE__ */ jsxs(\"div\", { className: \"artist-product-content\", children: [\n              /* @__PURE__ */ jsx(\"h3\", { className: \"artist-product-title\", children: product.title }),\n              /* @__PURE__ */ jsx(\"p\", { className: \"artist-product-price\", children: product.price })\n            ] })\n          ]\n        },\n        product.id\n      )) }),\n      /* @__PURE__ */ jsxs(\"div\", { className: \"result-pager-artists\", children: [\n        displayedPages.map((page) => /* @__PURE__ */ jsx(\n          \"button\",\n          {\n            className: currentPage === page ? \"active\" : \"\",\n            onClick: () => handlePageChange(page),\n            children: page\n          },\n          page\n        )),\n        Math.ceil(filteredProducts.length / productsPerPage) > displayedPages[displayedPages.length - 1] && /* @__PURE__ */ jsxs(Fragment, { children: [\n          /* @__PURE__ */ jsx(\n            \"button\",\n            {\n              onClick: () => handlePageChange(Math.min(currentPage + 1, totalPages)),\n              disabled: currentPage === totalPages,\n              children: /* @__PURE__ */ jsx(MdKeyboardArrowRight, {})\n            }\n          ),\n          /* @__PURE__ */ jsx(\n            \"button\",\n            {\n              onClick: () => handlePageChange(\n                Math.min(\n                  displayedPages[displayedPages.length - 1] + 1,\n                  totalPages\n                )\n              ),\n              disabled: displayedPages[displayedPages.length - 1] >= totalPages,\n              children: /* @__PURE__ */ jsx(MdKeyboardDoubleArrowRight, {})\n            }\n          )\n        ] })\n      ] })\n    ] }),\n    /* @__PURE__ */ jsx(\n      \"button\",\n      {\n        className: \"filter-button-artists\",\n        onClick: () => {\n          setShowFilters(true);\n          if (!showFilters) {\n            resetFilters();\n          }\n        },\n        children: showFilters ? `Kết quả (${previewCount})` : \"Bộ lọc\"\n      }\n    ),\n    showFilters && /* @__PURE__ */ jsxs(\"div\", { className: \"search-filters-modal-artists\", children: [\n      /* @__PURE__ */ jsxs(\"div\", { className: \"search-filters-content-artists\", children: [\n        /* @__PURE__ */ jsxs(\"div\", { className: \"search-filters-header-artists\", children: [\n          /* @__PURE__ */ jsx(\"h2\", { className: \"search-filters-title-artists\", children: \"Bộ lọc\" }),\n          /* @__PURE__ */ jsx(\n            \"button\",\n            {\n              className: \"close-filters-button-artists\",\n              onClick: () => setShowFilters(false),\n              \"aria-label\": \"Đóng bộ lọc\",\n              children: /* @__PURE__ */ jsx(IoMdClose, {})\n            }\n          )\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"filter-section\", children: [\n          /* @__PURE__ */ jsxs(\n            \"div\",\n            {\n              className: \"filter-header\",\n              onClick: () => toggleSection(\"types\"),\n              children: [\n                /* @__PURE__ */ jsx(\"h3\", { children: \"Thể loại\" }),\n                /* @__PURE__ */ jsx(\n                  RiArrowDropDownLine,\n                  {\n                    className: openSections.types ? \"rotated\" : \"\"\n                  }\n                )\n              ]\n            }\n          ),\n          openSections.types && /* @__PURE__ */ jsx(\"div\", { className: \"filter-options\", children: Array.from(\n            new Set(allArtistProducts.map((p) => p.type))\n          ).map((type) => /* @__PURE__ */ jsxs(\"label\", { className: \"filter-option\", children: [\n            /* @__PURE__ */ jsx(\n              \"input\",\n              {\n                type: \"checkbox\",\n                checked: selectedFilters.types.includes(type),\n                onChange: (e) => {\n                  const newTypes = e.target.checked ? [...selectedFilters.types, type] : selectedFilters.types.filter((t) => t !== type);\n                  setSelectedFilters((prev) => ({\n                    ...prev,\n                    types: newTypes\n                  }));\n                }\n              }\n            ),\n            /* @__PURE__ */ jsx(\"span\", { children: type })\n          ] }, type)) })\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"filter-section\", children: [\n          /* @__PURE__ */ jsxs(\n            \"div\",\n            {\n              className: \"filter-header\",\n              onClick: () => toggleSection(\"publishYears\"),\n              children: [\n                /* @__PURE__ */ jsx(\"h3\", { children: \"Thời gian xuất bản\" }),\n                /* @__PURE__ */ jsx(\n                  RiArrowDropDownLine,\n                  {\n                    className: openSections.publishYears ? \"rotated\" : \"\"\n                  }\n                )\n              ]\n            }\n          ),\n          openSections.publishYears && /* @__PURE__ */ jsx(\"div\", { className: \"filter-options\", children: Array.from(\n            new Set(allArtistProducts.map((p) => p.publishYear))\n          ).map((year) => /* @__PURE__ */ jsxs(\"label\", { className: \"filter-option\", children: [\n            /* @__PURE__ */ jsx(\n              \"input\",\n              {\n                type: \"checkbox\",\n                checked: selectedFilters.publishYears.includes(year),\n                onChange: (e) => {\n                  const newYears = e.target.checked ? [...selectedFilters.publishYears, year] : selectedFilters.publishYears.filter(\n                    (y) => y !== year\n                  );\n                  setSelectedFilters((prev) => ({\n                    ...prev,\n                    publishYears: newYears\n                  }));\n                }\n              }\n            ),\n            /* @__PURE__ */ jsx(\"span\", { children: year })\n          ] }, year)) })\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"filter-section\", children: [\n          /* @__PURE__ */ jsxs(\n            \"div\",\n            {\n              className: \"filter-header\",\n              onClick: () => toggleSection(\"priceRange\"),\n              children: [\n                /* @__PURE__ */ jsx(\"h3\", { children: \"Giá cả\" }),\n                /* @__PURE__ */ jsx(\n                  RiArrowDropDownLine,\n                  {\n                    className: openSections.priceRange ? \"rotated\" : \"\"\n                  }\n                )\n              ]\n            }\n          ),\n          openSections.priceRange && /* @__PURE__ */ jsxs(\"div\", { className: \"price-range-slider\", children: [\n            /* @__PURE__ */ jsxs(\"div\", { className: \"price-range-inputs\", children: [\n              /* @__PURE__ */ jsx(\n                \"input\",\n                {\n                  type: \"range\",\n                  min: priceRange.min,\n                  max: priceRange.max,\n                  value: selectedFilters.priceRange[0],\n                  onChange: (e) => {\n                    const minValue = parseInt(e.target.value);\n                    setSelectedFilters((prev) => ({\n                      ...prev,\n                      priceRange: [\n                        Math.min(minValue, prev.priceRange[1]),\n                        prev.priceRange[1]\n                      ]\n                    }));\n                  }\n                }\n              ),\n              /* @__PURE__ */ jsx(\n                \"input\",\n                {\n                  type: \"range\",\n                  min: priceRange.min,\n                  max: priceRange.max,\n                  value: selectedFilters.priceRange[1],\n                  onChange: (e) => {\n                    const maxValue = parseInt(e.target.value);\n                    setSelectedFilters((prev) => ({\n                      ...prev,\n                      priceRange: [\n                        prev.priceRange[0],\n                        Math.max(maxValue, prev.priceRange[0])\n                      ]\n                    }));\n                  }\n                }\n              )\n            ] }),\n            /* @__PURE__ */ jsxs(\"div\", { className: \"price-range-values\", children: [\n              /* @__PURE__ */ jsx(\"span\", { children: formatPrice(selectedFilters.priceRange[0]) }),\n              /* @__PURE__ */ jsx(\"span\", { children: formatPrice(selectedFilters.priceRange[1]) })\n            ] })\n          ] })\n        ] })\n      ] }),\n      /* @__PURE__ */ jsxs(\n        \"button\",\n        {\n          className: \"apply-filters-button-artists\",\n          onClick: applyFilters,\n          disabled: previewCount === 0,\n          children: [\n            \"Kết quả (\",\n            previewCount,\n            \")\"\n          ]\n        }\n      )\n    ] })\n  ] });\n};\nexport default ArtistDetail;\n",
      "start": 1750746804444,
      "end": 1750746804562,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "C:/Users/.Freelancer/ONLINE/src/pages/Artists/ArtistDetail.jsx"
        ],
        "sourcesContent": [
          "import React, { useEffect, useMemo, useState } from \"react\";\nimport { IoIosArrowBack, IoMdClose } from \"react-icons/io\";\nimport {\n  MdKeyboardArrowRight,\n  MdKeyboardDoubleArrowRight,\n} from \"react-icons/md\";\nimport { RiArrowDropDownLine } from \"react-icons/ri\";\nimport { Link, useParams } from \"react-router-dom\";\nimport \"swiper/css\";\nimport \"swiper/css/navigation\";\nimport \"swiper/css/pagination\";\nimport { Navigation, Pagination } from \"swiper/modules\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport {\n  getAnPhamImageUrl,\n  getHoiThaoNgheThuatImageUrl,\n  getInTheoYeuCauImageUrl,\n  getKhuyenTaiImageUrl,\n  getSanPhamTuThongImageUrl,\n  getThoCamImageUrl,\n  getThoiTrangImageUrl,\n} from \"../../utils/cloudinary\";\nimport { sampleProducts } from \"../CategoryDetail/CategoryDetail\";\nimport \"./ArtistDetail.css\";\n\n// Artist details data\nconst artistsData = {\n  \"Musée Du Pin\": {\n    image:\n      \"https://res.cloudinary.com/dn0br7hj0/image/upload/v1748784840/logo/logo-icon.webp\",\n    bio: \"Nghệ thuật là sự tôn vinh thiên nhiên.\",\n    achievements:\n      \"Musée Du Pin – một dự án nghệ thuật độc lập và tiên phong – được kiến tạo để tôn vinh, gìn giữ và kể lại những giá trị nguyên bản của Đà Lạt\",\n    influence:\n      \"Musée Du Pin gìn giữ vẻ đẹp từ khí hậu, rừng Thông và cảnh quan đến kiến trúc, lịch sử và văn hóa dân tộc bản địa vùng cao nguyên.\",\n    stats: {\n      works: 374,\n      exhibitions: 89,\n      awards: 12,\n    },\n  },\n};\n\nconst ArtistDetail = () => {\n  const { artistName } = useParams();\n  const [artistProducts, setArtistProducts] = useState([]);\n  const [allArtistProducts, setAllArtistProducts] = useState([]);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [filteredCount, setFilteredCount] = useState(0);\n  const [showFilters, setShowFilters] = useState(false);\n  const [sortOrder, setSortOrder] = useState(\"default\");\n  const [showSortDropdown, setShowSortDropdown] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [previewCount, setPreviewCount] = useState(0);\n  const [displayedPages, setDisplayedPages] = useState([]);\n  const decodedArtistName = decodeURIComponent(artistName);\n  const artistInfo = artistsData[decodedArtistName];\n\n  // Get Cloudinary image URL based on category\n  const getImageUrl = (category, filename) => {\n    if (!filename) return \"\";\n\n    switch (category) {\n      case \"khuyentai\":\n        return getKhuyenTaiImageUrl(filename);\n      case \"anpham\":\n        return getAnPhamImageUrl(filename);\n      case \"in-theo-yeu-cau\":\n        return getInTheoYeuCauImageUrl(filename);\n      case \"hoi-thao-nghe-thuat\":\n        return getHoiThaoNgheThuatImageUrl(filename);\n      case \"thoi-trang\":\n        return getThoiTrangImageUrl(filename);\n      case \"thocam\":\n        return getThoCamImageUrl(filename);\n      case \"san-pham-tu-thong\":\n      case \"sanphamtuthong\":\n        return getSanPhamTuThongImageUrl(filename);\n      default:\n        return filename;\n    }\n  };\n\n  // Calculate min and max prices from products\n  const priceRange = useMemo(() => {\n    const prices = allArtistProducts.map((product) =>\n      parseInt(product.price.replace(/[^\\d]/g, \"\"))\n    );\n    return {\n      min: 0,\n      max: Math.max(...prices, 0),\n    };\n  }, [allArtistProducts]);\n\n  const [selectedFilters, setSelectedFilters] = useState({\n    types: [],\n    publishYears: [],\n    priceRange: [priceRange.min, priceRange.max],\n  });\n\n  const [openSections, setOpenSections] = useState({\n    types: false,\n    publishYears: false,\n    priceRange: false,\n  });\n\n  useEffect(() => {\n    // Get all products from all categories and filter for this artist\n    const allProducts = [];\n    Object.entries(sampleProducts).forEach(([category, products]) => {\n      products.forEach((product) => {\n        if (product.artist === decodedArtistName) {\n          // Add category to each product if not exists\n          allProducts.push({\n            ...product,\n            category: product.category || category,\n            images: product.images || [product.image],\n          });\n        }\n      });\n    });\n\n    // Get 5 random products for featured section\n    const shuffled = [...allProducts].sort(() => 0.5 - Math.random());\n    const featuredProducts = shuffled.slice(0, 5);\n\n    setArtistProducts(featuredProducts);\n    setAllArtistProducts(allProducts);\n    setFilteredProducts(allProducts);\n    setFilteredCount(allProducts.length);\n    setPreviewCount(allProducts.length);\n  }, [decodedArtistName]);\n\n  // Format price for display\n  const formatPrice = (price) => {\n    return new Intl.NumberFormat(\"vi-VN\", {\n      style: \"currency\",\n      currency: \"VND\",\n    }).format(price);\n  };\n\n  // Filter products based on current filters\n  const filterProducts = (products, filters) => {\n    return products.filter((product) => {\n      const typeMatch =\n        filters.types.length === 0 || filters.types.includes(product.type);\n      const yearMatch =\n        filters.publishYears.length === 0 ||\n        filters.publishYears.includes(product.publishYear);\n      const price = parseInt(product.price.replace(/[^\\d]/g, \"\"));\n      const priceMatch =\n        price >= filters.priceRange[0] && price <= filters.priceRange[1];\n\n      return typeMatch && yearMatch && priceMatch;\n    });\n  };\n\n  // Update preview count whenever filters change\n  useEffect(() => {\n    const filtered = filterProducts(allArtistProducts, selectedFilters);\n    setPreviewCount(filtered.length);\n  }, [selectedFilters, allArtistProducts]);\n\n  // Apply filters\n  const applyFilters = () => {\n    const filtered = filterProducts(allArtistProducts, selectedFilters);\n    setFilteredProducts(filtered);\n    setFilteredCount(filtered.length);\n    setShowFilters(false);\n    setCurrentPage(1);\n  };\n\n  // Reset filters\n  const resetFilters = () => {\n    const initialFilters = {\n      types: [],\n      publishYears: [],\n      priceRange: [priceRange.min, priceRange.max],\n    };\n    setSelectedFilters(initialFilters);\n    setFilteredProducts(allArtistProducts);\n    setFilteredCount(allArtistProducts.length);\n    setPreviewCount(allArtistProducts.length);\n    setCurrentPage(1);\n  };\n\n  // Handle sort change\n  const handleSortChange = (order) => {\n    setSortOrder(order);\n    setShowSortDropdown(false);\n\n    const sorted = [...filteredProducts].sort((a, b) => {\n      if (order === \"default\") {\n        return a.id - b.id;\n      }\n      const priceA = parseInt(a.price.replace(/\\D/g, \"\"));\n      const priceB = parseInt(b.price.replace(/\\D/g, \"\"));\n      return order === \"asc\" ? priceA - priceB : priceB - priceA;\n    });\n    setFilteredProducts(sorted);\n  };\n\n  // Toggle section open/close\n  const toggleSection = (section) => {\n    setOpenSections((prev) => ({\n      ...prev,\n      [section]: !prev[section],\n    }));\n  };\n\n  // Pagination\n  const productsPerPage = 5;\n  const totalPages = Math.ceil(filteredProducts.length / productsPerPage);\n  const currentProducts = filteredProducts.slice(\n    (currentPage - 1) * productsPerPage,\n    currentPage * productsPerPage\n  );\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n    window.scrollTo(0, 0);\n  };\n\n  // Update pagination logic\n  useEffect(() => {\n    const totalPages = Math.ceil(filteredProducts.length / productsPerPage);\n    const currentSet = Math.floor((currentPage - 1) / 5);\n    const pages = [];\n\n    for (\n      let i = currentSet * 5 + 1;\n      i <= Math.min((currentSet + 1) * 5, totalPages);\n      i++\n    ) {\n      pages.push(i);\n    }\n\n    setDisplayedPages(pages);\n  }, [currentPage, filteredProducts.length]);\n\n  return (\n    <div className=\"artist-detail\">\n      <Link to=\"/contents/artists\" className=\"back-button-artists\">\n        <IoIosArrowBack />\n        <span>Quay lại</span>\n      </Link>\n\n      <div className=\"artists-detail-hero\">\n        <img\n          src={artistInfo.image}\n          alt={decodedArtistName}\n          className=\"hero-image\"\n        />\n        <h1 className=\"hero-title notranslate\">{decodedArtistName}</h1>\n      </div>\n\n      <section className=\"artists-detail-product\">\n        <h2 className=\"section-title\">Sản phẩm nổi bật</h2>\n        <Swiper\n          modules={[Navigation, Pagination]}\n          spaceBetween={30}\n          slidesPerView={4}\n          navigation\n          pagination={{\n            clickable: true,\n            renderBullet: function (index, className) {\n              return '<span class=\"' + className + '\"></span>';\n            },\n          }}\n          autoplay={false}\n          breakpoints={{\n            320: {\n              slidesPerView: 1,\n              spaceBetween: 20,\n            },\n            480: {\n              slidesPerView: 2,\n              spaceBetween: 20,\n            },\n            768: {\n              slidesPerView: 3,\n              spaceBetween: 30,\n            },\n            1024: {\n              slidesPerView: 4,\n              spaceBetween: 30,\n            },\n          }}\n        >\n          {artistProducts.map((product) => (\n            <SwiperSlide key={product.id}>\n              <Link\n                to={`/product/${product.id}`}\n                className=\"artists-detail-item\"\n              >\n                <div className=\"product-image\">\n                  <img\n                    src={getImageUrl(\n                      product.category,\n                      product.images?.[0] || product.image\n                    )}\n                    alt={product.title}\n                  />\n                </div>\n                <h3 className=\"product-title\">{product.title}</h3>\n                <p className=\"product-price\">{product.price}</p>\n              </Link>\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </section>\n\n      {artistInfo && (\n        <section className=\"artists-detail-info\">\n          <div className=\"artists-detail-info-container\">\n            <div className=\"artist-image\">\n              <img src={artistInfo.image} alt={decodedArtistName} />\n            </div>\n            <div className=\"artist-info\">\n              <h2 className=\"notranslate\">{decodedArtistName}</h2>\n              <p>{artistInfo.bio}</p>\n              <p>\n                <strong>Thành tựu:</strong> {artistInfo.achievements}\n              </p>\n              <p>\n                <strong>Ảnh hưởng:</strong> {artistInfo.influence}\n              </p>\n              <div className=\"artist-stats\">\n                <div className=\"stat-item\">\n                  <h3>{artistInfo.stats.works}</h3>\n                  <p>Tác phẩm</p>\n                </div>\n                <div className=\"stat-item\">\n                  <h3>{artistInfo.stats.exhibitions}</h3>\n                  <p>Triển lãm</p>\n                </div>\n                <div className=\"stat-item\">\n                  <h3>{artistInfo.stats.awards}</h3>\n                  <p>Giải thưởng</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n\n      <section className=\"artists-all-products\">\n        <h2 className=\"artists-all-products-title\">Tất cả sản phẩm</h2>\n\n        <div className=\"sort-product-artists\">\n          <div className=\"total-products-artists\">\n            <span className=\"total-count-artists\">{filteredCount}</span>\n            <span>sản phẩm</span>\n          </div>\n          <div className=\"sort-dropdown-container-artists\">\n            <div\n              className={`sort-dropdown-header-artists ${\n                showSortDropdown ? \"active\" : \"\"\n              }`}\n              onClick={() => setShowSortDropdown(!showSortDropdown)}\n            >\n              <span>\n                Sắp xếp theo:{\" \"}\n                {sortOrder === \"asc\"\n                  ? \"giá tăng dần\"\n                  : sortOrder === \"desc\"\n                  ? \"giá giảm dần\"\n                  : \"lựa chọn của chúng tôi\"}\n              </span>\n              <RiArrowDropDownLine\n                className={showSortDropdown ? \"rotated\" : \"\"}\n              />\n            </div>\n            {showSortDropdown && (\n              <div className=\"sort-dropdown-menu-artists\">\n                <div\n                  className={`sort-option-artists ${\n                    sortOrder === \"default\" ? \"active\" : \"\"\n                  }`}\n                  onClick={() => handleSortChange(\"default\")}\n                >\n                  <strong>lựa chọn của chúng tôi</strong>\n                </div>\n                <div\n                  className={`sort-option-artists ${\n                    sortOrder === \"asc\" ? \"active\" : \"\"\n                  }`}\n                  onClick={() => handleSortChange(\"asc\")}\n                >\n                  giá tăng dần\n                </div>\n                <div\n                  className={`sort-option-artists ${\n                    sortOrder === \"desc\" ? \"active\" : \"\"\n                  }`}\n                  onClick={() => handleSortChange(\"desc\")}\n                >\n                  giá giảm dần\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"artists-products-grid\">\n          {currentProducts.map((product) => (\n            <Link\n              to={`/product/${product.id}`}\n              className=\"artist-product-card\"\n              key={product.id}\n            >\n              <div className=\"artist-product-image\">\n                <img\n                  src={getImageUrl(\n                    product.category,\n                    product.images?.[0] || product.image\n                  )}\n                  alt={product.title}\n                />\n              </div>\n              <div className=\"artist-product-content\">\n                <h3 className=\"artist-product-title\">{product.title}</h3>\n                <p className=\"artist-product-price\">{product.price}</p>\n              </div>\n            </Link>\n          ))}\n        </div>\n\n        <div className=\"result-pager-artists\">\n          {displayedPages.map((page) => (\n            <button\n              key={page}\n              className={currentPage === page ? \"active\" : \"\"}\n              onClick={() => handlePageChange(page)}\n            >\n              {page}\n            </button>\n          ))}\n          {Math.ceil(filteredProducts.length / productsPerPage) >\n            displayedPages[displayedPages.length - 1] && (\n            <>\n              <button\n                onClick={() =>\n                  handlePageChange(Math.min(currentPage + 1, totalPages))\n                }\n                disabled={currentPage === totalPages}\n              >\n                <MdKeyboardArrowRight />\n              </button>\n              <button\n                onClick={() =>\n                  handlePageChange(\n                    Math.min(\n                      displayedPages[displayedPages.length - 1] + 1,\n                      totalPages\n                    )\n                  )\n                }\n                disabled={\n                  displayedPages[displayedPages.length - 1] >= totalPages\n                }\n              >\n                <MdKeyboardDoubleArrowRight />\n              </button>\n            </>\n          )}\n        </div>\n      </section>\n\n      <button\n        className=\"filter-button-artists\"\n        onClick={() => {\n          setShowFilters(true);\n          if (!showFilters) {\n            resetFilters();\n          }\n        }}\n      >\n        {showFilters ? `Kết quả (${previewCount})` : \"Bộ lọc\"}\n      </button>\n\n      {showFilters && (\n        <div className=\"search-filters-modal-artists\">\n          <div className=\"search-filters-content-artists\">\n            <div className=\"search-filters-header-artists\">\n              <h2 className=\"search-filters-title-artists\">Bộ lọc</h2>\n              <button\n                className=\"close-filters-button-artists\"\n                onClick={() => setShowFilters(false)}\n                aria-label=\"Đóng bộ lọc\"\n              >\n                <IoMdClose />\n              </button>\n            </div>\n\n            {/* Types Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"types\")}\n              >\n                <h3>Thể loại</h3>\n                <RiArrowDropDownLine\n                  className={openSections.types ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.types && (\n                <div className=\"filter-options\">\n                  {Array.from(\n                    new Set(allArtistProducts.map((p) => p.type))\n                  ).map((type) => (\n                    <label key={type} className=\"filter-option\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedFilters.types.includes(type)}\n                        onChange={(e) => {\n                          const newTypes = e.target.checked\n                            ? [...selectedFilters.types, type]\n                            : selectedFilters.types.filter((t) => t !== type);\n                          setSelectedFilters((prev) => ({\n                            ...prev,\n                            types: newTypes,\n                          }));\n                        }}\n                      />\n                      <span>{type}</span>\n                    </label>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Publish Years Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"publishYears\")}\n              >\n                <h3>Thời gian xuất bản</h3>\n                <RiArrowDropDownLine\n                  className={openSections.publishYears ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.publishYears && (\n                <div className=\"filter-options\">\n                  {Array.from(\n                    new Set(allArtistProducts.map((p) => p.publishYear))\n                  ).map((year) => (\n                    <label key={year} className=\"filter-option\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedFilters.publishYears.includes(year)}\n                        onChange={(e) => {\n                          const newYears = e.target.checked\n                            ? [...selectedFilters.publishYears, year]\n                            : selectedFilters.publishYears.filter(\n                                (y) => y !== year\n                              );\n                          setSelectedFilters((prev) => ({\n                            ...prev,\n                            publishYears: newYears,\n                          }));\n                        }}\n                      />\n                      <span>{year}</span>\n                    </label>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Price Range Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"priceRange\")}\n              >\n                <h3>Giá cả</h3>\n                <RiArrowDropDownLine\n                  className={openSections.priceRange ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.priceRange && (\n                <div className=\"price-range-slider\">\n                  <div className=\"price-range-inputs\">\n                    <input\n                      type=\"range\"\n                      min={priceRange.min}\n                      max={priceRange.max}\n                      value={selectedFilters.priceRange[0]}\n                      onChange={(e) => {\n                        const minValue = parseInt(e.target.value);\n                        setSelectedFilters((prev) => ({\n                          ...prev,\n                          priceRange: [\n                            Math.min(minValue, prev.priceRange[1]),\n                            prev.priceRange[1],\n                          ],\n                        }));\n                      }}\n                    />\n                    <input\n                      type=\"range\"\n                      min={priceRange.min}\n                      max={priceRange.max}\n                      value={selectedFilters.priceRange[1]}\n                      onChange={(e) => {\n                        const maxValue = parseInt(e.target.value);\n                        setSelectedFilters((prev) => ({\n                          ...prev,\n                          priceRange: [\n                            prev.priceRange[0],\n                            Math.max(maxValue, prev.priceRange[0]),\n                          ],\n                        }));\n                      }}\n                    />\n                  </div>\n                  <div className=\"price-range-values\">\n                    <span>{formatPrice(selectedFilters.priceRange[0])}</span>\n                    <span>{formatPrice(selectedFilters.priceRange[1])}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <button\n            className=\"apply-filters-button-artists\"\n            onClick={applyFilters}\n            disabled={previewCount === 0}\n          >\n            Kết quả ({previewCount})\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ArtistDetail;\n"
        ],
        "mappings": "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",
        "names": [
          "totalPages"
        ]
      }
    },
    {
      "name": "vite:worker",
      "start": 1750746804563,
      "end": 1750746804563,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1750746804563,
      "end": 1750746804563,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750746804563,
      "end": 1750746804563,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1750746804563,
      "end": 1750746804563,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1750746804563,
      "end": 1750746804563,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750746804563,
      "end": 1750746804563,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750746804563,
      "end": 1750746804563,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750746804563,
      "end": 1750746804564,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750746804564,
      "end": 1750746804564,
      "order": "normal"
    }
  ]
}
