{
  "resolvedId": "C:/Users/.Freelancer/baotangnghethuat/src/components/OptimizedImage/OptimizedImage.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React, { useEffect, useRef, useState } from \"react\";\n\nconst OptimizedImage = ({\n  src,\n  alt,\n  className = \"\",\n  width,\n  height,\n  priority = false,\n  sizes = \"100vw\",\n  loading = \"lazy\",\n  onLoad,\n  onError,\n  style = {},\n  ...props\n}) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isInView, setIsInView] = useState(priority);\n  const imgRef = useRef(null);\n  const placeholderRef = useRef(null);\n\n  // Generate responsive image URLs\n  const generateSrcSet = (imageSrc) => {\n    const baseName = imageSrc.replace(/\\.[^/.]+$/, \"\");\n    const extension = imageSrc.match(/\\.[^/.]+$/)?.[0] || \".webp\";\n\n    return [\n      `${baseName}_480w${extension} 480w`,\n      `${baseName}_768w${extension} 768w`,\n      `${baseName}_1024w${extension} 1024w`,\n      `${baseName}_1200w${extension} 1200w`,\n      `${imageSrc} 1920w`,\n    ].join(\", \");\n  };\n\n  // Intersection Observer for lazy loading\n  useEffect(() => {\n    if (priority || isInView) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n          setIsInView(true);\n          observer.disconnect();\n        }\n      },\n      {\n        threshold: 0.1,\n        rootMargin: \"50px 0px\",\n      }\n    );\n\n    if (placeholderRef.current) {\n      observer.observe(placeholderRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [priority, isInView]);\n\n  const handleLoad = () => {\n    setIsLoaded(true);\n    onLoad?.();\n  };\n\n  const handleError = () => {\n    setIsError(true);\n    onError?.();\n  };\n\n  // Generate low quality placeholder\n  const placeholderSrc = `${src.replace(/\\.[^/.]+$/, \"\")}_placeholder.webp`;\n\n  return (\n    <div\n      ref={placeholderRef}\n      className={`optimized-image-container ${className}`}\n      style={{\n        position: \"relative\",\n        overflow: \"hidden\",\n        backgroundColor: \"#f0f0f0\",\n        ...style,\n        ...(width && height && { aspectRatio: `${width} / ${height}` }),\n      }}\n      {...props}\n    >\n      {/* Low quality placeholder */}\n      {!priority && !isInView && (\n        <div\n          className=\"image-placeholder\"\n          style={{\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            width: \"100%\",\n            height: \"100%\",\n            backgroundImage: `url(${placeholderSrc})`,\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n            filter: \"blur(10px)\",\n            transform: \"scale(1.1)\",\n            transition: \"opacity 0.3s ease\",\n            opacity: isLoaded ? 0 : 1,\n          }}\n        />\n      )}\n\n      {/* Main image */}\n      {(priority || isInView) && (\n        <picture>\n          {/* WebP source */}\n          <source\n            srcSet={generateSrcSet(src.replace(/\\.[^/.]+$/, \".webp\"))}\n            sizes={sizes}\n            type=\"image/webp\"\n          />\n\n          {/* Fallback source */}\n          <source\n            srcSet={generateSrcSet(src)}\n            sizes={sizes}\n            type=\"image/jpeg\"\n          />\n\n          <img\n            ref={imgRef}\n            src={src}\n            alt={alt}\n            width={width}\n            height={height}\n            loading={priority ? \"eager\" : loading}\n            decoding=\"async\"\n            onLoad={handleLoad}\n            onError={handleError}\n            style={{\n              position: \"absolute\",\n              top: 0,\n              left: 0,\n              width: \"100%\",\n              height: \"100%\",\n              objectFit: \"cover\",\n              transition: \"opacity 0.3s ease\",\n              opacity: isLoaded ? 1 : 0,\n              transform: \"translateZ(0)\", // Force hardware acceleration\n            }}\n          />\n        </picture>\n      )}\n\n      {/* Loading indicator */}\n      {!isLoaded && !isError && (priority || isInView) && (\n        <div\n          className=\"image-loading\"\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            width: \"40px\",\n            height: \"40px\",\n            border: \"3px solid #f3f3f3\",\n            borderTop: \"3px solid #b38741\",\n            borderRadius: \"50%\",\n            animation: \"spin 1s linear infinite\",\n          }}\n        />\n      )}\n\n      {/* Error state */}\n      {isError && (\n        <div\n          className=\"image-error\"\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            textAlign: \"center\",\n            color: \"#666\",\n            fontSize: \"14px\",\n          }}\n        >\n          ⚠️ Failed to load image\n        </div>\n      )}\n\n      <style>{`\n        @keyframes spin {\n          0% {\n            transform: translate(-50%, -50%) rotate(0deg);\n          }\n          100% {\n            transform: translate(-50%, -50%) rotate(360deg);\n          }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default OptimizedImage;\n",
      "start": 1748859738424,
      "end": 1748859738760,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1748859738760,
      "end": 1748859738760,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport React, { useEffect, useRef, useState } from \"react\";\nconst OptimizedImage = ({\n  src,\n  alt,\n  className = \"\",\n  width,\n  height,\n  priority = false,\n  sizes = \"100vw\",\n  loading = \"lazy\",\n  onLoad,\n  onError,\n  style = {},\n  ...props\n}) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isInView, setIsInView] = useState(priority);\n  const imgRef = useRef(null);\n  const placeholderRef = useRef(null);\n  const generateSrcSet = (imageSrc) => {\n    const baseName = imageSrc.replace(/\\.[^/.]+$/, \"\");\n    const extension = imageSrc.match(/\\.[^/.]+$/)?.[0] || \".webp\";\n    return [\n      `${baseName}_480w${extension} 480w`,\n      `${baseName}_768w${extension} 768w`,\n      `${baseName}_1024w${extension} 1024w`,\n      `${baseName}_1200w${extension} 1200w`,\n      `${imageSrc} 1920w`\n    ].join(\", \");\n  };\n  useEffect(() => {\n    if (priority || isInView) return;\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n          setIsInView(true);\n          observer.disconnect();\n        }\n      },\n      {\n        threshold: 0.1,\n        rootMargin: \"50px 0px\"\n      }\n    );\n    if (placeholderRef.current) {\n      observer.observe(placeholderRef.current);\n    }\n    return () => observer.disconnect();\n  }, [priority, isInView]);\n  const handleLoad = () => {\n    setIsLoaded(true);\n    onLoad?.();\n  };\n  const handleError = () => {\n    setIsError(true);\n    onError?.();\n  };\n  const placeholderSrc = `${src.replace(/\\.[^/.]+$/, \"\")}_placeholder.webp`;\n  return /* @__PURE__ */ jsxs(\n    \"div\",\n    {\n      ref: placeholderRef,\n      className: `optimized-image-container ${className}`,\n      style: {\n        position: \"relative\",\n        overflow: \"hidden\",\n        backgroundColor: \"#f0f0f0\",\n        ...style,\n        ...width && height && { aspectRatio: `${width} / ${height}` }\n      },\n      ...props,\n      children: [\n        !priority && !isInView && /* @__PURE__ */ jsx(\n          \"div\",\n          {\n            className: \"image-placeholder\",\n            style: {\n              position: \"absolute\",\n              top: 0,\n              left: 0,\n              width: \"100%\",\n              height: \"100%\",\n              backgroundImage: `url(${placeholderSrc})`,\n              backgroundSize: \"cover\",\n              backgroundPosition: \"center\",\n              filter: \"blur(10px)\",\n              transform: \"scale(1.1)\",\n              transition: \"opacity 0.3s ease\",\n              opacity: isLoaded ? 0 : 1\n            }\n          }\n        ),\n        (priority || isInView) && /* @__PURE__ */ jsxs(\"picture\", { children: [\n          /* @__PURE__ */ jsx(\n            \"source\",\n            {\n              srcSet: generateSrcSet(src.replace(/\\.[^/.]+$/, \".webp\")),\n              sizes,\n              type: \"image/webp\"\n            }\n          ),\n          /* @__PURE__ */ jsx(\n            \"source\",\n            {\n              srcSet: generateSrcSet(src),\n              sizes,\n              type: \"image/jpeg\"\n            }\n          ),\n          /* @__PURE__ */ jsx(\n            \"img\",\n            {\n              ref: imgRef,\n              src,\n              alt,\n              width,\n              height,\n              loading: priority ? \"eager\" : loading,\n              decoding: \"async\",\n              onLoad: handleLoad,\n              onError: handleError,\n              style: {\n                position: \"absolute\",\n                top: 0,\n                left: 0,\n                width: \"100%\",\n                height: \"100%\",\n                objectFit: \"cover\",\n                transition: \"opacity 0.3s ease\",\n                opacity: isLoaded ? 1 : 0,\n                transform: \"translateZ(0)\"\n                // Force hardware acceleration\n              }\n            }\n          )\n        ] }),\n        !isLoaded && !isError && (priority || isInView) && /* @__PURE__ */ jsx(\n          \"div\",\n          {\n            className: \"image-loading\",\n            style: {\n              position: \"absolute\",\n              top: \"50%\",\n              left: \"50%\",\n              transform: \"translate(-50%, -50%)\",\n              width: \"40px\",\n              height: \"40px\",\n              border: \"3px solid #f3f3f3\",\n              borderTop: \"3px solid #b38741\",\n              borderRadius: \"50%\",\n              animation: \"spin 1s linear infinite\"\n            }\n          }\n        ),\n        isError && /* @__PURE__ */ jsx(\n          \"div\",\n          {\n            className: \"image-error\",\n            style: {\n              position: \"absolute\",\n              top: \"50%\",\n              left: \"50%\",\n              transform: \"translate(-50%, -50%)\",\n              textAlign: \"center\",\n              color: \"#666\",\n              fontSize: \"14px\"\n            },\n            children: \"⚠️ Failed to load image\"\n          }\n        ),\n        /* @__PURE__ */ jsx(\"style\", { children: `\n        @keyframes spin {\n          0% {\n            transform: translate(-50%, -50%) rotate(0deg);\n          }\n          100% {\n            transform: translate(-50%, -50%) rotate(360deg);\n          }\n        }\n      ` })\n      ]\n    }\n  );\n};\nexport default OptimizedImage;\n",
      "start": 1748859738760,
      "end": 1748859738807,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "C:/Users/.Freelancer/baotangnghethuat/src/components/OptimizedImage/OptimizedImage.jsx"
        ],
        "sourcesContent": [
          "import React, { useEffect, useRef, useState } from \"react\";\n\nconst OptimizedImage = ({\n  src,\n  alt,\n  className = \"\",\n  width,\n  height,\n  priority = false,\n  sizes = \"100vw\",\n  loading = \"lazy\",\n  onLoad,\n  onError,\n  style = {},\n  ...props\n}) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isInView, setIsInView] = useState(priority);\n  const imgRef = useRef(null);\n  const placeholderRef = useRef(null);\n\n  // Generate responsive image URLs\n  const generateSrcSet = (imageSrc) => {\n    const baseName = imageSrc.replace(/\\.[^/.]+$/, \"\");\n    const extension = imageSrc.match(/\\.[^/.]+$/)?.[0] || \".webp\";\n\n    return [\n      `${baseName}_480w${extension} 480w`,\n      `${baseName}_768w${extension} 768w`,\n      `${baseName}_1024w${extension} 1024w`,\n      `${baseName}_1200w${extension} 1200w`,\n      `${imageSrc} 1920w`,\n    ].join(\", \");\n  };\n\n  // Intersection Observer for lazy loading\n  useEffect(() => {\n    if (priority || isInView) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting) {\n          setIsInView(true);\n          observer.disconnect();\n        }\n      },\n      {\n        threshold: 0.1,\n        rootMargin: \"50px 0px\",\n      }\n    );\n\n    if (placeholderRef.current) {\n      observer.observe(placeholderRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [priority, isInView]);\n\n  const handleLoad = () => {\n    setIsLoaded(true);\n    onLoad?.();\n  };\n\n  const handleError = () => {\n    setIsError(true);\n    onError?.();\n  };\n\n  // Generate low quality placeholder\n  const placeholderSrc = `${src.replace(/\\.[^/.]+$/, \"\")}_placeholder.webp`;\n\n  return (\n    <div\n      ref={placeholderRef}\n      className={`optimized-image-container ${className}`}\n      style={{\n        position: \"relative\",\n        overflow: \"hidden\",\n        backgroundColor: \"#f0f0f0\",\n        ...style,\n        ...(width && height && { aspectRatio: `${width} / ${height}` }),\n      }}\n      {...props}\n    >\n      {/* Low quality placeholder */}\n      {!priority && !isInView && (\n        <div\n          className=\"image-placeholder\"\n          style={{\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            width: \"100%\",\n            height: \"100%\",\n            backgroundImage: `url(${placeholderSrc})`,\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n            filter: \"blur(10px)\",\n            transform: \"scale(1.1)\",\n            transition: \"opacity 0.3s ease\",\n            opacity: isLoaded ? 0 : 1,\n          }}\n        />\n      )}\n\n      {/* Main image */}\n      {(priority || isInView) && (\n        <picture>\n          {/* WebP source */}\n          <source\n            srcSet={generateSrcSet(src.replace(/\\.[^/.]+$/, \".webp\"))}\n            sizes={sizes}\n            type=\"image/webp\"\n          />\n\n          {/* Fallback source */}\n          <source\n            srcSet={generateSrcSet(src)}\n            sizes={sizes}\n            type=\"image/jpeg\"\n          />\n\n          <img\n            ref={imgRef}\n            src={src}\n            alt={alt}\n            width={width}\n            height={height}\n            loading={priority ? \"eager\" : loading}\n            decoding=\"async\"\n            onLoad={handleLoad}\n            onError={handleError}\n            style={{\n              position: \"absolute\",\n              top: 0,\n              left: 0,\n              width: \"100%\",\n              height: \"100%\",\n              objectFit: \"cover\",\n              transition: \"opacity 0.3s ease\",\n              opacity: isLoaded ? 1 : 0,\n              transform: \"translateZ(0)\", // Force hardware acceleration\n            }}\n          />\n        </picture>\n      )}\n\n      {/* Loading indicator */}\n      {!isLoaded && !isError && (priority || isInView) && (\n        <div\n          className=\"image-loading\"\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            width: \"40px\",\n            height: \"40px\",\n            border: \"3px solid #f3f3f3\",\n            borderTop: \"3px solid #b38741\",\n            borderRadius: \"50%\",\n            animation: \"spin 1s linear infinite\",\n          }}\n        />\n      )}\n\n      {/* Error state */}\n      {isError && (\n        <div\n          className=\"image-error\"\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            textAlign: \"center\",\n            color: \"#666\",\n            fontSize: \"14px\",\n          }}\n        >\n          ⚠️ Failed to load image\n        </div>\n      )}\n\n      <style>{`\n        @keyframes spin {\n          0% {\n            transform: translate(-50%, -50%) rotate(0deg);\n          }\n          100% {\n            transform: translate(-50%, -50%) rotate(360deg);\n          }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default OptimizedImage;\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1748859738807,
      "end": 1748859738807,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1748859738807,
      "end": 1748859738807,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1748859738807,
      "end": 1748859738807,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1748859738807,
      "end": 1748859738807,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1748859738807,
      "end": 1748859738807,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1748859738807,
      "end": 1748859738807,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1748859738807,
      "end": 1748859738807,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1748859738807,
      "end": 1748859738808,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1748859738808,
      "end": 1748859738808,
      "order": "normal"
    }
  ]
}
