{
  "resolvedId": "C:/Users/.Freelancer/MUSSEEDUPIN/node_modules/framer-motion/dist/es/render/dom/scroll/track.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { frame, cancelFrame, frameData } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { resize } from '../resize/index.mjs';\nimport { createScrollInfo } from './info.mjs';\nimport { createOnScrollHandler } from './on-scroll-handler.mjs';\n\nconst scrollListeners = new WeakMap();\nconst resizeListeners = new WeakMap();\nconst onScrollHandlers = new WeakMap();\nconst getEventTarget = (element) => element === document.scrollingElement ? window : element;\nfunction scrollInfo(onScroll, { container = document.scrollingElement, ...options } = {}) {\n    if (!container)\n        return noop;\n    let containerHandlers = onScrollHandlers.get(container);\n    /**\n     * Get the onScroll handlers for this container.\n     * If one isn't found, create a new one.\n     */\n    if (!containerHandlers) {\n        containerHandlers = new Set();\n        onScrollHandlers.set(container, containerHandlers);\n    }\n    /**\n     * Create a new onScroll handler for the provided callback.\n     */\n    const info = createScrollInfo();\n    const containerHandler = createOnScrollHandler(container, onScroll, info, options);\n    containerHandlers.add(containerHandler);\n    /**\n     * Check if there's a scroll event listener for this container.\n     * If not, create one.\n     */\n    if (!scrollListeners.has(container)) {\n        const measureAll = () => {\n            for (const handler of containerHandlers)\n                handler.measure();\n        };\n        const updateAll = () => {\n            for (const handler of containerHandlers) {\n                handler.update(frameData.timestamp);\n            }\n        };\n        const notifyAll = () => {\n            for (const handler of containerHandlers)\n                handler.notify();\n        };\n        const listener = () => {\n            frame.read(measureAll);\n            frame.read(updateAll);\n            frame.preUpdate(notifyAll);\n        };\n        scrollListeners.set(container, listener);\n        const target = getEventTarget(container);\n        window.addEventListener(\"resize\", listener, { passive: true });\n        if (container !== document.documentElement) {\n            resizeListeners.set(container, resize(container, listener));\n        }\n        target.addEventListener(\"scroll\", listener, { passive: true });\n        listener();\n    }\n    const listener = scrollListeners.get(container);\n    frame.read(listener, false, true);\n    return () => {\n        cancelFrame(listener);\n        /**\n         * Check if we even have any handlers for this container.\n         */\n        const currentHandlers = onScrollHandlers.get(container);\n        if (!currentHandlers)\n            return;\n        currentHandlers.delete(containerHandler);\n        if (currentHandlers.size)\n            return;\n        /**\n         * If no more handlers, remove the scroll listener too.\n         */\n        const scrollListener = scrollListeners.get(container);\n        scrollListeners.delete(container);\n        if (scrollListener) {\n            getEventTarget(container).removeEventListener(\"scroll\", scrollListener);\n            resizeListeners.get(container)?.();\n            window.removeEventListener(\"resize\", scrollListener);\n        }\n    };\n}\n\nexport { scrollInfo };\n",
      "start": 1751956295029,
      "end": 1751956295553,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1751956295553,
      "end": 1751956295553,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1751956295553,
      "end": 1751956295553,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1751956295553,
      "end": 1751956295553,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1751956295553,
      "end": 1751956295553,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1751956295553,
      "end": 1751956295553,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1751956295553,
      "end": 1751956295553,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1751956295553,
      "end": 1751956295553,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1751956295553,
      "end": 1751956295553,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1751956295553,
      "end": 1751956295553,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1751956295553,
      "end": 1751956295553,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1751956295553,
      "end": 1751956295553,
      "order": "normal"
    }
  ]
}
