import React, { useEffect, useRef, useState } from "react";
import { IoIosArrowBack, IoIosArrowForward } from "react-icons/io";
import { useNavigate, useParams } from "react-router-dom";
import "./TheTasteDetail.css";

const TheTasteDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [currentSlide, setCurrentSlide] = useState(0);
  const [isAutoPlaying, setIsAutoPlaying] = useState(true);
  const [showVideoModal, setShowVideoModal] = useState(false);
  const [selectedVideo, setSelectedVideo] = useState(null);
  const autoPlayRef = useRef(null);

  // Mock data - replace with your actual data
  const tasteData = {
    restaurant: {
      title: "Ngh·ªá thu·∫≠t v·ªã gi√°c",
      title2: "üçΩÔ∏è Th∆∞·ªüng th·ª©c ·∫©m th·ª±c ƒë·∫∑c s·∫Øc t·∫°i Nh√† h√†ng B·∫£o T√†ng Th√¥ng",
      description: "N∆°i h·ªôi t·ª• tinh hoa ·∫©m th·ª±c ƒê√† L·∫°t",
      image:
        "https://ik.imagekit.io/8u8lkoqkkm/image(1).png?updatedAt=1749000543046",
      content: `‚Äì N∆°i h·ªôi t·ª• tinh hoa ·∫©m th·ª±c ƒê√† L·∫°t ‚Äì

T·∫°i Nh√† h√†ng B·∫£o T√†ng Th√¥ng, ch√∫ng t√¥i mang ƒë·∫øn cho b·∫°n m·ªôt tr·∫£i nghi·ªám ·∫©m th·ª±c ƒë·ªôc ƒë√°o, n∆°i h·ªôi t·ª• tinh hoa c·ªßa ·∫©m th·ª±c ƒê√† L·∫°t v√† th·∫ø gi·ªõi.

M·ªói m√≥n ƒÉn l√† m·ªôt t√°c ph·∫©m ngh·ªá thu·∫≠t, ƒë∆∞·ª£c ch·∫ø bi·∫øn t·ª´ nh·ªØng nguy√™n li·ªáu t∆∞∆°i ngon nh·∫•t, k·∫øt h·ª£p v·ªõi c√¥ng th·ª©c ƒë·ªôc ƒë√°o v√† s·ª± s√°ng t·∫°o kh√¥ng ng·ª´ng c·ªßa ƒë·ªôi ng≈© ƒë·∫ßu b·∫øp t√†i nƒÉng.

V·ªõi kh√¥ng gian sang tr·ªçng, ·∫•m c√∫ng v√† view to√†n c·∫£nh th√†nh ph·ªë ƒê√† L·∫°t, Nh√† h√†ng B·∫£o T√†ng Th√¥ng l√† ƒëi·ªÉm ƒë·∫øn l√Ω t∆∞·ªüng cho nh·ªØng b·ªØa ti·ªác gia ƒë√¨nh, h·ªçp m·∫∑t b·∫°n b√® hay nh·ªØng bu·ªïi t·ªëi l√£ng m·∫°n.`,
      videos: [
        {
          id: "aozcRuYVPKw",
          title: "Tr·∫£i nghi·ªám ·∫©m th·ª±c t·∫°i Nh√† h√†ng",
          thumbnail: "https://img.youtube.com/vi/aozcRuYVPKw/maxresdefault.jpg",
        },
        {
          id: "aozcRuYVPKw",
          title: "Kh√°m ph√° menu ƒë·∫∑c s·∫Øc",
          thumbnail: "https://img.youtube.com/vi/aozcRuYVPKw/maxresdefault.jpg",
        },
      ],
    },
    cafe: {
      title: "Ngh·ªá thu·∫≠t v·ªã gi√°c",
      title2: "‚òï Th∆∞·ªüng th·ª©c c√† ph√™ ƒë·∫∑c s·∫£n t·∫°i B·∫£o T√†ng Th√¥ng",
      description: "N∆°i h∆∞∆°ng v·ªã c√† ph√™ h√≤a quy·ªán c√πng kh√¥ng gian ngh·ªá thu·∫≠t",
      image:
        "https://ik.imagekit.io/8u8lkoqkkm/image(2).png?updatedAt=1749000540091",
      content: `‚Äì N∆°i h∆∞∆°ng v·ªã c√† ph√™ h√≤a quy·ªán c√πng kh√¥ng gian ngh·ªá thu·∫≠t ‚Äì

T·∫°i B·∫£o T√†ng Th√¥ng, ch√∫ng t√¥i mang ƒë·∫øn cho b·∫°n m·ªôt tr·∫£i nghi·ªám c√† ph√™ ƒë·ªôc ƒë√°o, n∆°i h·ªôi t·ª• tinh hoa c·ªßa ngh·ªá thu·∫≠t pha ch·∫ø v√† kh√¥ng gian s√°ng t·∫°o.

M·ªói t√°ch c√† ph√™ l√† m·ªôt c√¢u chuy·ªán, ƒë∆∞·ª£c k·ªÉ b·∫±ng h∆∞∆°ng v·ªã ƒë·∫≠m ƒë√† c·ªßa h·∫°t c√† ph√™ ƒê√† L·∫°t, k·∫øt h·ª£p v·ªõi k·ªπ thu·∫≠t rang xay v√† pha ch·∫ø tinh t·∫ø c·ªßa ƒë·ªôi ng≈© barista chuy√™n nghi·ªáp.

V·ªõi kh√¥ng gian m·ªü, view to√†n c·∫£nh th√†nh ph·ªë v√† thi·∫øt k·∫ø ƒë·ªôc ƒë√°o, qu√°n c√† ph√™ B·∫£o T√†ng Th√¥ng l√† ƒëi·ªÉm ƒë·∫øn l√Ω t∆∞·ªüng cho nh·ªØng bu·ªïi s√°ng th∆∞ th√°i hay nh·ªØng bu·ªïi chi·ªÅu l√£ng m·∫°n.`,
      videos: [
        {
          id: "aozcRuYVPKw",
          title: "Tr·∫£i nghi·ªám c√† ph√™ ƒë·∫∑c s·∫£n",
          thumbnail: "https://img.youtube.com/vi/aozcRuYVPKw/maxresdefault.jpg",
        },
        {
          id: "aozcRuYVPKw",
          title: "Kh√°m ph√° kh√¥ng gian c√† ph√™",
          thumbnail: "https://img.youtube.com/vi/aozcRuYVPKw/maxresdefault.jpg",
        },
      ],
    },
  };

  const currentData = tasteData[id];

  useEffect(() => {
    if (isAutoPlaying) {
      autoPlayRef.current = setInterval(() => {
        setCurrentSlide((prev) => (prev + 1) % currentData.videos.length);
      }, 5000);
    }
    return () => {
      if (autoPlayRef.current) {
        clearInterval(autoPlayRef.current);
      }
    };
  }, [isAutoPlaying, currentData.videos.length]);

  const nextSlide = () => {
    setCurrentSlide((prev) => (prev + 1) % currentData.videos.length);
    setIsAutoPlaying(false);
  };

  const prevSlide = () => {
    setCurrentSlide((prev) =>
      prev === 0 ? currentData.videos.length - 1 : prev - 1
    );
    setIsAutoPlaying(false);
  };

  const openVideoModal = (video) => {
    setSelectedVideo(video);
    setShowVideoModal(true);
  };

  const closeVideoModal = () => {
    setShowVideoModal(false);
    setSelectedVideo(null);
  };

  if (!currentData) {
    return <div>Kh√¥ng t√¨m th·∫•y th√¥ng tin</div>;
  }

  return (
    <div className="taste-detail-container">
      {/* Hero Section */}
      <div className="taste-detail-hero">
        <img
          src={currentData.image}
          alt={currentData.title}
          className="taste-detail-hero-img"
        />
        <div className="taste-detail-hero-overlay" />
        <button className="back-button" onClick={() => navigate("/the-taste")}>
          <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">
            <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" />
          </svg>
          Quay l·∫°i
        </button>
        <div className="taste-detail-hero-content">
          <h1>{currentData.title}</h1>
          <p>{currentData.description}</p>
        </div>
      </div>

      {/* Content Section */}
      <div className="taste-detail-content">
        <div className="content-wrapper">
          <h2>{currentData.title2}</h2>
          <p>{currentData.content}</p>
        </div>
      </div>

      {/* Video Slideshow Section */}
      <div className="taste-detail-slideshow">
        <div className="slideshow-container">
          <button className="slide-nav prev" onClick={prevSlide}>
            <IoIosArrowBack size={24} />
          </button>

          <div
            className="slides-wrapper"
            style={{ transform: `translateX(-${currentSlide * 100}%)` }}
          >
            {currentData.videos.map((video, index) => (
              <div
                key={index}
                className="slide"
                onClick={() => openVideoModal(video)}
              >
                <img src={video.thumbnail} alt={video.title} />
                <div className="play-button">
                  <svg
                    viewBox="0 0 24 24"
                    fill="currentColor"
                    width="48"
                    height="48"
                  >
                    <path d="M8 5v14l11-7z" />
                  </svg>
                </div>
              </div>
            ))}
          </div>

          <button className="slide-nav next" onClick={nextSlide}>
            <IoIosArrowForward size={24} />
          </button>
        </div>

        <div className="slide-indicators">
          {currentData.videos.map((_, index) => (
            <button
              key={index}
              className={`indicator ${index === currentSlide ? "active" : ""}`}
              onClick={() => setCurrentSlide(index)}
            />
          ))}
          <span className="slide-count">
            {currentSlide + 1} / {currentData.videos.length}
          </span>
        </div>
      </div>

      {/* Video Modal */}
      {showVideoModal && selectedVideo && (
        <div className="video-modal">
          <button className="close-modal" onClick={closeVideoModal}>
            <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">
              <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" />
            </svg>
          </button>
          <div className="video-container">
            <iframe
              width="100%"
              height="100%"
              src={`https://www.youtube.com/embed/${selectedVideo.id}?autoplay=1`}
              title={selectedVideo.title}
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default TheTasteDetail;
