{
  "resolvedId": "C:/Users/.Freelancer/ONLINE/src/pages/NewsPage/NewsPage.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React, { useEffect, useState } from \"react\";\nimport { IoMdClose } from \"react-icons/io\";\nimport {\n  MdKeyboardArrowRight,\n  MdKeyboardDoubleArrowRight,\n} from \"react-icons/md\";\nimport { RiArrowDropDownLine } from \"react-icons/ri\";\nimport { Link } from \"react-router-dom\";\nimport {\n  getAnPhamImageUrl,\n  getInTheoYeuCauImageUrl,\n  getKhuyenTaiImageUrl,\n  getThoiTrangImageUrl,\n  getSanPhamTuThongImageUrl,\n  getHoiThaoNgheThuatImageUrl,\n  getThoCamImageUrl,\n} from \"../../utils/cloudinary\";\nimport { sampleProducts } from \"../CategoryDetail/CategoryDetail\";\nimport \"./NewsPage.css\";\n\n// Helper function to get image URL based on category\nconst getImageUrl = (category, filename) => {\n  switch (category) {\n    case \"khuyentai\":\n      return getKhuyenTaiImageUrl(filename);\n    case \"anpham\":\n      return getAnPhamImageUrl(filename);\n    case \"in-theo-yeu-cau\":\n      return getInTheoYeuCauImageUrl(filename);\n    case \"hoi-thao-nghe-thuat\":\n      return getHoiThaoNgheThuatImageUrl(filename);\n    case \"thoi-trang-va-phu-kien\":\n      return getThoiTrangImageUrl(filename);\n    case \"thocam\":\n      return getThoCamImageUrl(filename);\n    case \"sanphamtuthong\":\n      return getSanPhamTuThongImageUrl(filename);\n    default:\n      return \"\";\n  }\n};\n\nconst NewsPage = () => {\n  const [showFilters, setShowFilters] = useState(false);\n  const [sortOrder, setSortOrder] = useState(\"default\");\n  const [showSortDropdown, setShowSortDropdown] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [filteredCount, setFilteredCount] = useState(0);\n  const [previewCount, setPreviewCount] = useState(0);\n\n  // Convert sampleProducts object into array\n  const allProducts = Object.values(sampleProducts).flat();\n\n  // Get new products\n  const newProducts = allProducts.filter((product) => product.isNew);\n\n  // Calculate min and max prices from products\n  const priceRange = {\n    min: 0,\n    max: Math.max(\n      ...newProducts.map((product) =>\n        parseInt(product.price.replace(/[^\\d]/g, \"\"))\n      )\n    ),\n  };\n\n  const [openSections, setOpenSections] = useState({\n    types: false,\n    artists: false,\n    publishYears: false,\n    priceRange: false,\n  });\n\n  const [selectedFilters, setSelectedFilters] = useState({\n    types: [],\n    artists: [],\n    publishYears: [],\n    priceRange: [priceRange.min, priceRange.max],\n  });\n\n  // Format price for display\n  const formatPrice = (price) => {\n    return new Intl.NumberFormat(\"vi-VN\", {\n      style: \"currency\",\n      currency: \"VND\",\n    }).format(price);\n  };\n\n  // Filter products based on current filters\n  const filterProducts = (products, filters) => {\n    return products.filter((product) => {\n      const typeMatch =\n        filters.types.length === 0 || filters.types.includes(product.type);\n      const artistMatch =\n        filters.artists.length === 0 ||\n        filters.artists.includes(product.artist);\n      const yearMatch =\n        filters.publishYears.length === 0 ||\n        filters.publishYears.includes(product.publishYear);\n      const price = parseInt(product.price.replace(/[^\\d]/g, \"\"));\n      const priceMatch =\n        price >= filters.priceRange[0] && price <= filters.priceRange[1];\n\n      return typeMatch && artistMatch && yearMatch && priceMatch;\n    });\n  };\n\n  // Update filtered products when filters change\n  useEffect(() => {\n    const filtered = filterProducts(newProducts, selectedFilters);\n    setPreviewCount(filtered.length);\n  }, [selectedFilters]);\n\n  // Apply filters\n  const applyFilters = () => {\n    const filtered = filterProducts(newProducts, selectedFilters);\n    setFilteredProducts(filtered);\n    setFilteredCount(filtered.length);\n    setShowFilters(false);\n    setCurrentPage(1);\n  };\n\n  // Reset filters\n  const resetFilters = () => {\n    const initialFilters = {\n      types: [],\n      artists: [],\n      publishYears: [],\n      priceRange: [priceRange.min, priceRange.max],\n    };\n    setSelectedFilters(initialFilters);\n    setFilteredProducts(newProducts);\n    setFilteredCount(newProducts.length);\n    setPreviewCount(newProducts.length);\n    setCurrentPage(1);\n  };\n\n  // Initialize filtered products\n  useEffect(() => {\n    setFilteredProducts(newProducts);\n    setFilteredCount(newProducts.length);\n    setPreviewCount(newProducts.length);\n  }, []);\n\n  // Handle sort change\n  const handleSortChange = (order) => {\n    setSortOrder(order);\n    setShowSortDropdown(false);\n\n    const sorted = [...filteredProducts].sort((a, b) => {\n      if (order === \"default\") {\n        return a.id - b.id;\n      }\n      const priceA = parseInt(a.price.replace(/\\D/g, \"\"));\n      const priceB = parseInt(b.price.replace(/\\D/g, \"\"));\n      return order === \"asc\" ? priceA - priceB : priceB - priceA;\n    });\n    setFilteredProducts(sorted);\n  };\n\n  // Pagination\n  const productsPerPage = 10;\n  const totalPages = Math.ceil(filteredProducts.length / productsPerPage);\n  const currentProducts = filteredProducts.slice(\n    (currentPage - 1) * productsPerPage,\n    currentPage * productsPerPage\n  );\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n    window.scrollTo(0, 0);\n  };\n\n  // Toggle section open/close\n  const toggleSection = (section) => {\n    setOpenSections((prev) => ({\n      ...prev,\n      [section]: !prev[section],\n    }));\n  };\n\n  return (\n    <div className=\"news-page\">\n      <h1 className=\"news-page-title\">Sản phẩm mới</h1>\n\n      <div className=\"sort-news\">\n        <div className=\"total-products\">\n          <span className=\"total-count\">{filteredCount}</span>\n          <span>sản phẩm</span>\n        </div>\n        <div className=\"sort-dropdown-container\">\n          <div\n            className={`sort-dropdown-header ${\n              showSortDropdown ? \"active\" : \"\"\n            }`}\n            onClick={() => setShowSortDropdown(!showSortDropdown)}\n          >\n            <span>\n              Sắp xếp theo:{\" \"}\n              {sortOrder === \"asc\"\n                ? \"giá tăng dần\"\n                : sortOrder === \"desc\"\n                ? \"giá giảm dần\"\n                : \"lựa chọn của chúng tôi\"}\n            </span>\n            <RiArrowDropDownLine\n              className={showSortDropdown ? \"rotated\" : \"\"}\n            />\n          </div>\n          {showSortDropdown && (\n            <div className=\"sort-dropdown-menu\">\n              <div\n                className={`sort-option ${\n                  sortOrder === \"default\" ? \"active\" : \"\"\n                }`}\n                onClick={() => handleSortChange(\"default\")}\n              >\n                <strong>lựa chọn của chúng tôi</strong>\n              </div>\n              <div\n                className={`sort-option ${sortOrder === \"asc\" ? \"active\" : \"\"}`}\n                onClick={() => handleSortChange(\"asc\")}\n              >\n                giá tăng dần\n              </div>\n              <div\n                className={`sort-option ${\n                  sortOrder === \"desc\" ? \"active\" : \"\"\n                }`}\n                onClick={() => handleSortChange(\"desc\")}\n              >\n                giá giảm dần\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <section className=\"card-image-news\">\n        <div className=\"card-grid-news\">\n          {currentProducts.map((product) => (\n            <div key={product.id} className=\"card-item-news\">\n              <Link to={`/product/${product.id}`}>\n                <img\n                  src={getImageUrl(product.category, product.image)}\n                  alt={product.title}\n                  className=\"card-image\"\n                />\n                <div className=\"news-content\">\n                  <h3 className=\"card-title\">{product.title}</h3>\n                  <p className=\"card-price\">{product.price}</p>\n                </div>\n              </Link>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      <div className=\"result-pager-news\">\n        {Array.from({ length: totalPages }, (_, i) => (\n          <button\n            key={i + 1}\n            className={currentPage === i + 1 ? \"active\" : \"\"}\n            onClick={() => handlePageChange(i + 1)}\n          >\n            {i + 1}\n          </button>\n        ))}\n        <button\n          onClick={() =>\n            handlePageChange(Math.min(currentPage + 1, totalPages))\n          }\n          disabled={currentPage === totalPages}\n        >\n          <MdKeyboardArrowRight />\n        </button>\n        <button\n          onClick={() =>\n            handlePageChange(Math.min(currentPage + 10, totalPages))\n          }\n          disabled={currentPage + 10 > totalPages}\n        >\n          <MdKeyboardDoubleArrowRight />\n        </button>\n      </div>\n\n      <button\n        className=\"filter-button\"\n        onClick={() => {\n          setShowFilters(true);\n          if (!showFilters) {\n            resetFilters();\n          }\n        }}\n      >\n        {showFilters ? `Kết quả (${previewCount})` : \"Bộ lọc\"}\n      </button>\n\n      {showFilters && (\n        <div className=\"search-filters-modal-news\">\n          <div className=\"search-filters-content\">\n            <div className=\"search-filters-header\">\n              <h2 className=\"search-filters-title\">Bộ lọc</h2>\n              <button\n                className=\"close-filters-button\"\n                onClick={() => setShowFilters(false)}\n                aria-label=\"Đóng bộ lọc\"\n              >\n                <IoMdClose />\n              </button>\n            </div>\n\n            {/* Types Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"types\")}\n              >\n                <h3>Thể loại</h3>\n                <RiArrowDropDownLine\n                  className={openSections.types ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.types && (\n                <div className=\"filter-options\">\n                  {Array.from(new Set(newProducts.map((p) => p.type))).map(\n                    (type) => (\n                      <label key={type} className=\"filter-option\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedFilters.types.includes(type)}\n                          onChange={(e) => {\n                            const newTypes = e.target.checked\n                              ? [...selectedFilters.types, type]\n                              : selectedFilters.types.filter((t) => t !== type);\n                            setSelectedFilters((prev) => ({\n                              ...prev,\n                              types: newTypes,\n                            }));\n                          }}\n                        />\n                        <span>{type}</span>\n                      </label>\n                    )\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Artists Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"artists\")}\n              >\n                <h3>Nghệ sĩ</h3>\n                <RiArrowDropDownLine\n                  className={openSections.artists ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.artists && (\n                <div className=\"filter-options\">\n                  {Array.from(new Set(newProducts.map((p) => p.artist))).map(\n                    (artist) => (\n                      <label key={artist} className=\"filter-option\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedFilters.artists.includes(artist)}\n                          onChange={(e) => {\n                            const newArtists = e.target.checked\n                              ? [...selectedFilters.artists, artist]\n                              : selectedFilters.artists.filter(\n                                  (a) => a !== artist\n                                );\n                            setSelectedFilters((prev) => ({\n                              ...prev,\n                              artists: newArtists,\n                            }));\n                          }}\n                        />\n                        <span>{artist}</span>\n                      </label>\n                    )\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Publish Years Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"publishYears\")}\n              >\n                <h3>Thời gian xuất bản</h3>\n                <RiArrowDropDownLine\n                  className={openSections.publishYears ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.publishYears && (\n                <div className=\"filter-options\">\n                  {Array.from(\n                    new Set(newProducts.map((p) => p.publishYear))\n                  ).map((year) => (\n                    <label key={year} className=\"filter-option\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedFilters.publishYears.includes(year)}\n                        onChange={(e) => {\n                          const newYears = e.target.checked\n                            ? [...selectedFilters.publishYears, year]\n                            : selectedFilters.publishYears.filter(\n                                (y) => y !== year\n                              );\n                          setSelectedFilters((prev) => ({\n                            ...prev,\n                            publishYears: newYears,\n                          }));\n                        }}\n                      />\n                      <span>{year}</span>\n                    </label>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Price Range Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"priceRange\")}\n              >\n                <h3>Giá cả</h3>\n                <RiArrowDropDownLine\n                  className={openSections.priceRange ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.priceRange && (\n                <div className=\"price-range-slider\">\n                  <div className=\"price-range-inputs\">\n                    <input\n                      type=\"range\"\n                      min={priceRange.min}\n                      max={priceRange.max}\n                      value={selectedFilters.priceRange[0]}\n                      onChange={(e) => {\n                        const minValue = parseInt(e.target.value);\n                        setSelectedFilters((prev) => ({\n                          ...prev,\n                          priceRange: [\n                            Math.min(minValue, prev.priceRange[1]),\n                            prev.priceRange[1],\n                          ],\n                        }));\n                      }}\n                    />\n                    <input\n                      type=\"range\"\n                      min={priceRange.min}\n                      max={priceRange.max}\n                      value={selectedFilters.priceRange[1]}\n                      onChange={(e) => {\n                        const maxValue = parseInt(e.target.value);\n                        setSelectedFilters((prev) => ({\n                          ...prev,\n                          priceRange: [\n                            prev.priceRange[0],\n                            Math.max(maxValue, prev.priceRange[0]),\n                          ],\n                        }));\n                      }}\n                    />\n                  </div>\n                  <div className=\"price-range-values\">\n                    <span>{formatPrice(selectedFilters.priceRange[0])}</span>\n                    <span>{formatPrice(selectedFilters.priceRange[1])}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <button\n            className=\"apply-filters-button\"\n            onClick={applyFilters}\n            disabled={previewCount === 0}\n          >\n            Kết quả ({previewCount})\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NewsPage;\n",
      "start": 1750746804440,
      "end": 1750746804504,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1750746804505,
      "end": 1750746804505,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport { IoMdClose } from \"react-icons/io\";\nimport {\n  MdKeyboardArrowRight,\n  MdKeyboardDoubleArrowRight\n} from \"react-icons/md\";\nimport { RiArrowDropDownLine } from \"react-icons/ri\";\nimport { Link } from \"react-router-dom\";\nimport {\n  getAnPhamImageUrl,\n  getInTheoYeuCauImageUrl,\n  getKhuyenTaiImageUrl,\n  getThoiTrangImageUrl,\n  getSanPhamTuThongImageUrl,\n  getHoiThaoNgheThuatImageUrl,\n  getThoCamImageUrl\n} from \"../../utils/cloudinary\";\nimport { sampleProducts } from \"../CategoryDetail/CategoryDetail\";\nimport \"./NewsPage.css\";\nconst getImageUrl = (category, filename) => {\n  switch (category) {\n    case \"khuyentai\":\n      return getKhuyenTaiImageUrl(filename);\n    case \"anpham\":\n      return getAnPhamImageUrl(filename);\n    case \"in-theo-yeu-cau\":\n      return getInTheoYeuCauImageUrl(filename);\n    case \"hoi-thao-nghe-thuat\":\n      return getHoiThaoNgheThuatImageUrl(filename);\n    case \"thoi-trang-va-phu-kien\":\n      return getThoiTrangImageUrl(filename);\n    case \"thocam\":\n      return getThoCamImageUrl(filename);\n    case \"sanphamtuthong\":\n      return getSanPhamTuThongImageUrl(filename);\n    default:\n      return \"\";\n  }\n};\nconst NewsPage = () => {\n  const [showFilters, setShowFilters] = useState(false);\n  const [sortOrder, setSortOrder] = useState(\"default\");\n  const [showSortDropdown, setShowSortDropdown] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [filteredCount, setFilteredCount] = useState(0);\n  const [previewCount, setPreviewCount] = useState(0);\n  const allProducts = Object.values(sampleProducts).flat();\n  const newProducts = allProducts.filter((product) => product.isNew);\n  const priceRange = {\n    min: 0,\n    max: Math.max(\n      ...newProducts.map(\n        (product) => parseInt(product.price.replace(/[^\\d]/g, \"\"))\n      )\n    )\n  };\n  const [openSections, setOpenSections] = useState({\n    types: false,\n    artists: false,\n    publishYears: false,\n    priceRange: false\n  });\n  const [selectedFilters, setSelectedFilters] = useState({\n    types: [],\n    artists: [],\n    publishYears: [],\n    priceRange: [priceRange.min, priceRange.max]\n  });\n  const formatPrice = (price) => {\n    return new Intl.NumberFormat(\"vi-VN\", {\n      style: \"currency\",\n      currency: \"VND\"\n    }).format(price);\n  };\n  const filterProducts = (products, filters) => {\n    return products.filter((product) => {\n      const typeMatch = filters.types.length === 0 || filters.types.includes(product.type);\n      const artistMatch = filters.artists.length === 0 || filters.artists.includes(product.artist);\n      const yearMatch = filters.publishYears.length === 0 || filters.publishYears.includes(product.publishYear);\n      const price = parseInt(product.price.replace(/[^\\d]/g, \"\"));\n      const priceMatch = price >= filters.priceRange[0] && price <= filters.priceRange[1];\n      return typeMatch && artistMatch && yearMatch && priceMatch;\n    });\n  };\n  useEffect(() => {\n    const filtered = filterProducts(newProducts, selectedFilters);\n    setPreviewCount(filtered.length);\n  }, [selectedFilters]);\n  const applyFilters = () => {\n    const filtered = filterProducts(newProducts, selectedFilters);\n    setFilteredProducts(filtered);\n    setFilteredCount(filtered.length);\n    setShowFilters(false);\n    setCurrentPage(1);\n  };\n  const resetFilters = () => {\n    const initialFilters = {\n      types: [],\n      artists: [],\n      publishYears: [],\n      priceRange: [priceRange.min, priceRange.max]\n    };\n    setSelectedFilters(initialFilters);\n    setFilteredProducts(newProducts);\n    setFilteredCount(newProducts.length);\n    setPreviewCount(newProducts.length);\n    setCurrentPage(1);\n  };\n  useEffect(() => {\n    setFilteredProducts(newProducts);\n    setFilteredCount(newProducts.length);\n    setPreviewCount(newProducts.length);\n  }, []);\n  const handleSortChange = (order) => {\n    setSortOrder(order);\n    setShowSortDropdown(false);\n    const sorted = [...filteredProducts].sort((a, b) => {\n      if (order === \"default\") {\n        return a.id - b.id;\n      }\n      const priceA = parseInt(a.price.replace(/\\D/g, \"\"));\n      const priceB = parseInt(b.price.replace(/\\D/g, \"\"));\n      return order === \"asc\" ? priceA - priceB : priceB - priceA;\n    });\n    setFilteredProducts(sorted);\n  };\n  const productsPerPage = 10;\n  const totalPages = Math.ceil(filteredProducts.length / productsPerPage);\n  const currentProducts = filteredProducts.slice(\n    (currentPage - 1) * productsPerPage,\n    currentPage * productsPerPage\n  );\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n    window.scrollTo(0, 0);\n  };\n  const toggleSection = (section) => {\n    setOpenSections((prev) => ({\n      ...prev,\n      [section]: !prev[section]\n    }));\n  };\n  return /* @__PURE__ */ jsxs(\"div\", { className: \"news-page\", children: [\n    /* @__PURE__ */ jsx(\"h1\", { className: \"news-page-title\", children: \"Sản phẩm mới\" }),\n    /* @__PURE__ */ jsxs(\"div\", { className: \"sort-news\", children: [\n      /* @__PURE__ */ jsxs(\"div\", { className: \"total-products\", children: [\n        /* @__PURE__ */ jsx(\"span\", { className: \"total-count\", children: filteredCount }),\n        /* @__PURE__ */ jsx(\"span\", { children: \"sản phẩm\" })\n      ] }),\n      /* @__PURE__ */ jsxs(\"div\", { className: \"sort-dropdown-container\", children: [\n        /* @__PURE__ */ jsxs(\n          \"div\",\n          {\n            className: `sort-dropdown-header ${showSortDropdown ? \"active\" : \"\"}`,\n            onClick: () => setShowSortDropdown(!showSortDropdown),\n            children: [\n              /* @__PURE__ */ jsxs(\"span\", { children: [\n                \"Sắp xếp theo:\",\n                \" \",\n                sortOrder === \"asc\" ? \"giá tăng dần\" : sortOrder === \"desc\" ? \"giá giảm dần\" : \"lựa chọn của chúng tôi\"\n              ] }),\n              /* @__PURE__ */ jsx(\n                RiArrowDropDownLine,\n                {\n                  className: showSortDropdown ? \"rotated\" : \"\"\n                }\n              )\n            ]\n          }\n        ),\n        showSortDropdown && /* @__PURE__ */ jsxs(\"div\", { className: \"sort-dropdown-menu\", children: [\n          /* @__PURE__ */ jsx(\n            \"div\",\n            {\n              className: `sort-option ${sortOrder === \"default\" ? \"active\" : \"\"}`,\n              onClick: () => handleSortChange(\"default\"),\n              children: /* @__PURE__ */ jsx(\"strong\", { children: \"lựa chọn của chúng tôi\" })\n            }\n          ),\n          /* @__PURE__ */ jsx(\n            \"div\",\n            {\n              className: `sort-option ${sortOrder === \"asc\" ? \"active\" : \"\"}`,\n              onClick: () => handleSortChange(\"asc\"),\n              children: \"giá tăng dần\"\n            }\n          ),\n          /* @__PURE__ */ jsx(\n            \"div\",\n            {\n              className: `sort-option ${sortOrder === \"desc\" ? \"active\" : \"\"}`,\n              onClick: () => handleSortChange(\"desc\"),\n              children: \"giá giảm dần\"\n            }\n          )\n        ] })\n      ] })\n    ] }),\n    /* @__PURE__ */ jsx(\"section\", { className: \"card-image-news\", children: /* @__PURE__ */ jsx(\"div\", { className: \"card-grid-news\", children: currentProducts.map((product) => /* @__PURE__ */ jsx(\"div\", { className: \"card-item-news\", children: /* @__PURE__ */ jsxs(Link, { to: `/product/${product.id}`, children: [\n      /* @__PURE__ */ jsx(\n        \"img\",\n        {\n          src: getImageUrl(product.category, product.image),\n          alt: product.title,\n          className: \"card-image\"\n        }\n      ),\n      /* @__PURE__ */ jsxs(\"div\", { className: \"news-content\", children: [\n        /* @__PURE__ */ jsx(\"h3\", { className: \"card-title\", children: product.title }),\n        /* @__PURE__ */ jsx(\"p\", { className: \"card-price\", children: product.price })\n      ] })\n    ] }) }, product.id)) }) }),\n    /* @__PURE__ */ jsxs(\"div\", { className: \"result-pager-news\", children: [\n      Array.from({ length: totalPages }, (_, i) => /* @__PURE__ */ jsx(\n        \"button\",\n        {\n          className: currentPage === i + 1 ? \"active\" : \"\",\n          onClick: () => handlePageChange(i + 1),\n          children: i + 1\n        },\n        i + 1\n      )),\n      /* @__PURE__ */ jsx(\n        \"button\",\n        {\n          onClick: () => handlePageChange(Math.min(currentPage + 1, totalPages)),\n          disabled: currentPage === totalPages,\n          children: /* @__PURE__ */ jsx(MdKeyboardArrowRight, {})\n        }\n      ),\n      /* @__PURE__ */ jsx(\n        \"button\",\n        {\n          onClick: () => handlePageChange(Math.min(currentPage + 10, totalPages)),\n          disabled: currentPage + 10 > totalPages,\n          children: /* @__PURE__ */ jsx(MdKeyboardDoubleArrowRight, {})\n        }\n      )\n    ] }),\n    /* @__PURE__ */ jsx(\n      \"button\",\n      {\n        className: \"filter-button\",\n        onClick: () => {\n          setShowFilters(true);\n          if (!showFilters) {\n            resetFilters();\n          }\n        },\n        children: showFilters ? `Kết quả (${previewCount})` : \"Bộ lọc\"\n      }\n    ),\n    showFilters && /* @__PURE__ */ jsxs(\"div\", { className: \"search-filters-modal-news\", children: [\n      /* @__PURE__ */ jsxs(\"div\", { className: \"search-filters-content\", children: [\n        /* @__PURE__ */ jsxs(\"div\", { className: \"search-filters-header\", children: [\n          /* @__PURE__ */ jsx(\"h2\", { className: \"search-filters-title\", children: \"Bộ lọc\" }),\n          /* @__PURE__ */ jsx(\n            \"button\",\n            {\n              className: \"close-filters-button\",\n              onClick: () => setShowFilters(false),\n              \"aria-label\": \"Đóng bộ lọc\",\n              children: /* @__PURE__ */ jsx(IoMdClose, {})\n            }\n          )\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"filter-section\", children: [\n          /* @__PURE__ */ jsxs(\n            \"div\",\n            {\n              className: \"filter-header\",\n              onClick: () => toggleSection(\"types\"),\n              children: [\n                /* @__PURE__ */ jsx(\"h3\", { children: \"Thể loại\" }),\n                /* @__PURE__ */ jsx(\n                  RiArrowDropDownLine,\n                  {\n                    className: openSections.types ? \"rotated\" : \"\"\n                  }\n                )\n              ]\n            }\n          ),\n          openSections.types && /* @__PURE__ */ jsx(\"div\", { className: \"filter-options\", children: Array.from(new Set(newProducts.map((p) => p.type))).map(\n            (type) => /* @__PURE__ */ jsxs(\"label\", { className: \"filter-option\", children: [\n              /* @__PURE__ */ jsx(\n                \"input\",\n                {\n                  type: \"checkbox\",\n                  checked: selectedFilters.types.includes(type),\n                  onChange: (e) => {\n                    const newTypes = e.target.checked ? [...selectedFilters.types, type] : selectedFilters.types.filter((t) => t !== type);\n                    setSelectedFilters((prev) => ({\n                      ...prev,\n                      types: newTypes\n                    }));\n                  }\n                }\n              ),\n              /* @__PURE__ */ jsx(\"span\", { children: type })\n            ] }, type)\n          ) })\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"filter-section\", children: [\n          /* @__PURE__ */ jsxs(\n            \"div\",\n            {\n              className: \"filter-header\",\n              onClick: () => toggleSection(\"artists\"),\n              children: [\n                /* @__PURE__ */ jsx(\"h3\", { children: \"Nghệ sĩ\" }),\n                /* @__PURE__ */ jsx(\n                  RiArrowDropDownLine,\n                  {\n                    className: openSections.artists ? \"rotated\" : \"\"\n                  }\n                )\n              ]\n            }\n          ),\n          openSections.artists && /* @__PURE__ */ jsx(\"div\", { className: \"filter-options\", children: Array.from(new Set(newProducts.map((p) => p.artist))).map(\n            (artist) => /* @__PURE__ */ jsxs(\"label\", { className: \"filter-option\", children: [\n              /* @__PURE__ */ jsx(\n                \"input\",\n                {\n                  type: \"checkbox\",\n                  checked: selectedFilters.artists.includes(artist),\n                  onChange: (e) => {\n                    const newArtists = e.target.checked ? [...selectedFilters.artists, artist] : selectedFilters.artists.filter(\n                      (a) => a !== artist\n                    );\n                    setSelectedFilters((prev) => ({\n                      ...prev,\n                      artists: newArtists\n                    }));\n                  }\n                }\n              ),\n              /* @__PURE__ */ jsx(\"span\", { children: artist })\n            ] }, artist)\n          ) })\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"filter-section\", children: [\n          /* @__PURE__ */ jsxs(\n            \"div\",\n            {\n              className: \"filter-header\",\n              onClick: () => toggleSection(\"publishYears\"),\n              children: [\n                /* @__PURE__ */ jsx(\"h3\", { children: \"Thời gian xuất bản\" }),\n                /* @__PURE__ */ jsx(\n                  RiArrowDropDownLine,\n                  {\n                    className: openSections.publishYears ? \"rotated\" : \"\"\n                  }\n                )\n              ]\n            }\n          ),\n          openSections.publishYears && /* @__PURE__ */ jsx(\"div\", { className: \"filter-options\", children: Array.from(\n            new Set(newProducts.map((p) => p.publishYear))\n          ).map((year) => /* @__PURE__ */ jsxs(\"label\", { className: \"filter-option\", children: [\n            /* @__PURE__ */ jsx(\n              \"input\",\n              {\n                type: \"checkbox\",\n                checked: selectedFilters.publishYears.includes(year),\n                onChange: (e) => {\n                  const newYears = e.target.checked ? [...selectedFilters.publishYears, year] : selectedFilters.publishYears.filter(\n                    (y) => y !== year\n                  );\n                  setSelectedFilters((prev) => ({\n                    ...prev,\n                    publishYears: newYears\n                  }));\n                }\n              }\n            ),\n            /* @__PURE__ */ jsx(\"span\", { children: year })\n          ] }, year)) })\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"filter-section\", children: [\n          /* @__PURE__ */ jsxs(\n            \"div\",\n            {\n              className: \"filter-header\",\n              onClick: () => toggleSection(\"priceRange\"),\n              children: [\n                /* @__PURE__ */ jsx(\"h3\", { children: \"Giá cả\" }),\n                /* @__PURE__ */ jsx(\n                  RiArrowDropDownLine,\n                  {\n                    className: openSections.priceRange ? \"rotated\" : \"\"\n                  }\n                )\n              ]\n            }\n          ),\n          openSections.priceRange && /* @__PURE__ */ jsxs(\"div\", { className: \"price-range-slider\", children: [\n            /* @__PURE__ */ jsxs(\"div\", { className: \"price-range-inputs\", children: [\n              /* @__PURE__ */ jsx(\n                \"input\",\n                {\n                  type: \"range\",\n                  min: priceRange.min,\n                  max: priceRange.max,\n                  value: selectedFilters.priceRange[0],\n                  onChange: (e) => {\n                    const minValue = parseInt(e.target.value);\n                    setSelectedFilters((prev) => ({\n                      ...prev,\n                      priceRange: [\n                        Math.min(minValue, prev.priceRange[1]),\n                        prev.priceRange[1]\n                      ]\n                    }));\n                  }\n                }\n              ),\n              /* @__PURE__ */ jsx(\n                \"input\",\n                {\n                  type: \"range\",\n                  min: priceRange.min,\n                  max: priceRange.max,\n                  value: selectedFilters.priceRange[1],\n                  onChange: (e) => {\n                    const maxValue = parseInt(e.target.value);\n                    setSelectedFilters((prev) => ({\n                      ...prev,\n                      priceRange: [\n                        prev.priceRange[0],\n                        Math.max(maxValue, prev.priceRange[0])\n                      ]\n                    }));\n                  }\n                }\n              )\n            ] }),\n            /* @__PURE__ */ jsxs(\"div\", { className: \"price-range-values\", children: [\n              /* @__PURE__ */ jsx(\"span\", { children: formatPrice(selectedFilters.priceRange[0]) }),\n              /* @__PURE__ */ jsx(\"span\", { children: formatPrice(selectedFilters.priceRange[1]) })\n            ] })\n          ] })\n        ] })\n      ] }),\n      /* @__PURE__ */ jsxs(\n        \"button\",\n        {\n          className: \"apply-filters-button\",\n          onClick: applyFilters,\n          disabled: previewCount === 0,\n          children: [\n            \"Kết quả (\",\n            previewCount,\n            \")\"\n          ]\n        }\n      )\n    ] })\n  ] });\n};\nexport default NewsPage;\n",
      "start": 1750746804505,
      "end": 1750746804850,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "C:/Users/.Freelancer/ONLINE/src/pages/NewsPage/NewsPage.jsx"
        ],
        "sourcesContent": [
          "import React, { useEffect, useState } from \"react\";\nimport { IoMdClose } from \"react-icons/io\";\nimport {\n  MdKeyboardArrowRight,\n  MdKeyboardDoubleArrowRight,\n} from \"react-icons/md\";\nimport { RiArrowDropDownLine } from \"react-icons/ri\";\nimport { Link } from \"react-router-dom\";\nimport {\n  getAnPhamImageUrl,\n  getInTheoYeuCauImageUrl,\n  getKhuyenTaiImageUrl,\n  getThoiTrangImageUrl,\n  getSanPhamTuThongImageUrl,\n  getHoiThaoNgheThuatImageUrl,\n  getThoCamImageUrl,\n} from \"../../utils/cloudinary\";\nimport { sampleProducts } from \"../CategoryDetail/CategoryDetail\";\nimport \"./NewsPage.css\";\n\n// Helper function to get image URL based on category\nconst getImageUrl = (category, filename) => {\n  switch (category) {\n    case \"khuyentai\":\n      return getKhuyenTaiImageUrl(filename);\n    case \"anpham\":\n      return getAnPhamImageUrl(filename);\n    case \"in-theo-yeu-cau\":\n      return getInTheoYeuCauImageUrl(filename);\n    case \"hoi-thao-nghe-thuat\":\n      return getHoiThaoNgheThuatImageUrl(filename);\n    case \"thoi-trang-va-phu-kien\":\n      return getThoiTrangImageUrl(filename);\n    case \"thocam\":\n      return getThoCamImageUrl(filename);\n    case \"sanphamtuthong\":\n      return getSanPhamTuThongImageUrl(filename);\n    default:\n      return \"\";\n  }\n};\n\nconst NewsPage = () => {\n  const [showFilters, setShowFilters] = useState(false);\n  const [sortOrder, setSortOrder] = useState(\"default\");\n  const [showSortDropdown, setShowSortDropdown] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [filteredProducts, setFilteredProducts] = useState([]);\n  const [filteredCount, setFilteredCount] = useState(0);\n  const [previewCount, setPreviewCount] = useState(0);\n\n  // Convert sampleProducts object into array\n  const allProducts = Object.values(sampleProducts).flat();\n\n  // Get new products\n  const newProducts = allProducts.filter((product) => product.isNew);\n\n  // Calculate min and max prices from products\n  const priceRange = {\n    min: 0,\n    max: Math.max(\n      ...newProducts.map((product) =>\n        parseInt(product.price.replace(/[^\\d]/g, \"\"))\n      )\n    ),\n  };\n\n  const [openSections, setOpenSections] = useState({\n    types: false,\n    artists: false,\n    publishYears: false,\n    priceRange: false,\n  });\n\n  const [selectedFilters, setSelectedFilters] = useState({\n    types: [],\n    artists: [],\n    publishYears: [],\n    priceRange: [priceRange.min, priceRange.max],\n  });\n\n  // Format price for display\n  const formatPrice = (price) => {\n    return new Intl.NumberFormat(\"vi-VN\", {\n      style: \"currency\",\n      currency: \"VND\",\n    }).format(price);\n  };\n\n  // Filter products based on current filters\n  const filterProducts = (products, filters) => {\n    return products.filter((product) => {\n      const typeMatch =\n        filters.types.length === 0 || filters.types.includes(product.type);\n      const artistMatch =\n        filters.artists.length === 0 ||\n        filters.artists.includes(product.artist);\n      const yearMatch =\n        filters.publishYears.length === 0 ||\n        filters.publishYears.includes(product.publishYear);\n      const price = parseInt(product.price.replace(/[^\\d]/g, \"\"));\n      const priceMatch =\n        price >= filters.priceRange[0] && price <= filters.priceRange[1];\n\n      return typeMatch && artistMatch && yearMatch && priceMatch;\n    });\n  };\n\n  // Update filtered products when filters change\n  useEffect(() => {\n    const filtered = filterProducts(newProducts, selectedFilters);\n    setPreviewCount(filtered.length);\n  }, [selectedFilters]);\n\n  // Apply filters\n  const applyFilters = () => {\n    const filtered = filterProducts(newProducts, selectedFilters);\n    setFilteredProducts(filtered);\n    setFilteredCount(filtered.length);\n    setShowFilters(false);\n    setCurrentPage(1);\n  };\n\n  // Reset filters\n  const resetFilters = () => {\n    const initialFilters = {\n      types: [],\n      artists: [],\n      publishYears: [],\n      priceRange: [priceRange.min, priceRange.max],\n    };\n    setSelectedFilters(initialFilters);\n    setFilteredProducts(newProducts);\n    setFilteredCount(newProducts.length);\n    setPreviewCount(newProducts.length);\n    setCurrentPage(1);\n  };\n\n  // Initialize filtered products\n  useEffect(() => {\n    setFilteredProducts(newProducts);\n    setFilteredCount(newProducts.length);\n    setPreviewCount(newProducts.length);\n  }, []);\n\n  // Handle sort change\n  const handleSortChange = (order) => {\n    setSortOrder(order);\n    setShowSortDropdown(false);\n\n    const sorted = [...filteredProducts].sort((a, b) => {\n      if (order === \"default\") {\n        return a.id - b.id;\n      }\n      const priceA = parseInt(a.price.replace(/\\D/g, \"\"));\n      const priceB = parseInt(b.price.replace(/\\D/g, \"\"));\n      return order === \"asc\" ? priceA - priceB : priceB - priceA;\n    });\n    setFilteredProducts(sorted);\n  };\n\n  // Pagination\n  const productsPerPage = 10;\n  const totalPages = Math.ceil(filteredProducts.length / productsPerPage);\n  const currentProducts = filteredProducts.slice(\n    (currentPage - 1) * productsPerPage,\n    currentPage * productsPerPage\n  );\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n    window.scrollTo(0, 0);\n  };\n\n  // Toggle section open/close\n  const toggleSection = (section) => {\n    setOpenSections((prev) => ({\n      ...prev,\n      [section]: !prev[section],\n    }));\n  };\n\n  return (\n    <div className=\"news-page\">\n      <h1 className=\"news-page-title\">Sản phẩm mới</h1>\n\n      <div className=\"sort-news\">\n        <div className=\"total-products\">\n          <span className=\"total-count\">{filteredCount}</span>\n          <span>sản phẩm</span>\n        </div>\n        <div className=\"sort-dropdown-container\">\n          <div\n            className={`sort-dropdown-header ${\n              showSortDropdown ? \"active\" : \"\"\n            }`}\n            onClick={() => setShowSortDropdown(!showSortDropdown)}\n          >\n            <span>\n              Sắp xếp theo:{\" \"}\n              {sortOrder === \"asc\"\n                ? \"giá tăng dần\"\n                : sortOrder === \"desc\"\n                ? \"giá giảm dần\"\n                : \"lựa chọn của chúng tôi\"}\n            </span>\n            <RiArrowDropDownLine\n              className={showSortDropdown ? \"rotated\" : \"\"}\n            />\n          </div>\n          {showSortDropdown && (\n            <div className=\"sort-dropdown-menu\">\n              <div\n                className={`sort-option ${\n                  sortOrder === \"default\" ? \"active\" : \"\"\n                }`}\n                onClick={() => handleSortChange(\"default\")}\n              >\n                <strong>lựa chọn của chúng tôi</strong>\n              </div>\n              <div\n                className={`sort-option ${sortOrder === \"asc\" ? \"active\" : \"\"}`}\n                onClick={() => handleSortChange(\"asc\")}\n              >\n                giá tăng dần\n              </div>\n              <div\n                className={`sort-option ${\n                  sortOrder === \"desc\" ? \"active\" : \"\"\n                }`}\n                onClick={() => handleSortChange(\"desc\")}\n              >\n                giá giảm dần\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <section className=\"card-image-news\">\n        <div className=\"card-grid-news\">\n          {currentProducts.map((product) => (\n            <div key={product.id} className=\"card-item-news\">\n              <Link to={`/product/${product.id}`}>\n                <img\n                  src={getImageUrl(product.category, product.image)}\n                  alt={product.title}\n                  className=\"card-image\"\n                />\n                <div className=\"news-content\">\n                  <h3 className=\"card-title\">{product.title}</h3>\n                  <p className=\"card-price\">{product.price}</p>\n                </div>\n              </Link>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      <div className=\"result-pager-news\">\n        {Array.from({ length: totalPages }, (_, i) => (\n          <button\n            key={i + 1}\n            className={currentPage === i + 1 ? \"active\" : \"\"}\n            onClick={() => handlePageChange(i + 1)}\n          >\n            {i + 1}\n          </button>\n        ))}\n        <button\n          onClick={() =>\n            handlePageChange(Math.min(currentPage + 1, totalPages))\n          }\n          disabled={currentPage === totalPages}\n        >\n          <MdKeyboardArrowRight />\n        </button>\n        <button\n          onClick={() =>\n            handlePageChange(Math.min(currentPage + 10, totalPages))\n          }\n          disabled={currentPage + 10 > totalPages}\n        >\n          <MdKeyboardDoubleArrowRight />\n        </button>\n      </div>\n\n      <button\n        className=\"filter-button\"\n        onClick={() => {\n          setShowFilters(true);\n          if (!showFilters) {\n            resetFilters();\n          }\n        }}\n      >\n        {showFilters ? `Kết quả (${previewCount})` : \"Bộ lọc\"}\n      </button>\n\n      {showFilters && (\n        <div className=\"search-filters-modal-news\">\n          <div className=\"search-filters-content\">\n            <div className=\"search-filters-header\">\n              <h2 className=\"search-filters-title\">Bộ lọc</h2>\n              <button\n                className=\"close-filters-button\"\n                onClick={() => setShowFilters(false)}\n                aria-label=\"Đóng bộ lọc\"\n              >\n                <IoMdClose />\n              </button>\n            </div>\n\n            {/* Types Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"types\")}\n              >\n                <h3>Thể loại</h3>\n                <RiArrowDropDownLine\n                  className={openSections.types ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.types && (\n                <div className=\"filter-options\">\n                  {Array.from(new Set(newProducts.map((p) => p.type))).map(\n                    (type) => (\n                      <label key={type} className=\"filter-option\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedFilters.types.includes(type)}\n                          onChange={(e) => {\n                            const newTypes = e.target.checked\n                              ? [...selectedFilters.types, type]\n                              : selectedFilters.types.filter((t) => t !== type);\n                            setSelectedFilters((prev) => ({\n                              ...prev,\n                              types: newTypes,\n                            }));\n                          }}\n                        />\n                        <span>{type}</span>\n                      </label>\n                    )\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Artists Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"artists\")}\n              >\n                <h3>Nghệ sĩ</h3>\n                <RiArrowDropDownLine\n                  className={openSections.artists ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.artists && (\n                <div className=\"filter-options\">\n                  {Array.from(new Set(newProducts.map((p) => p.artist))).map(\n                    (artist) => (\n                      <label key={artist} className=\"filter-option\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedFilters.artists.includes(artist)}\n                          onChange={(e) => {\n                            const newArtists = e.target.checked\n                              ? [...selectedFilters.artists, artist]\n                              : selectedFilters.artists.filter(\n                                  (a) => a !== artist\n                                );\n                            setSelectedFilters((prev) => ({\n                              ...prev,\n                              artists: newArtists,\n                            }));\n                          }}\n                        />\n                        <span>{artist}</span>\n                      </label>\n                    )\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Publish Years Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"publishYears\")}\n              >\n                <h3>Thời gian xuất bản</h3>\n                <RiArrowDropDownLine\n                  className={openSections.publishYears ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.publishYears && (\n                <div className=\"filter-options\">\n                  {Array.from(\n                    new Set(newProducts.map((p) => p.publishYear))\n                  ).map((year) => (\n                    <label key={year} className=\"filter-option\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedFilters.publishYears.includes(year)}\n                        onChange={(e) => {\n                          const newYears = e.target.checked\n                            ? [...selectedFilters.publishYears, year]\n                            : selectedFilters.publishYears.filter(\n                                (y) => y !== year\n                              );\n                          setSelectedFilters((prev) => ({\n                            ...prev,\n                            publishYears: newYears,\n                          }));\n                        }}\n                      />\n                      <span>{year}</span>\n                    </label>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Price Range Section */}\n            <div className=\"filter-section\">\n              <div\n                className=\"filter-header\"\n                onClick={() => toggleSection(\"priceRange\")}\n              >\n                <h3>Giá cả</h3>\n                <RiArrowDropDownLine\n                  className={openSections.priceRange ? \"rotated\" : \"\"}\n                />\n              </div>\n              {openSections.priceRange && (\n                <div className=\"price-range-slider\">\n                  <div className=\"price-range-inputs\">\n                    <input\n                      type=\"range\"\n                      min={priceRange.min}\n                      max={priceRange.max}\n                      value={selectedFilters.priceRange[0]}\n                      onChange={(e) => {\n                        const minValue = parseInt(e.target.value);\n                        setSelectedFilters((prev) => ({\n                          ...prev,\n                          priceRange: [\n                            Math.min(minValue, prev.priceRange[1]),\n                            prev.priceRange[1],\n                          ],\n                        }));\n                      }}\n                    />\n                    <input\n                      type=\"range\"\n                      min={priceRange.min}\n                      max={priceRange.max}\n                      value={selectedFilters.priceRange[1]}\n                      onChange={(e) => {\n                        const maxValue = parseInt(e.target.value);\n                        setSelectedFilters((prev) => ({\n                          ...prev,\n                          priceRange: [\n                            prev.priceRange[0],\n                            Math.max(maxValue, prev.priceRange[0]),\n                          ],\n                        }));\n                      }}\n                    />\n                  </div>\n                  <div className=\"price-range-values\">\n                    <span>{formatPrice(selectedFilters.priceRange[0])}</span>\n                    <span>{formatPrice(selectedFilters.priceRange[1])}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <button\n            className=\"apply-filters-button\"\n            onClick={applyFilters}\n            disabled={previewCount === 0}\n          >\n            Kết quả ({previewCount})\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NewsPage;\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750746804850,
      "end": 1750746804850,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1750746804850,
      "end": 1750746804850,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750746804850,
      "end": 1750746804850,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1750746804850,
      "end": 1750746804850,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1750746804850,
      "end": 1750746804850,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750746804850,
      "end": 1750746804850,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750746804850,
      "end": 1750746804850,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750746804850,
      "end": 1750746804851,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750746804851,
      "end": 1750746804851,
      "order": "normal"
    }
  ]
}
