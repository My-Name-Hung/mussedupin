{
  "resolvedId": "C:/Users/.Freelancer/ONLINE/node_modules/framer-motion/dist/es/utils/use-instant-transition.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { frame } from 'motion-dom';\nimport { MotionGlobalConfig } from 'motion-utils';\nimport { useRef, useEffect } from 'react';\nimport { useInstantLayoutTransition } from '../projection/use-instant-layout-transition.mjs';\nimport { useForceUpdate } from './use-force-update.mjs';\n\nfunction useInstantTransition() {\n    const [forceUpdate, forcedRenderCount] = useForceUpdate();\n    const startInstantLayoutTransition = useInstantLayoutTransition();\n    const unlockOnFrameRef = useRef(-1);\n    useEffect(() => {\n        /**\n         * Unblock after two animation frames, otherwise this will unblock too soon.\n         */\n        frame.postRender(() => frame.postRender(() => {\n            /**\n             * If the callback has been called again after the effect\n             * triggered this 2 frame delay, don't unblock animations. This\n             * prevents the previous effect from unblocking the current\n             * instant transition too soon. This becomes more likely when\n             * used in conjunction with React.startTransition().\n             */\n            if (forcedRenderCount !== unlockOnFrameRef.current)\n                return;\n            MotionGlobalConfig.instantAnimations = false;\n        }));\n    }, [forcedRenderCount]);\n    return (callback) => {\n        startInstantLayoutTransition(() => {\n            MotionGlobalConfig.instantAnimations = true;\n            forceUpdate();\n            callback();\n            unlockOnFrameRef.current = forcedRenderCount + 1;\n        });\n    };\n}\nfunction disableInstantTransitions() {\n    MotionGlobalConfig.instantAnimations = false;\n}\n\nexport { disableInstantTransitions, useInstantTransition };\n",
      "start": 1750746812963,
      "end": 1750746813111,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1750746813111,
      "end": 1750746813111,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1750746813111,
      "end": 1750746813111,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1750746813111,
      "end": 1750746813111,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1750746813111,
      "end": 1750746813111,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750746813111,
      "end": 1750746813111,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1750746813111,
      "end": 1750746813111,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1750746813111,
      "end": 1750746813111,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750746813111,
      "end": 1750746813111,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750746813111,
      "end": 1750746813111,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750746813111,
      "end": 1750746813111,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750746813111,
      "end": 1750746813111,
      "order": "normal"
    }
  ]
}
