{
  "resolvedId": "C:/Users/.Freelancer/ONLINE/src/components/Auth/RegisterModal.jsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import React, { useEffect, useState } from \"react\";\nimport { FaEye, FaEyeSlash, FaTimes } from \"react-icons/fa\";\nimport Select from \"react-select\";\nimport \"./RegisterModal.css\";\nimport SuccessModal from \"./SuccessModal\";\n\nconst RegisterModal = ({ isOpen, onClose }) => {\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    phone: \"\",\n    address: {\n      street: \"\",\n      city: \"\",\n      state: \"\",\n    },\n  });\n\n  const [provinces, setProvinces] = useState([]);\n  const [districts, setDistricts] = useState([]);\n  const [wards, setWards] = useState([]);\n  const [selectedProvince, setSelectedProvince] = useState(\"\");\n  const [selectedDistrict, setSelectedDistrict] = useState(\"\");\n  const [selectedWard, setSelectedWard] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n\n  // Fetch provinces on component mount\n  useEffect(() => {\n    const fetchProvinces = async () => {\n      try {\n        const response = await fetch(\n          \"https://provinces.open-api.vn/api/?depth=1\"\n        );\n        const data = await response.json();\n        setProvinces(data);\n      } catch (err) {\n        console.error(\"Error fetching provinces:\", err);\n      }\n    };\n    fetchProvinces();\n  }, []);\n\n  // Fetch districts when province changes\n  useEffect(() => {\n    const fetchDistricts = async () => {\n      if (selectedProvince) {\n        try {\n          const response = await fetch(\n            `https://provinces.open-api.vn/api/p/${selectedProvince}?depth=2`\n          );\n          const data = await response.json();\n          setDistricts(data.districts);\n          setSelectedDistrict(\"\");\n          setSelectedWard(\"\");\n          setWards([]);\n        } catch (err) {\n          console.error(\"Error fetching districts:\", err);\n        }\n      }\n    };\n    fetchDistricts();\n  }, [selectedProvince]);\n\n  // Fetch wards when district changes\n  useEffect(() => {\n    const fetchWards = async () => {\n      if (selectedDistrict) {\n        try {\n          const response = await fetch(\n            `https://provinces.open-api.vn/api/d/${selectedDistrict}?depth=2`\n          );\n          const data = await response.json();\n          setWards(data.wards);\n          setSelectedWard(\"\");\n        } catch (err) {\n          console.error(\"Error fetching wards:\", err);\n        }\n      }\n    };\n    fetchWards();\n  }, [selectedDistrict]);\n\n  // Update address when selections change\n  useEffect(() => {\n    const selectedProvinceName =\n      provinces.find((p) => p.code === parseInt(selectedProvince))?.name || \"\";\n    const selectedDistrictName =\n      districts.find((d) => d.code === parseInt(selectedDistrict))?.name || \"\";\n    const selectedWardName =\n      wards.find((w) => w.code === parseInt(selectedWard))?.name || \"\";\n\n    setFormData((prev) => ({\n      ...prev,\n      address: {\n        ...prev.address,\n        state: selectedProvinceName,\n        city: selectedDistrictName,\n        street: selectedWardName ? `${selectedWardName}` : \"\",\n      },\n    }));\n  }, [\n    selectedProvince,\n    selectedDistrict,\n    selectedWard,\n    provinces,\n    districts,\n    wards,\n  ]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name.includes(\".\")) {\n      const [parent, child] = name.split(\".\");\n      setFormData((prev) => ({\n        ...prev,\n        [parent]: {\n          ...prev[parent],\n          [child]: value,\n        },\n      }));\n    } else {\n      setFormData((prev) => ({\n        ...prev,\n        [name]: value,\n      }));\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n\n    if (formData.password !== formData.confirmPassword) {\n      setError(\"Mật khẩu không khớp\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        \"https://mussedupin.onrender.com/api/auth/signup\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            fullName: formData.fullName,\n            email: formData.email,\n            password: formData.password,\n            phone: formData.phone,\n            address: formData.address,\n          }),\n        }\n      );\n\n      const data = await response.json();\n\n      if (data.success) {\n        setSuccess(data.message);\n        localStorage.setItem(\"token\", data.token);\n        localStorage.setItem(\"user\", JSON.stringify(data.user));\n\n        // Hiển thị modal thành công\n        setShowSuccessModal(true);\n\n        // Đóng modal đăng ký sau 2.5s\n        setTimeout(() => {\n          onClose();\n          window.location.reload();\n        }, 2500);\n      } else {\n        setError(data.message);\n      }\n    } catch (err) {\n      setError(\"Đăng ký thất bại. Vui lòng thử lại sau.\");\n    }\n  };\n\n  // Custom styles for react-select\n  const selectStyles = {\n    control: (base) => ({\n      ...base,\n      minHeight: \"44px\",\n      backgroundColor: \"rgba(255, 255, 255, 0.9)\",\n      borderColor: \"#2c2f11\",\n      \"&:hover\": {\n        borderColor: \"#3d4117\",\n      },\n    }),\n    option: (base, { isFocused, isSelected }) => ({\n      ...base,\n      backgroundColor: isSelected\n        ? \"#2c2f11\"\n        : isFocused\n        ? \"rgba(44, 47, 17, 0.1)\"\n        : \"white\",\n      color: isSelected ? \"white\" : \"#2c2f11\",\n      \"&:active\": {\n        backgroundColor: \"#2c2f11\",\n      },\n    }),\n    placeholder: (base) => ({\n      ...base,\n      color: \"#6b7280\",\n    }),\n    singleValue: (base) => ({\n      ...base,\n      color: \"#2c2f11\",\n    }),\n    menu: (base) => ({\n      ...base,\n      backgroundColor: \"white\",\n      zIndex: 9999,\n    }),\n  };\n\n  // Format options for react-select\n  const provinceOptions = provinces.map((province) => ({\n    value: province.code,\n    label: province.name,\n  }));\n\n  const districtOptions = districts.map((district) => ({\n    value: district.code,\n    label: district.name,\n  }));\n\n  const wardOptions = wards.map((ward) => ({\n    value: ward.code,\n    label: ward.name,\n  }));\n\n  // Handle select changes\n  const handleProvinceChange = (selectedOption) => {\n    setSelectedProvince(selectedOption ? selectedOption.value.toString() : \"\");\n  };\n\n  const handleDistrictChange = (selectedOption) => {\n    setSelectedDistrict(selectedOption ? selectedOption.value.toString() : \"\");\n  };\n\n  const handleWardChange = (selectedOption) => {\n    setSelectedWard(selectedOption ? selectedOption.value.toString() : \"\");\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      <div className=\"modal-overlay\">\n        <div className=\"register-modal-container\">\n          <button className=\"close-button\" onClick={onClose}>\n            <FaTimes />\n          </button>\n\n          <h2 className=\"register-modal-title\">Đăng ký tài khoản</h2>\n          <p className=\"register-modal-subtitle\">\n            Tạo tài khoản để mua sắm dễ dàng hơn\n          </p>\n\n          {error && <div className=\"error-message\">{error}</div>}\n          {success && <div className=\"success-message\">{success}</div>}\n\n          <form onSubmit={handleSubmit} className=\"register-form\">\n            <div className=\"form-group\">\n              <label>* Họ và tên</label>\n              <input\n                type=\"text\"\n                name=\"fullName\"\n                value={formData.fullName}\n                onChange={handleChange}\n                required\n                placeholder=\"Họ và tên\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Email</label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                required\n                placeholder=\"Email\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Số điện thoại</label>\n              <input\n                type=\"tel\"\n                name=\"phone\"\n                value={formData.phone}\n                onChange={handleChange}\n                required\n                placeholder=\"Số điện thoại\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Mật khẩu</label>\n              <div className=\"password-input\">\n                <input\n                  type={showPassword ? \"text\" : \"password\"}\n                  name=\"password\"\n                  value={formData.password}\n                  onChange={handleChange}\n                  required\n                  placeholder=\"Mật khẩu\"\n                  minLength=\"6\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"password-toggle\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? <FaEyeSlash /> : <FaEye />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Xác nhận mật khẩu</label>\n              <div className=\"password-input\">\n                <input\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  name=\"confirmPassword\"\n                  value={formData.confirmPassword}\n                  onChange={handleChange}\n                  required\n                  placeholder=\"Xác nhận mật khẩu\"\n                  minLength=\"6\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"password-toggle\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                >\n                  {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Tỉnh/Thành phố</label>\n              <Select\n                value={provinceOptions.find(\n                  (option) => option.value === parseInt(selectedProvince)\n                )}\n                onChange={handleProvinceChange}\n                options={provinceOptions}\n                placeholder=\"Tìm kiếm Tỉnh/Thành phố\"\n                noOptionsMessage={() => \"Không tìm thấy kết quả\"}\n                styles={selectStyles}\n                isSearchable={true}\n                isClearable={true}\n                className=\"react-select-container\"\n                classNamePrefix=\"react-select\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Quận/Huyện</label>\n              <Select\n                value={districtOptions.find(\n                  (option) => option.value === parseInt(selectedDistrict)\n                )}\n                onChange={handleDistrictChange}\n                options={districtOptions}\n                placeholder=\"Tìm kiếm Quận/Huyện\"\n                noOptionsMessage={() => \"Không tìm thấy kết quả\"}\n                styles={selectStyles}\n                isSearchable={true}\n                isClearable={true}\n                isDisabled={!selectedProvince}\n                className=\"react-select-container\"\n                classNamePrefix=\"react-select\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Phường/Xã</label>\n              <Select\n                value={wardOptions.find(\n                  (option) => option.value === parseInt(selectedWard)\n                )}\n                onChange={handleWardChange}\n                options={wardOptions}\n                placeholder=\"Tìm kiếm Phường/Xã\"\n                noOptionsMessage={() => \"Không tìm thấy kết quả\"}\n                styles={selectStyles}\n                isSearchable={true}\n                isClearable={true}\n                isDisabled={!selectedDistrict}\n                className=\"react-select-container\"\n                classNamePrefix=\"react-select\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Số nhà, tên đường</label>\n              <input\n                type=\"text\"\n                name=\"address.street\"\n                value={formData.address.street}\n                onChange={handleChange}\n                placeholder=\"Số nhà, tên đường\"\n              />\n            </div>\n\n            <button type=\"submit\" className=\"register-button\">\n              Đăng ký\n            </button>\n          </form>\n        </div>\n      </div>\n\n      <SuccessModal\n        isOpen={showSuccessModal}\n        message=\"Chào mừng bạn đến với cửa hàng của chúng tôi!\"\n        onClose={() => setShowSuccessModal(false)}\n        title=\"Đăng ký thành công!\"\n      />\n    </>\n  );\n};\n\nexport default RegisterModal;\n",
      "start": 1751302174139,
      "end": 1751302174258,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1751302174259,
      "end": 1751302174259,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport { FaEye, FaEyeSlash, FaTimes } from \"react-icons/fa\";\nimport Select from \"react-select\";\nimport \"./RegisterModal.css\";\nimport SuccessModal from \"./SuccessModal\";\nconst RegisterModal = ({ isOpen, onClose }) => {\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    phone: \"\",\n    address: {\n      street: \"\",\n      city: \"\",\n      state: \"\"\n    }\n  });\n  const [provinces, setProvinces] = useState([]);\n  const [districts, setDistricts] = useState([]);\n  const [wards, setWards] = useState([]);\n  const [selectedProvince, setSelectedProvince] = useState(\"\");\n  const [selectedDistrict, setSelectedDistrict] = useState(\"\");\n  const [selectedWard, setSelectedWard] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  useEffect(() => {\n    const fetchProvinces = async () => {\n      try {\n        const response = await fetch(\n          \"https://provinces.open-api.vn/api/?depth=1\"\n        );\n        const data = await response.json();\n        setProvinces(data);\n      } catch (err) {\n        console.error(\"Error fetching provinces:\", err);\n      }\n    };\n    fetchProvinces();\n  }, []);\n  useEffect(() => {\n    const fetchDistricts = async () => {\n      if (selectedProvince) {\n        try {\n          const response = await fetch(\n            `https://provinces.open-api.vn/api/p/${selectedProvince}?depth=2`\n          );\n          const data = await response.json();\n          setDistricts(data.districts);\n          setSelectedDistrict(\"\");\n          setSelectedWard(\"\");\n          setWards([]);\n        } catch (err) {\n          console.error(\"Error fetching districts:\", err);\n        }\n      }\n    };\n    fetchDistricts();\n  }, [selectedProvince]);\n  useEffect(() => {\n    const fetchWards = async () => {\n      if (selectedDistrict) {\n        try {\n          const response = await fetch(\n            `https://provinces.open-api.vn/api/d/${selectedDistrict}?depth=2`\n          );\n          const data = await response.json();\n          setWards(data.wards);\n          setSelectedWard(\"\");\n        } catch (err) {\n          console.error(\"Error fetching wards:\", err);\n        }\n      }\n    };\n    fetchWards();\n  }, [selectedDistrict]);\n  useEffect(() => {\n    const selectedProvinceName = provinces.find((p) => p.code === parseInt(selectedProvince))?.name || \"\";\n    const selectedDistrictName = districts.find((d) => d.code === parseInt(selectedDistrict))?.name || \"\";\n    const selectedWardName = wards.find((w) => w.code === parseInt(selectedWard))?.name || \"\";\n    setFormData((prev) => ({\n      ...prev,\n      address: {\n        ...prev.address,\n        state: selectedProvinceName,\n        city: selectedDistrictName,\n        street: selectedWardName ? `${selectedWardName}` : \"\"\n      }\n    }));\n  }, [\n    selectedProvince,\n    selectedDistrict,\n    selectedWard,\n    provinces,\n    districts,\n    wards\n  ]);\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name.includes(\".\")) {\n      const [parent, child] = name.split(\".\");\n      setFormData((prev) => ({\n        ...prev,\n        [parent]: {\n          ...prev[parent],\n          [child]: value\n        }\n      }));\n    } else {\n      setFormData((prev) => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n    if (formData.password !== formData.confirmPassword) {\n      setError(\"Mật khẩu không khớp\");\n      return;\n    }\n    try {\n      const response = await fetch(\n        \"https://mussedupin.onrender.com/api/auth/signup\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            fullName: formData.fullName,\n            email: formData.email,\n            password: formData.password,\n            phone: formData.phone,\n            address: formData.address\n          })\n        }\n      );\n      const data = await response.json();\n      if (data.success) {\n        setSuccess(data.message);\n        localStorage.setItem(\"token\", data.token);\n        localStorage.setItem(\"user\", JSON.stringify(data.user));\n        setShowSuccessModal(true);\n        setTimeout(() => {\n          onClose();\n          window.location.reload();\n        }, 2500);\n      } else {\n        setError(data.message);\n      }\n    } catch (err) {\n      setError(\"Đăng ký thất bại. Vui lòng thử lại sau.\");\n    }\n  };\n  const selectStyles = {\n    control: (base) => ({\n      ...base,\n      minHeight: \"44px\",\n      backgroundColor: \"rgba(255, 255, 255, 0.9)\",\n      borderColor: \"#2c2f11\",\n      \"&:hover\": {\n        borderColor: \"#3d4117\"\n      }\n    }),\n    option: (base, { isFocused, isSelected }) => ({\n      ...base,\n      backgroundColor: isSelected ? \"#2c2f11\" : isFocused ? \"rgba(44, 47, 17, 0.1)\" : \"white\",\n      color: isSelected ? \"white\" : \"#2c2f11\",\n      \"&:active\": {\n        backgroundColor: \"#2c2f11\"\n      }\n    }),\n    placeholder: (base) => ({\n      ...base,\n      color: \"#6b7280\"\n    }),\n    singleValue: (base) => ({\n      ...base,\n      color: \"#2c2f11\"\n    }),\n    menu: (base) => ({\n      ...base,\n      backgroundColor: \"white\",\n      zIndex: 9999\n    })\n  };\n  const provinceOptions = provinces.map((province) => ({\n    value: province.code,\n    label: province.name\n  }));\n  const districtOptions = districts.map((district) => ({\n    value: district.code,\n    label: district.name\n  }));\n  const wardOptions = wards.map((ward) => ({\n    value: ward.code,\n    label: ward.name\n  }));\n  const handleProvinceChange = (selectedOption) => {\n    setSelectedProvince(selectedOption ? selectedOption.value.toString() : \"\");\n  };\n  const handleDistrictChange = (selectedOption) => {\n    setSelectedDistrict(selectedOption ? selectedOption.value.toString() : \"\");\n  };\n  const handleWardChange = (selectedOption) => {\n    setSelectedWard(selectedOption ? selectedOption.value.toString() : \"\");\n  };\n  if (!isOpen) return null;\n  return /* @__PURE__ */ jsxs(Fragment, { children: [\n    /* @__PURE__ */ jsx(\"div\", { className: \"modal-overlay\", children: /* @__PURE__ */ jsxs(\"div\", { className: \"register-modal-container\", children: [\n      /* @__PURE__ */ jsx(\"button\", { className: \"close-button\", onClick: onClose, children: /* @__PURE__ */ jsx(FaTimes, {}) }),\n      /* @__PURE__ */ jsx(\"h2\", { className: \"register-modal-title\", children: \"Đăng ký tài khoản\" }),\n      /* @__PURE__ */ jsx(\"p\", { className: \"register-modal-subtitle\", children: \"Tạo tài khoản để mua sắm dễ dàng hơn\" }),\n      error && /* @__PURE__ */ jsx(\"div\", { className: \"error-message\", children: error }),\n      success && /* @__PURE__ */ jsx(\"div\", { className: \"success-message\", children: success }),\n      /* @__PURE__ */ jsxs(\"form\", { onSubmit: handleSubmit, className: \"register-form\", children: [\n        /* @__PURE__ */ jsxs(\"div\", { className: \"form-group\", children: [\n          /* @__PURE__ */ jsx(\"label\", { children: \"* Họ và tên\" }),\n          /* @__PURE__ */ jsx(\n            \"input\",\n            {\n              type: \"text\",\n              name: \"fullName\",\n              value: formData.fullName,\n              onChange: handleChange,\n              required: true,\n              placeholder: \"Họ và tên\"\n            }\n          )\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"form-group\", children: [\n          /* @__PURE__ */ jsx(\"label\", { children: \"* Email\" }),\n          /* @__PURE__ */ jsx(\n            \"input\",\n            {\n              type: \"email\",\n              name: \"email\",\n              value: formData.email,\n              onChange: handleChange,\n              required: true,\n              placeholder: \"Email\"\n            }\n          )\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"form-group\", children: [\n          /* @__PURE__ */ jsx(\"label\", { children: \"* Số điện thoại\" }),\n          /* @__PURE__ */ jsx(\n            \"input\",\n            {\n              type: \"tel\",\n              name: \"phone\",\n              value: formData.phone,\n              onChange: handleChange,\n              required: true,\n              placeholder: \"Số điện thoại\"\n            }\n          )\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"form-group\", children: [\n          /* @__PURE__ */ jsx(\"label\", { children: \"* Mật khẩu\" }),\n          /* @__PURE__ */ jsxs(\"div\", { className: \"password-input\", children: [\n            /* @__PURE__ */ jsx(\n              \"input\",\n              {\n                type: showPassword ? \"text\" : \"password\",\n                name: \"password\",\n                value: formData.password,\n                onChange: handleChange,\n                required: true,\n                placeholder: \"Mật khẩu\",\n                minLength: \"6\"\n              }\n            ),\n            /* @__PURE__ */ jsx(\n              \"button\",\n              {\n                type: \"button\",\n                className: \"password-toggle\",\n                onClick: () => setShowPassword(!showPassword),\n                children: showPassword ? /* @__PURE__ */ jsx(FaEyeSlash, {}) : /* @__PURE__ */ jsx(FaEye, {})\n              }\n            )\n          ] })\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"form-group\", children: [\n          /* @__PURE__ */ jsx(\"label\", { children: \"* Xác nhận mật khẩu\" }),\n          /* @__PURE__ */ jsxs(\"div\", { className: \"password-input\", children: [\n            /* @__PURE__ */ jsx(\n              \"input\",\n              {\n                type: showConfirmPassword ? \"text\" : \"password\",\n                name: \"confirmPassword\",\n                value: formData.confirmPassword,\n                onChange: handleChange,\n                required: true,\n                placeholder: \"Xác nhận mật khẩu\",\n                minLength: \"6\"\n              }\n            ),\n            /* @__PURE__ */ jsx(\n              \"button\",\n              {\n                type: \"button\",\n                className: \"password-toggle\",\n                onClick: () => setShowConfirmPassword(!showConfirmPassword),\n                children: showConfirmPassword ? /* @__PURE__ */ jsx(FaEyeSlash, {}) : /* @__PURE__ */ jsx(FaEye, {})\n              }\n            )\n          ] })\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"form-group\", children: [\n          /* @__PURE__ */ jsx(\"label\", { children: \"* Tỉnh/Thành phố\" }),\n          /* @__PURE__ */ jsx(\n            Select,\n            {\n              value: provinceOptions.find(\n                (option) => option.value === parseInt(selectedProvince)\n              ),\n              onChange: handleProvinceChange,\n              options: provinceOptions,\n              placeholder: \"Tìm kiếm Tỉnh/Thành phố\",\n              noOptionsMessage: () => \"Không tìm thấy kết quả\",\n              styles: selectStyles,\n              isSearchable: true,\n              isClearable: true,\n              className: \"react-select-container\",\n              classNamePrefix: \"react-select\"\n            }\n          )\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"form-group\", children: [\n          /* @__PURE__ */ jsx(\"label\", { children: \"* Quận/Huyện\" }),\n          /* @__PURE__ */ jsx(\n            Select,\n            {\n              value: districtOptions.find(\n                (option) => option.value === parseInt(selectedDistrict)\n              ),\n              onChange: handleDistrictChange,\n              options: districtOptions,\n              placeholder: \"Tìm kiếm Quận/Huyện\",\n              noOptionsMessage: () => \"Không tìm thấy kết quả\",\n              styles: selectStyles,\n              isSearchable: true,\n              isClearable: true,\n              isDisabled: !selectedProvince,\n              className: \"react-select-container\",\n              classNamePrefix: \"react-select\"\n            }\n          )\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"form-group\", children: [\n          /* @__PURE__ */ jsx(\"label\", { children: \"* Phường/Xã\" }),\n          /* @__PURE__ */ jsx(\n            Select,\n            {\n              value: wardOptions.find(\n                (option) => option.value === parseInt(selectedWard)\n              ),\n              onChange: handleWardChange,\n              options: wardOptions,\n              placeholder: \"Tìm kiếm Phường/Xã\",\n              noOptionsMessage: () => \"Không tìm thấy kết quả\",\n              styles: selectStyles,\n              isSearchable: true,\n              isClearable: true,\n              isDisabled: !selectedDistrict,\n              className: \"react-select-container\",\n              classNamePrefix: \"react-select\"\n            }\n          )\n        ] }),\n        /* @__PURE__ */ jsxs(\"div\", { className: \"form-group\", children: [\n          /* @__PURE__ */ jsx(\"label\", { children: \"Số nhà, tên đường\" }),\n          /* @__PURE__ */ jsx(\n            \"input\",\n            {\n              type: \"text\",\n              name: \"address.street\",\n              value: formData.address.street,\n              onChange: handleChange,\n              placeholder: \"Số nhà, tên đường\"\n            }\n          )\n        ] }),\n        /* @__PURE__ */ jsx(\"button\", { type: \"submit\", className: \"register-button\", children: \"Đăng ký\" })\n      ] })\n    ] }) }),\n    /* @__PURE__ */ jsx(\n      SuccessModal,\n      {\n        isOpen: showSuccessModal,\n        message: \"Chào mừng bạn đến với cửa hàng của chúng tôi!\",\n        onClose: () => setShowSuccessModal(false),\n        title: \"Đăng ký thành công!\"\n      }\n    )\n  ] });\n};\nexport default RegisterModal;\n",
      "start": 1751302174259,
      "end": 1751302174435,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "C:/Users/.Freelancer/ONLINE/src/components/Auth/RegisterModal.jsx"
        ],
        "sourcesContent": [
          "import React, { useEffect, useState } from \"react\";\nimport { FaEye, FaEyeSlash, FaTimes } from \"react-icons/fa\";\nimport Select from \"react-select\";\nimport \"./RegisterModal.css\";\nimport SuccessModal from \"./SuccessModal\";\n\nconst RegisterModal = ({ isOpen, onClose }) => {\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    phone: \"\",\n    address: {\n      street: \"\",\n      city: \"\",\n      state: \"\",\n    },\n  });\n\n  const [provinces, setProvinces] = useState([]);\n  const [districts, setDistricts] = useState([]);\n  const [wards, setWards] = useState([]);\n  const [selectedProvince, setSelectedProvince] = useState(\"\");\n  const [selectedDistrict, setSelectedDistrict] = useState(\"\");\n  const [selectedWard, setSelectedWard] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n\n  // Fetch provinces on component mount\n  useEffect(() => {\n    const fetchProvinces = async () => {\n      try {\n        const response = await fetch(\n          \"https://provinces.open-api.vn/api/?depth=1\"\n        );\n        const data = await response.json();\n        setProvinces(data);\n      } catch (err) {\n        console.error(\"Error fetching provinces:\", err);\n      }\n    };\n    fetchProvinces();\n  }, []);\n\n  // Fetch districts when province changes\n  useEffect(() => {\n    const fetchDistricts = async () => {\n      if (selectedProvince) {\n        try {\n          const response = await fetch(\n            `https://provinces.open-api.vn/api/p/${selectedProvince}?depth=2`\n          );\n          const data = await response.json();\n          setDistricts(data.districts);\n          setSelectedDistrict(\"\");\n          setSelectedWard(\"\");\n          setWards([]);\n        } catch (err) {\n          console.error(\"Error fetching districts:\", err);\n        }\n      }\n    };\n    fetchDistricts();\n  }, [selectedProvince]);\n\n  // Fetch wards when district changes\n  useEffect(() => {\n    const fetchWards = async () => {\n      if (selectedDistrict) {\n        try {\n          const response = await fetch(\n            `https://provinces.open-api.vn/api/d/${selectedDistrict}?depth=2`\n          );\n          const data = await response.json();\n          setWards(data.wards);\n          setSelectedWard(\"\");\n        } catch (err) {\n          console.error(\"Error fetching wards:\", err);\n        }\n      }\n    };\n    fetchWards();\n  }, [selectedDistrict]);\n\n  // Update address when selections change\n  useEffect(() => {\n    const selectedProvinceName =\n      provinces.find((p) => p.code === parseInt(selectedProvince))?.name || \"\";\n    const selectedDistrictName =\n      districts.find((d) => d.code === parseInt(selectedDistrict))?.name || \"\";\n    const selectedWardName =\n      wards.find((w) => w.code === parseInt(selectedWard))?.name || \"\";\n\n    setFormData((prev) => ({\n      ...prev,\n      address: {\n        ...prev.address,\n        state: selectedProvinceName,\n        city: selectedDistrictName,\n        street: selectedWardName ? `${selectedWardName}` : \"\",\n      },\n    }));\n  }, [\n    selectedProvince,\n    selectedDistrict,\n    selectedWard,\n    provinces,\n    districts,\n    wards,\n  ]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name.includes(\".\")) {\n      const [parent, child] = name.split(\".\");\n      setFormData((prev) => ({\n        ...prev,\n        [parent]: {\n          ...prev[parent],\n          [child]: value,\n        },\n      }));\n    } else {\n      setFormData((prev) => ({\n        ...prev,\n        [name]: value,\n      }));\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n\n    if (formData.password !== formData.confirmPassword) {\n      setError(\"Mật khẩu không khớp\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        \"https://mussedupin.onrender.com/api/auth/signup\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            fullName: formData.fullName,\n            email: formData.email,\n            password: formData.password,\n            phone: formData.phone,\n            address: formData.address,\n          }),\n        }\n      );\n\n      const data = await response.json();\n\n      if (data.success) {\n        setSuccess(data.message);\n        localStorage.setItem(\"token\", data.token);\n        localStorage.setItem(\"user\", JSON.stringify(data.user));\n\n        // Hiển thị modal thành công\n        setShowSuccessModal(true);\n\n        // Đóng modal đăng ký sau 2.5s\n        setTimeout(() => {\n          onClose();\n          window.location.reload();\n        }, 2500);\n      } else {\n        setError(data.message);\n      }\n    } catch (err) {\n      setError(\"Đăng ký thất bại. Vui lòng thử lại sau.\");\n    }\n  };\n\n  // Custom styles for react-select\n  const selectStyles = {\n    control: (base) => ({\n      ...base,\n      minHeight: \"44px\",\n      backgroundColor: \"rgba(255, 255, 255, 0.9)\",\n      borderColor: \"#2c2f11\",\n      \"&:hover\": {\n        borderColor: \"#3d4117\",\n      },\n    }),\n    option: (base, { isFocused, isSelected }) => ({\n      ...base,\n      backgroundColor: isSelected\n        ? \"#2c2f11\"\n        : isFocused\n        ? \"rgba(44, 47, 17, 0.1)\"\n        : \"white\",\n      color: isSelected ? \"white\" : \"#2c2f11\",\n      \"&:active\": {\n        backgroundColor: \"#2c2f11\",\n      },\n    }),\n    placeholder: (base) => ({\n      ...base,\n      color: \"#6b7280\",\n    }),\n    singleValue: (base) => ({\n      ...base,\n      color: \"#2c2f11\",\n    }),\n    menu: (base) => ({\n      ...base,\n      backgroundColor: \"white\",\n      zIndex: 9999,\n    }),\n  };\n\n  // Format options for react-select\n  const provinceOptions = provinces.map((province) => ({\n    value: province.code,\n    label: province.name,\n  }));\n\n  const districtOptions = districts.map((district) => ({\n    value: district.code,\n    label: district.name,\n  }));\n\n  const wardOptions = wards.map((ward) => ({\n    value: ward.code,\n    label: ward.name,\n  }));\n\n  // Handle select changes\n  const handleProvinceChange = (selectedOption) => {\n    setSelectedProvince(selectedOption ? selectedOption.value.toString() : \"\");\n  };\n\n  const handleDistrictChange = (selectedOption) => {\n    setSelectedDistrict(selectedOption ? selectedOption.value.toString() : \"\");\n  };\n\n  const handleWardChange = (selectedOption) => {\n    setSelectedWard(selectedOption ? selectedOption.value.toString() : \"\");\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      <div className=\"modal-overlay\">\n        <div className=\"register-modal-container\">\n          <button className=\"close-button\" onClick={onClose}>\n            <FaTimes />\n          </button>\n\n          <h2 className=\"register-modal-title\">Đăng ký tài khoản</h2>\n          <p className=\"register-modal-subtitle\">\n            Tạo tài khoản để mua sắm dễ dàng hơn\n          </p>\n\n          {error && <div className=\"error-message\">{error}</div>}\n          {success && <div className=\"success-message\">{success}</div>}\n\n          <form onSubmit={handleSubmit} className=\"register-form\">\n            <div className=\"form-group\">\n              <label>* Họ và tên</label>\n              <input\n                type=\"text\"\n                name=\"fullName\"\n                value={formData.fullName}\n                onChange={handleChange}\n                required\n                placeholder=\"Họ và tên\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Email</label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                required\n                placeholder=\"Email\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Số điện thoại</label>\n              <input\n                type=\"tel\"\n                name=\"phone\"\n                value={formData.phone}\n                onChange={handleChange}\n                required\n                placeholder=\"Số điện thoại\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Mật khẩu</label>\n              <div className=\"password-input\">\n                <input\n                  type={showPassword ? \"text\" : \"password\"}\n                  name=\"password\"\n                  value={formData.password}\n                  onChange={handleChange}\n                  required\n                  placeholder=\"Mật khẩu\"\n                  minLength=\"6\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"password-toggle\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? <FaEyeSlash /> : <FaEye />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Xác nhận mật khẩu</label>\n              <div className=\"password-input\">\n                <input\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  name=\"confirmPassword\"\n                  value={formData.confirmPassword}\n                  onChange={handleChange}\n                  required\n                  placeholder=\"Xác nhận mật khẩu\"\n                  minLength=\"6\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"password-toggle\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                >\n                  {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Tỉnh/Thành phố</label>\n              <Select\n                value={provinceOptions.find(\n                  (option) => option.value === parseInt(selectedProvince)\n                )}\n                onChange={handleProvinceChange}\n                options={provinceOptions}\n                placeholder=\"Tìm kiếm Tỉnh/Thành phố\"\n                noOptionsMessage={() => \"Không tìm thấy kết quả\"}\n                styles={selectStyles}\n                isSearchable={true}\n                isClearable={true}\n                className=\"react-select-container\"\n                classNamePrefix=\"react-select\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Quận/Huyện</label>\n              <Select\n                value={districtOptions.find(\n                  (option) => option.value === parseInt(selectedDistrict)\n                )}\n                onChange={handleDistrictChange}\n                options={districtOptions}\n                placeholder=\"Tìm kiếm Quận/Huyện\"\n                noOptionsMessage={() => \"Không tìm thấy kết quả\"}\n                styles={selectStyles}\n                isSearchable={true}\n                isClearable={true}\n                isDisabled={!selectedProvince}\n                className=\"react-select-container\"\n                classNamePrefix=\"react-select\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>* Phường/Xã</label>\n              <Select\n                value={wardOptions.find(\n                  (option) => option.value === parseInt(selectedWard)\n                )}\n                onChange={handleWardChange}\n                options={wardOptions}\n                placeholder=\"Tìm kiếm Phường/Xã\"\n                noOptionsMessage={() => \"Không tìm thấy kết quả\"}\n                styles={selectStyles}\n                isSearchable={true}\n                isClearable={true}\n                isDisabled={!selectedDistrict}\n                className=\"react-select-container\"\n                classNamePrefix=\"react-select\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Số nhà, tên đường</label>\n              <input\n                type=\"text\"\n                name=\"address.street\"\n                value={formData.address.street}\n                onChange={handleChange}\n                placeholder=\"Số nhà, tên đường\"\n              />\n            </div>\n\n            <button type=\"submit\" className=\"register-button\">\n              Đăng ký\n            </button>\n          </form>\n        </div>\n      </div>\n\n      <SuccessModal\n        isOpen={showSuccessModal}\n        message=\"Chào mừng bạn đến với cửa hàng của chúng tôi!\"\n        onClose={() => setShowSuccessModal(false)}\n        title=\"Đăng ký thành công!\"\n      />\n    </>\n  );\n};\n\nexport default RegisterModal;\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1751302174435,
      "end": 1751302174435,
      "order": "normal-normal"
    },
    {
      "name": "vite:define",
      "start": 1751302174435,
      "end": 1751302174435,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1751302174435,
      "end": 1751302174435,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1751302174436,
      "end": 1751302174436,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1751302174436,
      "end": 1751302174436,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1751302174436,
      "end": 1751302174436,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1751302174436,
      "end": 1751302174436,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1751302174436,
      "end": 1751302174437,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1751302174437,
      "end": 1751302174437,
      "order": "normal"
    }
  ]
}
